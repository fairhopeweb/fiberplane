{"version":3,"file":"index.js","sources":["../src/timeseries.ts"],"sourcesContent":["import type { Metric, TimeRange, Timeseries, Timestamp } from \"./providerTypes\";\n\nexport type QueryPrometheusOptions = RequestInit & {\n  /**\n   * Base URL to the Prometheus service, without trailing slash.\n   */\n  baseUrl: string;\n};\n\n/**\n * Fetches timeseries data from the Prometheus `query_range` endpoint.\n *\n * @param query Prometheus query string.\n * @param timeRange Time range to fetch the data for.\n */\nexport async function querySeries(\n  query: string,\n  timeRange: TimeRange,\n  { baseUrl, mode = \"cors\", ...requestInit }: QueryPrometheusOptions,\n): Promise<Array<Timeseries>> {\n  const [stepParam, stepSeconds] = getStepFromTimeRange(timeRange);\n\n  const params = new URLSearchParams();\n  params.append(\"query\", query);\n  params.append(\"start\", roundToGrid(timeRange.from, stepSeconds, Math.floor));\n  params.append(\"end\", roundToGrid(timeRange.to, stepSeconds, Math.ceil));\n  params.append(\"step\", stepParam);\n\n  const url = `${baseUrl}/prometheus/api/v1/query_range?${params.toString()}`;\n  const response = await fetch(url, { mode, ...requestInit });\n  if (!response.ok) {\n    throw new Error(\"Error fetching prometheus data\");\n  }\n\n  const jsonResponse = await response.json();\n  if (!isObject(jsonResponse)) {\n    throw new Error(\"Unexpected response from Prometheus\");\n  }\n\n  const { data } = jsonResponse;\n  if (!isObject(data)) {\n    throw new Error(\"Invalid or missing data in Prometheus response\");\n  }\n\n  const { result } = data;\n  if (!Array.isArray(result)) {\n    throw new Error(\"Invalid or missing results in Prometheus response\");\n  }\n\n  return result.map(metricEntryToTimeseries);\n}\n\n/**\n * Maps an entry from the result array returned by the Prometheus API to a\n * Timeseries object.\n *\n * @param entry An entry returned by the Prometheus `query_range` API.\n */\nexport function metricEntryToTimeseries(entry: unknown): Timeseries {\n  if (!isObject(entry)) {\n    throw new Error(\"Unexpected entry in Prometheus response\");\n  }\n\n  const { metric, values } = entry;\n  if (!isObject(metric) || !Array.isArray(values)) {\n    throw new Error(\"Invalid or missing fields in Prometheus entry\");\n  }\n\n  const { __name__: name = \"\", ...labels } = metric;\n  if (typeof name !== \"string\") {\n    throw new Error(\"Invalid or missing name in Prometheus response\");\n  }\n\n  if (!hasOnlyStringValues(labels)) {\n    throw new Error(\"Invalid or missing label value in Prometheus response\");\n  }\n\n  const metrics: Array<Metric> = values.map((value: unknown) => {\n    if (!Array.isArray(value) || value.length !== 2) {\n      throw new Error(\"Invalid or missing metric value in Prometheus response\");\n    }\n\n    return {\n      time: new Date(value[0] * 1000).toISOString(),\n      value: Number.parseFloat(value[1]),\n      attributes: {},\n      resource: {},\n    };\n  });\n\n  return {\n    name,\n    labels,\n    metrics,\n    attributes: {},\n    resource: {},\n    visible: true,\n  };\n}\n\n/**\n * Rounds the timestamp to a \"grid\" with intervals defined by the step size.\n * This assures that when we scroll a chart forward or backward in time, we\n * \"snap\" to the same grid, to avoid the issue of bucket realignment, giving\n * unexpected jumps in the graph.\n *\n * @param timestamp The timestamp to round.\n * @param stepSeconds The amount of seconds used for the step size.\n * @param round The rounding function to use. Use `Math.floor` for the start\n *              of the time range, and `Math.ceil` for the end.\n */\nexport function roundToGrid(\n  timestamp: Timestamp,\n  stepSeconds: number,\n  round: typeof Math.round,\n): Timestamp {\n  const seconds = getSecondsFromTimestamp(timestamp);\n  return new Date(\n    round(seconds / stepSeconds) * stepSeconds * 1000,\n  ).toISOString();\n}\n\n/**\n * Calculates the step size to be used in Prometheus queries.\n *\n * @returns Step size, both as a string to use with Prometheus, and a number of\n *          seconds.\n */\nexport function getStepFromTimeRange(timeRange: TimeRange): [string, number] {\n  const from = getSecondsFromTimestamp(timeRange.from);\n  const to = getSecondsFromTimestamp(timeRange.to);\n\n  let step = (to - from) / 120;\n  let secondsMultiplier = 1;\n  let unit = \"s\";\n\n  if (step >= 60) {\n    step /= 60;\n    secondsMultiplier = 60;\n    unit = \"m\";\n\n    if (step >= 60) {\n      step /= 60;\n      secondsMultiplier *= 60;\n      unit = \"h\";\n    }\n  }\n\n  const amount = Math.ceil(step);\n  return [`${amount}${unit}`, amount * secondsMultiplier];\n}\n\nfunction getSecondsFromTimestamp(timestamp: Timestamp): number {\n  return +new Date(timestamp) / 1000;\n}\n\nfunction hasOnlyStringValues(\n  object: Record<string, unknown>,\n): object is Record<string, string> {\n  return Object.values(object).every((label) => typeof label === \"string\");\n}\n\nfunction isObject(\n  maybeObject: unknown,\n): maybeObject is Record<string, unknown> {\n  return typeof maybeObject === \"object\" && maybeObject != null;\n}\n"],"names":["querySeries","query","timeRange","baseUrl","mode","requestInit","stepParam","stepSeconds","getStepFromTimeRange","params","URLSearchParams","append","roundToGrid","from","Math","floor","to","ceil","url","toString","response","fetch","ok","Error","jsonResponse","json","isObject","data","result","Array","isArray","map","metricEntryToTimeseries","entry","metric","values","__name__","name","labels","hasOnlyStringValues","metrics","value","length","time","Date","toISOString","Number","parseFloat","attributes","resource","visible","timestamp","round","seconds","getSecondsFromTimestamp","step","secondsMultiplier","unit","amount","object","Object","every","label","maybeObject"],"mappings":"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"}