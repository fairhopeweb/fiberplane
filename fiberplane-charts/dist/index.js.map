{"version":3,"file":"index.js","sources":["../src/BaseComponents/ButtonGroup.tsx","../src/BaseComponents/Containers.tsx","../src/BaseComponents/Controls.tsx","../src/BaseComponents/Icon/icons/ChartBar.svg","../src/BaseComponents/Icon/icons/ChartLine.svg","../src/BaseComponents/Icon/icons/Check.svg","../src/BaseComponents/Icon/icons/Combined.svg","../src/BaseComponents/Icon/icons/Percentage.svg","../src/BaseComponents/Icon/icons/Stacked.svg","../src/BaseComponents/Icon/icons/TriangleDown.svg","../src/BaseComponents/Icon/IconMap.ts","../src/BaseComponents/Icon/Icon.tsx","../src/BaseComponents/IconButton.tsx","../src/constants.ts","../src/utils/closestPoints.ts","../src/utils/compact.ts","../src/utils/convert.ts","../src/utils/findUniqueKeys.ts","../src/utils/sortBy.ts","../src/utils/formatTimeseries.tsx","../src/utils/mergeRefs.ts","../src/utils/noop.ts","../src/utils/preventDefault.ts","../src/utils/scaleFormatter.ts","../src/utils/timestamps.ts","../src/utils/useragent.ts","../src/MetricsChart/ChartControls.tsx","../src/context/ChartSizeContext.ts","../src/context/CoreControlsContext.ts","../src/context/FocusedTimeseriesApiContext.ts","../src/context/FocusedTimeseriesStateContext.ts","../src/context/InteractiveControlsContext.ts","../src/context/InteractiveControlsStateContext.ts","../src/context/TooltipApiContext.ts","../src/hooks/useHandler.ts","../src/hooks/useCoreControls.ts","../src/hooks/useExpandable.tsx","../src/hooks/useForceUpdate.ts","../src/hooks/useInteractiveControls.ts","../src/hooks/useIntersectionObserver.ts","../src/hooks/useMeasure.ts","../src/hooks/useMouseControls.ts","../src/MetricsChart/scales.ts","../src/hooks/useScales.ts","../src/hooks/useTooltip.ts","../src/MetricsChart/ChartSizeContainerProvider.tsx","../src/MetricsChart/FocusedTimeseriesContextProvider.tsx","../src/colors.ts","../src/ChartLegend/ChartLegendItem.tsx","../src/ChartLegend/ChartLegend.tsx","../src/MetricsChart/ChartContent/TimeseriesTable.tsx","../src/MetricsChart/ChartContent/Areas.tsx","../src/MetricsChart/ChartContent/BarsStacked/utils.ts","../src/MetricsChart/ChartContent/BarsStacked/hooks.tsx","../src/MetricsChart/ChartContent/BarsStacked/BarsStacked.tsx","../src/MetricsChart/ChartContent/DefaultBars/utils.tsx","../src/MetricsChart/ChartContent/DefaultBars/hooks.ts","../src/MetricsChart/ChartContent/DefaultBars/DefaultBars.tsx","../src/MetricsChart/ChartContent/Lines/Series.tsx","../src/MetricsChart/ChartContent/Lines/Line.tsx","../src/MetricsChart/ChartContent/Lines/Lines.tsx","../src/MetricsChart/ChartContent/ChartContent.tsx","../src/MetricsChart/GridWithAxes/Bottom.tsx","../src/MetricsChart/GridWithAxes/GridWithAxes.tsx","../src/MetricsChart/ZoomBar.tsx","../src/MetricsChart/MainChartContent.tsx","../src/MetricsChart/MetricsChart.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ButtonGroup = styled.span`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  padding: 4px 8px;\n  background: ${({ theme }) => theme.colorBase200};\n  border-radius: ${({ theme }) => theme.borderRadius500};\n`;\n","import styled from \"styled-components\";\n\nexport const Box = styled.div`\n  box-sizing: border-box;\n  margin: 0;\n  min-width: 0;\n`;\n\nexport const Container = styled(Box)`\n  display: flex;\n`;\n","import styled from \"styled-components\";\n\nexport const ControlsContainer = styled.div`\n  display: flex;\n  margin: 0 0 12px;\n  gap: 24px;\n`;\n\nexport const ControlsGroup = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const ControlsSet = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nexport const ControlsSetLabel = styled.span`\n  font: ${({ theme }) => theme.fontControlsShortHand};\n  letter-spacing: ${({ theme }) => theme.fontControlsLetterSpacing};\n  color: ${({ theme }) => theme.colorBase500};\n`;\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.8125 15.625H17.1875V3.125C17.1875 2.95924 17.1217 2.80027 17.0044 2.68306C16.8872 2.56585 16.7283 2.5 16.5625 2.5H12.1875C12.0217 2.5 11.8628 2.56585 11.7456 2.68306C11.6283 2.80027 11.5625 2.95924 11.5625 3.125V6.25H7.8125C7.64674 6.25 7.48777 6.31585 7.37056 6.43306C7.25335 6.55027 7.1875 6.70924 7.1875 6.875V10H3.4375C3.27174 10 3.11277 10.0658 2.99556 10.1831C2.87835 10.3003 2.8125 10.4592 2.8125 10.625V15.625H2.1875C2.02174 15.625 1.86277 15.6908 1.74556 15.8081C1.62835 15.9253 1.5625 16.0842 1.5625 16.25C1.5625 16.4158 1.62835 16.5747 1.74556 16.6919C1.86277 16.8092 2.02174 16.875 2.1875 16.875H17.8125C17.9783 16.875 18.1372 16.8092 18.2544 16.6919C18.3717 16.5747 18.4375 16.4158 18.4375 16.25C18.4375 16.0842 18.3717 15.9253 18.2544 15.8081C18.1372 15.6908 17.9783 15.625 17.8125 15.625ZM8.4375 7.5H11.5625V15.625H8.4375V7.5ZM4.0625 11.25H7.1875V15.625H4.0625V11.25Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.5 15.625H3.125V12.7812L7.53125 8.92969L12.125 12.375C12.24 12.4614 12.3813 12.5055 12.5251 12.4998C12.6688 12.4941 12.8062 12.439 12.9141 12.3438L17.9141 7.96875C17.9756 7.91437 18.0259 7.84841 18.0619 7.77461C18.098 7.70082 18.1192 7.62065 18.1242 7.53867C18.1293 7.45669 18.1182 7.37452 18.0915 7.29684C18.0648 7.21916 18.0231 7.14749 17.9688 7.08594C17.9144 7.02438 17.8484 6.97414 17.7746 6.93807C17.7008 6.90201 17.6206 6.88084 17.5387 6.87576C17.4567 6.87068 17.3745 6.8818 17.2968 6.90848C17.2192 6.93516 17.1475 6.97687 17.0859 7.03125L12.4688 11.0703L7.875 7.625C7.75997 7.5386 7.61866 7.49453 7.47491 7.50022C7.33116 7.50591 7.19377 7.56102 7.08594 7.65625L3.125 11.125V3.75C3.125 3.58424 3.05915 3.42527 2.94194 3.30806C2.82473 3.19085 2.66576 3.125 2.5 3.125C2.33424 3.125 2.17527 3.19085 2.05806 3.30806C1.94085 3.42527 1.875 3.58424 1.875 3.75V16.25C1.875 16.4158 1.94085 16.5747 2.05806 16.6919C2.17527 16.8092 2.33424 16.875 2.5 16.875H17.5C17.6658 16.875 17.8247 16.8092 17.9419 16.6919C18.0592 16.5747 18.125 16.4158 18.125 16.25C18.125 16.0842 18.0592 15.9253 17.9419 15.8081C17.8247 15.6908 17.6658 15.625 17.5 15.625Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.1251 15C7.95944 14.9977 7.80061 14.9336 7.67979 14.8203L3.30479 10.4453C3.20512 10.3239 3.15419 10.1697 3.1619 10.0128C3.1696 9.85587 3.2354 9.70744 3.34648 9.59636C3.45756 9.48527 3.606 9.41948 3.7629 9.41177C3.91981 9.40407 4.07398 9.455 4.19541 9.55466L8.1251 13.4922L16.4298 5.17966C16.5512 5.08 16.7054 5.02907 16.8623 5.03677C17.0192 5.04448 17.1676 5.11027 17.2787 5.22136C17.3898 5.33244 17.4556 5.48087 17.4633 5.63778C17.471 5.79469 17.4201 5.94885 17.3204 6.07029L8.57041 14.8203C8.44958 14.9336 8.29075 14.9977 8.1251 15Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.157 3.79383C12.0751 3.61284 11.8938 3.49752 11.6952 3.50004C11.4966 3.50256 11.3183 3.62243 11.2409 3.80543L8.43641 10.4442L7.29719 8.11376C7.21401 7.9436 7.04184 7.83505 6.85245 7.83336C6.66307 7.83167 6.48898 7.93713 6.40278 8.10577L1.97276 16.7724C1.89353 16.9274 1.90062 17.1125 1.99148 17.261C2.08234 17.4095 2.24389 17.5 2.41797 17.5H11.0846C11.0858 17.5 11.087 17.5 11.0882 17.5H17.5856C17.7555 17.5 17.9137 17.4138 18.0058 17.271C18.0979 17.1283 18.1112 16.9486 18.0411 16.7938L12.157 3.79383ZM11.3968 16.5H16.8105L11.7173 5.24746L9.01875 11.6354L11.3968 16.5ZM8.50275 12.8569L10.2837 16.5H6.96373L8.50275 12.8569ZM7.92042 11.6656L5.87815 16.5H3.23508L6.83801 9.45142L7.92042 11.6656Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.3536 4.64645C15.5488 4.84171 15.5488 5.15829 15.3536 5.35355L5.35355 15.3536C5.15829 15.5488 4.84171 15.5488 4.64645 15.3536C4.45118 15.1583 4.45118 14.8417 4.64645 14.6464L14.6464 4.64645C14.8417 4.45118 15.1583 4.45118 15.3536 4.64645ZM6.5 5.5C5.94772 5.5 5.5 5.94772 5.5 6.5C5.5 7.05228 5.94772 7.5 6.5 7.5C7.05228 7.5 7.5 7.05228 7.5 6.5C7.5 5.94772 7.05228 5.5 6.5 5.5ZM4.5 6.5C4.5 5.39543 5.39543 4.5 6.5 4.5C7.60457 4.5 8.5 5.39543 8.5 6.5C8.5 7.60457 7.60457 8.5 6.5 8.5C5.39543 8.5 4.5 7.60457 4.5 6.5ZM12.5 13.5C12.5 12.9477 12.9477 12.5 13.5 12.5C14.0523 12.5 14.5 12.9477 14.5 13.5C14.5 14.0523 14.0523 14.5 13.5 14.5C12.9477 14.5 12.5 14.0523 12.5 13.5ZM13.5 11.5C12.3954 11.5 11.5 12.3954 11.5 13.5C11.5 14.6046 12.3954 15.5 13.5 15.5C14.6046 15.5 15.5 14.6046 15.5 13.5C15.5 12.3954 14.6046 11.5 13.5 11.5Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6875 3.125C11.6875 2.84886 11.9114 2.625 12.1875 2.625H16.5625C16.8386 2.625 17.0625 2.84886 17.0625 3.125V16.25C17.0625 16.5261 16.8386 16.75 16.5625 16.75H14.4464C14.4458 16.75 14.4451 16.75 14.4444 16.75H7.88346C7.86028 16.7533 7.83659 16.755 7.8125 16.755C7.78841 16.755 7.76472 16.7533 7.74154 16.75H3.4375C3.16136 16.75 2.9375 16.5261 2.9375 16.25V12.4372V11.4997V6.81216C2.9375 6.53602 3.16136 6.31216 3.4375 6.31216H7.3125V5.875C7.3125 5.59886 7.53636 5.375 7.8125 5.375H11.6875V3.125ZM7.3125 7.31216H3.9375V10.9997H7.3125V7.31216ZM7.3125 11.9997H3.9375V12.4372V15.75H7.3125V11.9997ZM8.3125 15.75V11.4997V6.81216V6.375H11.6875V15.75H8.3125ZM12.6875 15.75V5.875V3.625H16.0625V15.75H12.6875Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.1425 13L13.4871 7H6.79785L10.1425 13Z\" fill=\"currentColor\"/>\n</svg>\n","import ChartBarIcon from \"./icons/ChartBar.svg\";\nimport ChartLineIcon from \"./icons/ChartLine.svg\";\nimport CheckIcon from \"./icons/Check.svg\";\nimport CombinedIcon from \"./icons/Combined.svg\";\nimport PercentageIcon from \"./icons/Percentage.svg\";\nimport StackedIcon from \"./icons/Stacked.svg\";\nimport TriangleDownIcon from \"./icons/TriangleDown.svg\";\n\nexport const ICON_MAP = {\n    chart_bar: ChartBarIcon,\n    chart_line: ChartLineIcon,\n    check: CheckIcon,\n    combined: CombinedIcon,\n    percentage: PercentageIcon,\n    stacked: StackedIcon,\n    triangle_down: TriangleDownIcon,\n} as const;\n","import { ICON_MAP } from \"./IconMap\";\n\ntype IconType = keyof typeof ICON_MAP;\n\ntype Props = React.SVGProps<SVGSVGElement> & {\n    type: IconType;\n};\n\nexport function Icon({ type, ...svgProps }: Props): JSX.Element {\n    const Component = ICON_MAP[type];\n    return <Component {...svgProps} />;\n}\n","import { forwardRef } from \"react\";\nimport styled, { css, DefaultTheme, useTheme } from \"styled-components\";\n\nexport const buttonStyling = css`\n    --color: var(--button-normal-color);\n    --backgroundColor: var(--button-normal-backgroundColor);\n  \n    outline: none;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    transition-property: background-color, border-color;\n    transition-duration: 0.2s;\n    transition-timing-function: linear;\n    border-radius: ${({ theme }) => theme.borderRadius500};\n    box-sizing: border-box;\n    height: var(--icon-button-height, 20px);\n    width: var(--icon-button-width, 20px);\n    padding: var(--icon-button-padding, 2px);\n    color: var(--color);\n    background-color: var(--background);\n    border: 1px solid var(--background);\n  \n    :focus,\n    :hover,\n    :active,\n    .active {\n      cursor: pointer;\n    }\n  \n    :focus {\n      border-color: ${({ theme }) => theme.colorPrimary500};\n      outline: ${({ theme }) => theme.effectFocusOutline};\n  \n      --background: var(--button-focus-backgroundColor);\n      --color: var(--button-focus-color);\n    }\n  \n    &:disabled {\n      cursor: default;\n  \n      --color: var(--button-disabled-color);\n      --background: var(--button-disabled-backgroundColor);\n    }\n  \n    &.active,\n    &:active:not([data-dragging], [disabled]) {\n      --background: var(--button-active-backgroundColor);\n      --color: var(--button-active-color);\n    }\n  \n    :hover:not([data-disabled][data-dragging], [disabled]) {\n      --background: var(--button-hover-backgroundColor);\n      --color: var(--button-hover-color);\n      border: none;\n    }\n  \n    & svg {\n      flex: 0 0 var(--icon-button-icon-size);\n      width: var(--icon-button-icon-size);\n      height: var(--icon-button-icon-size);\n    }\n  `;\n\ntype IconButtonColorSet = {\n    color: string;\n    backgroundColor: string;\n};\n\ntype IconButtonTheme = {\n    normal: IconButtonColorSet;\n    hover: IconButtonColorSet;\n    active: IconButtonColorSet;\n    focus: IconButtonColorSet;\n    disabled: IconButtonColorSet;\n};\n\nfunction useIconButtonTheme(theme: DefaultTheme): IconButtonTheme {\n    return {\n        normal: {\n            color: theme.colorBase800,\n            backgroundColor: \"transparent\",\n        },\n        hover: {\n            color: theme.colorBase800,\n            backgroundColor: theme.colorBase300,\n        },\n        active: {\n            color: theme.colorBackground,\n            backgroundColor: theme.colorBase600,\n        },\n        focus: {\n            color: theme.colorBase600,\n            backgroundColor: theme.colorBackground,\n        },\n        disabled: {\n            color: theme.colorBase500,\n            backgroundColor: \"transparent\",\n        },\n    };\n}\n\nconst StyledButton = styled.button`\n  ${buttonStyling}\n`;\n\nconst buttonSize = {\n    padding: \"6px\",\n    width: \"32px\",\n    height: \"32px\",\n    iconSize: \"20px\",\n};\n\nexport type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    active?: boolean;\n};\n\nexport const IconButton = forwardRef(function IconButton(\n    props: Props,\n    ref: React.ForwardedRef<HTMLButtonElement>,\n): JSX.Element {\n    const {\n        className = \"\",\n        style = {},\n        active = false,\n        children,\n        ...otherProps\n    } = props;\n\n    const theme = useTheme();\n    const iconButtonTheme = useIconButtonTheme(theme);\n\n    const newStyle = {\n        ...style,\n        \"--icon-button-padding\": buttonSize.padding,\n        \"--icon-button-width\": buttonSize.width,\n        \"--icon-button-height\": buttonSize.height,\n        \"--icon-button-icon-size\": buttonSize.iconSize,\n\n        \"--button-normal-color\": iconButtonTheme.normal.color,\n        \"--button-normal-backgroundColor\":\n            iconButtonTheme.normal.backgroundColor,\n        \"--button-hover-color\": iconButtonTheme.hover.color,\n        \"--button-hover-backgroundColor\": iconButtonTheme.hover.backgroundColor,\n        \"--button-active-color\": iconButtonTheme.active.color,\n        \"--button-active-backgroundColor\":\n            iconButtonTheme.active.backgroundColor,\n        \"--button-focus-color\": iconButtonTheme.focus.color,\n        \"--button-focus-backgroundColor\": iconButtonTheme.focus.backgroundColor,\n        \"--button-disabled-color\": iconButtonTheme.disabled.color,\n        \"--button-disabled-backgroundColor\":\n            iconButtonTheme.disabled.backgroundColor,\n    };\n\n    const elementProps = {\n        ...otherProps,\n        ref,\n        style: newStyle,\n        className: active ? `${className} active` : className,\n        \"aria-pressed\": active,\n    };\n\n    return <StyledButton {...elementProps}>{children}</StyledButton>;\n});\n","// Dimensions.\nexport const HEIGHT = 275;\nexport const MARGINS = { top: 0, bottom: 20, left: 38, right: 0 };\n","import { localPoint } from \"@visx/event\";\n\nimport { MARGINS } from \"../constants\";\nimport type { TimeScale, ValueScale } from \"../MetricsChart/scales\";\n\nexport function toClosestPointArgs(args: {\n    event: React.MouseEvent<SVGElement>;\n    xScale: TimeScale;\n    yScale: ValueScale;\n    /**\n     * Determine square boundaries within which to search for the closest point.\n     *\n     * The square side is 2 * EPS pixels.\n     *\n     * By default the value of 20 is used\n     */\n    EPS?: number;\n}) {\n    const { event, xScale, yScale, EPS = 20 } = args;\n    const { x: x0, y: y0 } = localPoint(event) || {\n        x: 0,\n        y: 0,\n    };\n\n    const xRange = getBoundary({\n        value: x0 - MARGINS.left,\n        // Decrease the EPS value slightly\n        EPS,\n        scale: xScale,\n    });\n\n    const yRange = getBoundary({\n        value: y0 - MARGINS.top,\n        EPS,\n        scale: yScale,\n    });\n\n    return {\n        xRange,\n        yRange,\n    };\n}\n\nexport type Boundary = {\n    value: number;\n    high: number;\n    low: number;\n};\n\ntype GetBoundaryArgs = {\n    value: number;\n    EPS: number;\n    scale: TimeScale | ValueScale;\n};\n\nexport function getBoundary({ value, EPS, scale }: GetBoundaryArgs): Boundary {\n    const low = scale.invert(value - EPS).valueOf();\n    const high = scale.invert(value + EPS).valueOf();\n\n    return {\n        value: scale.invert(value).valueOf(),\n        low: Math.min(low, high),\n        high: Math.max(low, high),\n    };\n}\n\nexport type ClosestPointArgs = {\n    xRange: Boundary;\n    yRange: Boundary;\n};\n\nexport function insideRange(value: number, range: Boundary): boolean {\n    return range.low < value && value < range.high;\n}\n","/**\n * Strips all falsy values from an array.\n */\nexport function compact<T>(\n    items: Array<T | false | undefined | null | 0 | \"\">,\n): Array<T> {\n    return items.filter(Boolean) as Array<T>;\n}\n","import { compact } from \"./compact\";\nimport type { Timeseries } from \"../providerTypes\";\n\nexport const dateKey: unique symbol = Symbol(\"date\");\n\nexport type DataItem = { [dateKey]: string; data: Map<Timeseries, number> };\n\ntype TimestampRecord = Record<string, number>;\n\nexport function getTimestamp(d: DataItem): number {\n    return new Date(d[dateKey]).getTime();\n}\n\nexport function dataToPercentages(dataItems: Array<DataItem>): Array<DataItem> {\n    return dataItems.map((item): DataItem => {\n        let total = 0;\n        for (const value of item.data.values()) {\n            total += value;\n        }\n\n        if (total === 0) {\n            return item;\n        }\n\n        const data: Map<Timeseries, number> = new Map();\n        for (const [key, value] of item.data) {\n            data.set(key, (value / total) * 100);\n        }\n\n        return {\n            [dateKey]: item[dateKey],\n            data,\n        };\n    });\n}\n\nexport function toDataItems(\n    timeseriesData: ReadonlyArray<Timeseries>,\n): Array<DataItem> {\n    const timestampSet = new Set<string>();\n    const annotatedFilteredDataIn = compact(\n        timeseriesData.map((series): null | [Timeseries, TimestampRecord] => {\n            if (!series.visible) {\n                return null;\n            }\n\n            // Make it easy to look up points by timestamp when assembling result:\n            const data: TimestampRecord = {};\n            for (const metric of series.metrics) {\n                data[metric.time] = metric.value;\n                timestampSet.add(metric.time);\n            }\n\n            return [series, data];\n        }),\n    );\n\n    return [...timestampSet].sort().map((timestamp): DataItem => {\n        const data = new Map();\n        for (const [series, record] of annotatedFilteredDataIn) {\n            data.set(series, record[timestamp] ?? 0);\n        }\n\n        return { [dateKey]: timestamp, data };\n    });\n}\n","import type { Timeseries } from \"../providerTypes\";\n\n/**\n * Return a list of keys whose values vary across series (or don't exist\n * everywhere).\n */\nexport function findUniqueKeys(timeseriesData: Array<Timeseries>) {\n    let constantKeys: Set<string> | undefined;\n    let detectedValues: Record<string, string> = {};\n\n    for (const timeseries of timeseriesData) {\n        const keys = Object.keys(timeseries.labels);\n\n        if (constantKeys === undefined) {\n            constantKeys = new Set(keys);\n            detectedValues = { ...timeseries.labels };\n        } else {\n            for (const key of keys) {\n                if (detectedValues[key] !== timeseries.labels[key]) {\n                    constantKeys.delete(key);\n                }\n\n                detectedValues[key] = timeseries.labels[key] || \"\";\n            }\n        }\n    }\n\n    const allKeys = Object.keys(detectedValues);\n    return allKeys.filter(\n        (key) => constantKeys === undefined || constantKeys.has(key) === false,\n    );\n}\n","/**\n * Sorts an array ascending by priority.\n *\n * *Warning:* As this function uses `Array#sort()` it also mutates the input\n * array.\n */\nexport function sortBy<T, U extends number | string>(\n    array: Array<T>,\n    getPriorityFn: (item: T) => U,\n    reverse: boolean = false,\n) {\n    return array.sort((a, b) => {\n        const priorityA = getPriorityFn(a);\n        const priorityB = getPriorityFn(b);\n        if (priorityA < priorityB) {\n            return reverse === true ? 1 : -1;\n        } else if (priorityA > priorityB) {\n            return reverse === true ? -1 : 1;\n        } else {\n            return 0;\n        }\n    });\n}\n","import { Fragment, memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport type { Timeseries } from \"../types\";\nimport { sortBy } from \"./sortBy\";\n\n/**\n * Format metric to string. This is used to generate human readable strings\n *\n * Sorting of the labels is optional, but in the UI can be handy to more quickly find\n * a specific label in the text\n */\nexport function formatTimeseries(\n    timeseries: Timeseries,\n    { sortLabels = true }: { sortLabels?: boolean } = {},\n): string {\n    const { name, labels } = timeseries;\n    let entries = Object.entries(labels);\n    entries = sortLabels ? sortBy(entries, ([key]) => key) : entries;\n\n    return `${name}{${entries.map(([k, v]) => `\"${k}\":\"${v}\"`).join(\", \")}}`;\n}\n\nconst Emphasis = styled.span`\n  background-color: ${({ theme }) => theme.colorBase200};\n  /* TODO (Jacco): we should try and find out what to do with this styling */\n  /* stylelint-disable-next-line scale-unlimited/declaration-strict-value */\n  font-weight: 600;\n  border-radius: ${({ theme }) => theme.borderRadius500};\n  padding: 1px 4px;\n  display: inline-block;\n`;\n\nexport const FormattedTimeseries = memo(function FormattedTimeseries({\n    metric,\n    sortLabels = true,\n    emphasizedKeys = [],\n}: {\n    metric: Timeseries;\n    sortLabels?: boolean;\n    emphasizedKeys?: string[];\n}): JSX.Element {\n    const { name, labels } = metric;\n\n    let labelEntries: Array<[string, string]> = Object.entries(labels);\n    if (sortLabels) {\n        labelEntries = sortBy(labelEntries, ([key]) => key);\n    }\n\n    return (\n        <>\n            {name && `${name}: `}\n            {labelEntries.map(([key, value], index) => (\n                <Fragment key={key}>\n                    {index > 0 && \", \"}\n                    <span className={key in emphasizedKeys ? \"emphasize\" : \"\"}>\n                        {key}\n                        {value && [\n                            \": \",\n                            emphasizedKeys.includes(key) ? (\n                                <Emphasis key={key}>{value}</Emphasis>\n                            ) : (\n                                value\n                            ),\n                        ]}\n                    </span>\n                </Fragment>\n            ))}\n        </>\n    );\n});\n","/**\n * Taken from: https://github.com/gregberge/react-merge-refs\n *\n * Copyright (c) 2020 Greg Bergé\n *\n * @license MIT\n */\nexport function mergeRefs<T extends HTMLElement>(\n    refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>,\n): React.RefCallback<T> {\n    return (value) => {\n        for (const ref of refs) {\n            if (typeof ref === \"function\") {\n                ref(value);\n            } else if (ref != null) {\n                (ref as React.MutableRefObject<T | null>).current = value;\n            }\n        }\n    };\n}\n","export function noop() {}\n","export function preventDefault(event: Event | React.SyntheticEvent) {\n    event.preventDefault();\n}\n","import { getTicks } from \"@visx/scale\";\nimport type { NumberValue, ScaleBand } from \"d3-scale\";\nimport type { TickFormatter } from \"@visx/axis\";\nimport { utcFormat } from \"d3-time-format\";\n\nfunction getFormatter(unit: TimeScale): ReturnType<typeof utcFormat> {\n    switch (unit) {\n        case \"milliseconds\":\n            return utcFormat(\".%L\");\n        case \"seconds\":\n            return utcFormat(\":%S\");\n        case \"minutes\":\n            return utcFormat(\"%I:%M\");\n        case \"hours\":\n            return utcFormat(\"%I %p\");\n    }\n\n    // must be days\n    return utcFormat(\"%a %d\");\n}\n\nconst timeScales = [\n    \"milliseconds\",\n    \"seconds\",\n    \"minutes\",\n    \"hours\",\n    \"days\",\n] as const;\n\nexport function getTimeFormatter(\n    scale: ScaleBand<number>,\n): TickFormatter<Date | NumberValue> {\n    const ticks = getTicks(scale, 10);\n    if (ticks.length === 0) {\n        return (item) => item.toString();\n    }\n\n    const first = ticks[0];\n    const second = ticks[1];\n\n    const timeScale =\n        first !== undefined && second !== undefined\n            ? getTimeScale(first, second)\n            : \"hours\";\n    const formatter = getFormatter(timeScale);\n\n    return (item) => {\n        const value = item instanceof Date ? item : new Date(item.valueOf());\n        return formatter(value);\n    };\n}\n\ntype TimeScale = typeof timeScales[number];\n\nfunction getTimeScale(time1: number, time2: number): TimeScale {\n    const delta = time2 - time1;\n    if (delta < 1000) {\n        return \"milliseconds\";\n    }\n\n    if (delta < 60 * 1000) {\n        return \"seconds\";\n    }\n\n    if (delta < 60 * 60 * 1000) {\n        return \"minutes\";\n    }\n\n    if (delta < 24 * 60 * 60 * 1000) {\n        return \"hours\";\n    }\n\n    return \"days\";\n}\n","import type { Timestamp } from \"../providerTypes\";\n\nexport const dateToSeconds = (date: Date): number => date.getTime() / 1000;\n\nexport const secondsToTimestamp = (seconds: number): Timestamp =>\n    new Date(seconds * 1000).toISOString();\n\nexport const timestampToDate = (timestamp: Timestamp): Date =>\n    new Date(timestamp);\n\nexport const timestampToSeconds = (timestamp: Timestamp): number =>\n    new Date(timestamp).getTime() / 1000;\n\nexport const timestampToMs = (value: Timestamp) => {\n    const date = new Date(value);\n    return date.getTime();\n};\n","const os =\n    typeof navigator === \"undefined\"\n        ? \"\"\n        : navigator.platform.match(/mac|win|linux/i)?.[0]?.toLowerCase();\n\nexport const isMac = os === \"mac\";\n","import {\n    ButtonGroup,\n    ControlsContainer,\n    ControlsGroup,\n    ControlsSet,\n    ControlsSetLabel,\n    Icon,\n    IconButton,\n} from \"../BaseComponents\";\nimport type { GraphType, StackingType } from \"../types\";\nimport { preventDefault } from \"../utils\";\n\ntype Props = {\n    graphType: GraphType;\n    onChangeGraphType?: (graphType: GraphType) => void;\n    onChangeStackingType?: (stackingType: StackingType) => void;\n    showStackingControls: boolean;\n    stackingType: StackingType;\n};\n\n/**\n * Control what kind fo chart you're viewing (and more)\n */\nexport function ChartControls({\n    graphType,\n    onChangeGraphType,\n    onChangeStackingType,\n    showStackingControls,\n    stackingType,\n}: Props): JSX.Element | null {\n    if (!onChangeGraphType && !onChangeStackingType) {\n        return null;\n    }\n\n    return (\n        <ControlsContainer>\n            <ControlsGroup key=\"core\">\n                {onChangeGraphType && (\n                    <ControlsSet>\n                        <ControlsSetLabel>Type</ControlsSetLabel>\n                        <ButtonGroup>\n                            <IconButton\n                                active={graphType === \"line\"}\n                                aria-label=\"Line chart\"\n                                className=\"iconButton\"\n                                onClick={(event) => {\n                                    preventDefault(event);\n                                    onChangeGraphType(\"line\");\n                                }}\n                            >\n                                <Icon type=\"chart_line\" />\n                            </IconButton>\n\n                            <IconButton\n                                active={graphType === \"bar\"}\n                                aria-label=\"Bar chart\"\n                                className=\"iconButton\"\n                                onClick={(event) => {\n                                    preventDefault(event);\n                                    onChangeGraphType(\"bar\");\n                                }}\n                            >\n                                <Icon type=\"chart_bar\" />\n                            </IconButton>\n                        </ButtonGroup>\n                    </ControlsSet>\n                )}\n\n                {showStackingControls && onChangeStackingType && (\n                    <ControlsSet>\n                        <ControlsSetLabel>Stacking</ControlsSetLabel>\n                        <ButtonGroup>\n                            <IconButton\n                                active={stackingType === \"none\"}\n                                aria-label=\"Combined/default\"\n                                className=\"iconButton\"\n                                onClick={(event) => {\n                                    preventDefault(event);\n                                    onChangeStackingType(\"none\");\n                                }}\n                            >\n                                <Icon type=\"combined\" />\n                            </IconButton>\n\n                            <IconButton\n                                active={stackingType === \"stacked\"}\n                                aria-label=\"Stacked\"\n                                className=\"iconButton\"\n                                type=\"button\"\n                                onClick={(event) => {\n                                    preventDefault(event);\n                                    onChangeStackingType(\"stacked\");\n                                }}\n                            >\n                                <Icon type=\"stacked\" />\n                            </IconButton>\n\n                            <IconButton\n                                active={stackingType === \"percentage\"}\n                                aria-label=\"Stacked/percentage\"\n                                className=\"iconButton\"\n                                onClick={(event) => {\n                                    preventDefault(event);\n                                    onChangeStackingType(\"percentage\");\n                                }}\n                            >\n                                <Icon type=\"percentage\" />\n                            </IconButton>\n                        </ButtonGroup>\n                    </ControlsSet>\n                )}\n            </ControlsGroup>\n            <ControlsGroup key=\"meta\" />\n        </ControlsContainer>\n    );\n}\n","import { createContext } from \"react\";\n\nexport type ChartSizeContextValue = {\n    width: number;\n    height: number;\n    xMax: number;\n    yMax: number;\n};\n\n/**\n * Context for tracking the size of the chart.\n */\nexport const ChartSizeContext = createContext<ChartSizeContextValue>({\n    width: 0,\n    height: 0,\n    xMax: 0,\n    yMax: 0,\n});\n","import { createContext } from \"react\";\n\nexport type CoreControls = {\n    zoom(factor: number, focusRatio?: number): void;\n    move(deltaRation: number): void;\n};\n\n/**\n * Context that handles the result of useCoreControls hooks\n */\nexport const CoreControlsContext = createContext<CoreControls>({\n    zoom() {},\n    move() {},\n});\n","import { createContext } from \"react\";\n\nimport { noop } from \"../utils\";\nimport type { Timeseries } from \"../types\";\n\nexport type FocusedTimeseriesApi = {\n    setFocusedTimeseries: (focusedTimeseries: Timeseries | null) => void;\n};\n\nexport const FocusedTimeseriesApiContext = createContext<FocusedTimeseriesApi>({\n    setFocusedTimeseries: noop,\n});\n","import { createContext } from \"react\";\n\nimport type { Timeseries } from \"../types\";\n\nexport type FocusedTimeseriesState = {\n    focusedTimeseries: Timeseries | null;\n};\n\nexport const FocusedTimeseriesStateContext =\n    createContext<FocusedTimeseriesState>({ focusedTimeseries: null });\n","import { createContext } from \"react\";\n\nexport type InteractiveControls = {\n    reset(): void;\n    startDrag(start: number | null): void;\n    startZoom(start: number | null): void;\n    updateEndValue(end: number): void;\n};\n\n/**\n * One of two parts of the useInteractiveControlState hook results\n *\n * This is the api/functional part\n */\nexport const InteractiveControlsContext = createContext<InteractiveControls>({\n    reset() {},\n    startDrag() {},\n    startZoom() {},\n    updateEndValue() {},\n});\n","import { createContext } from \"react\";\n\nexport type InteractiveControlsState =\n    | { type: \"none\" }\n    | { type: \"drag\"; start: number; end?: number }\n    | { type: \"zoom\"; start: number; end?: number };\n\nexport const defaultControlsState: InteractiveControlsState = { type: \"none\" };\n\n/**\n * Holds the interactive control state as returned by the useInteractiveControlState\n */\nexport const InteractiveControlsStateContext =\n    createContext<InteractiveControlsState>(defaultControlsState);\n","import { createContext } from \"react\";\n\nimport type { SupportColors } from \"../colors\";\n\nexport type GraphTooltip = {\n    top: number;\n    left: number;\n    element: SVGSVGElement;\n    colorName: SupportColors;\n    metric: JSX.Element;\n};\n\nexport type TooltipApi = {\n    showTooltip: (tooltip: GraphTooltip) => void;\n    hideTooltip: () => void;\n};\n\nexport const TooltipContext = createContext<TooltipApi>({\n    showTooltip() {},\n    hideTooltip() {},\n});\n","import { useCallback, useRef } from \"react\";\n\nconst noDeps: Array<void> = [];\n\nexport function useHandler<Handler extends Function>(\n    handler: Handler,\n): Handler {\n    const handlerRef = useRef(handler);\n    handlerRef.current = handler;\n\n    // @ts-ignore\n    return useCallback((...args) => handlerRef.current(...args), noDeps);\n}\n","import { useMemo } from \"react\";\n\nimport type { CoreControls } from \"../context\";\nimport type { MetricsChartProps } from \"../MetricsChart/types\";\nimport { secondsToTimestamp, timestampToSeconds } from \"../utils\";\nimport { useHandler } from \"./useHandler\";\n\nconst MIN_DURATION = 60; // in seconds\n\n/**\n * Hook for creating convenient move/zoom functions\n */\nexport function useCoreControls({\n    timeRange,\n    onChangeTimeRange,\n}: MetricsChartProps): CoreControls {\n    /**\n     * Moves the time scale.\n     *\n     * @param deltaRatio The delta to move as a ratio of the current time scale\n     *                   window. -1 moves a full window to the left, and 1 moves\n     *                   a full window to the right.\n     */\n    const move = useHandler((deltaRatio: number) => {\n        const currentFrom = timestampToSeconds(timeRange.from);\n        const currentTo = timestampToSeconds(timeRange.to);\n        const delta = deltaRatio * (currentTo - currentFrom);\n        const from = secondsToTimestamp(currentFrom + delta);\n        const to = secondsToTimestamp(currentTo + delta);\n\n        onChangeTimeRange?.({ from, to });\n    });\n\n    /**\n     * Zooms into or out from the graph.\n     *\n     * @param factor The zoom factor. Anything below 1 makes the time scale\n     *               smaller (zooming in), and anything above 1 makes the time\n     *               scale larger (zooming out).\n     * @param focusRatio The horizontal point on which to focus the zoom,\n     *                   expressed as a ratio from 0 (left-hand side of the graph)\n     *                   to 1 (right-hand side of the graph).\n     */\n    const zoom = useHandler((factor: number, focusRatio = 0.5) => {\n        const currentFrom = timestampToSeconds(timeRange.from);\n        const currentTo = timestampToSeconds(timeRange.to);\n        const duration = currentTo - currentFrom;\n        const focusTimestamp = currentFrom + focusRatio * duration;\n        const newDuration = Math.max(duration * factor, MIN_DURATION);\n        const from = secondsToTimestamp(\n            focusTimestamp - newDuration * focusRatio,\n        );\n        const to = secondsToTimestamp(\n            focusTimestamp + newDuration * (1 - focusRatio),\n        );\n\n        onChangeTimeRange?.({ from, to });\n    });\n\n    return useMemo(() => ({ move, zoom }), [move, zoom]);\n}\n","import styled from \"styled-components\";\nimport { useRef, useState, useEffect } from \"react\";\n\nimport { Icon } from \"../BaseComponents\";\nimport { useHandler } from \"./useHandler\";\n\ntype Options = {\n    /**\n     * Default height (assumed to be in pixels).\n     */\n    defaultHeight: number;\n};\n\ntype Result<T> = {\n    /**\n     * Component you should include in your output to allow the user to toggle\n     * the expanded state, if relevant.\n     */\n    expandButton?: JSX.Element;\n\n    /**\n     * Component you may need to include in your output to display the gradient\n     * to indicate the collapsed state, if relevant.\n     */\n    gradient?: JSX.Element;\n\n    /**\n     * Whether the expandable container is currently expanded.\n     */\n    isExpanded: boolean;\n\n    /**\n     * Scroll event listener to attach to the container.\n     */\n    onScroll: (event: React.UIEvent<T, UIEvent>) => void;\n\n    /**\n     * Ref to attach to the container.\n     */\n    ref: React.RefCallback<T>;\n};\n\n/**\n * Implements all the logic needed to create an expandable container.\n */\nexport function useExpandable<T extends HTMLElement = HTMLDivElement>({\n    defaultHeight,\n}: Options): Result<T> {\n    const ref = useRef<T | null>(null);\n\n    const [showExpandButton, setShowExpandButton] = useState(false);\n    const [isExpanded, setIsExpanded] = useState(false);\n    const [showGradient, setShowGradient] = useState(false);\n\n    const update = useHandler((element: Element) => {\n        const { scrollTop, scrollHeight, clientHeight } = element;\n\n        if (scrollHeight <= defaultHeight) {\n            setShowExpandButton(false);\n            setShowGradient(false);\n        } else {\n            setShowExpandButton(true);\n            setShowGradient(scrollHeight - scrollTop >= clientHeight);\n        }\n    });\n\n    // This calls update function with a tiny delay. This fixes\n    // errors with the ResizeObserver loop taking too long\n    const asyncUpdate = useHandler((element: Element) => {\n        setTimeout(() => {\n            if (ref.current !== element) {\n                return;\n            }\n\n            update(element);\n        }, 0);\n    });\n\n    useEffect(() => {\n        return () => {\n            if (ref.current) {\n                unsubscribeFromNode(ref.current, asyncUpdate);\n                ref.current = null;\n            }\n        };\n    }, [asyncUpdate]);\n\n    const setRef = useHandler((node: T | null) => {\n        if (ref.current === node) {\n            return;\n        }\n\n        if (ref.current) {\n            unsubscribeFromNode(ref.current, asyncUpdate);\n        }\n\n        if (node) {\n            subscribeToNode(node, asyncUpdate);\n            update(node);\n        }\n\n        ref.current = node;\n    });\n\n    const onClickExpand = useHandler(() => {\n        setIsExpanded(!isExpanded);\n    });\n\n    const onScroll = useHandler((event: React.UIEvent<T, UIEvent>) => {\n        asyncUpdate(event.currentTarget);\n    });\n\n    return {\n        expandButton: showExpandButton ? (\n            <Expand onClick={onClickExpand} revert={isExpanded}>\n                <Icon type=\"triangle_down\" />\n            </Expand>\n        ) : undefined,\n        gradient: showGradient ? (\n            <GradientContainer>\n                <Gradient />\n            </GradientContainer>\n        ) : undefined,\n        isExpanded: isExpanded || !showExpandButton,\n        onScroll,\n        ref: setRef,\n    };\n}\n\ntype Listener = (node: Element) => void;\n\nconst listenerMap: WeakMap<Element, Set<Listener>> = new WeakMap();\n\nlet observer: ResizeObserver | undefined;\n\nfunction observerCallback(entries: ResizeObserverEntry[]) {\n    for (const entry of entries) {\n        const listeners = listenerMap.get(entry.target);\n        if (listeners) {\n            for (const listener of listeners) {\n                listener(entry.target);\n            }\n        }\n    }\n}\n\nfunction subscribeToNode(node: Element, listener: Listener) {\n    const listeners = listenerMap.get(node);\n    if (listeners) {\n        listeners.add(listener);\n    } else {\n        listenerMap.set(node, new Set([listener]));\n\n        if (!observer) {\n            observer = new ResizeObserver(observerCallback);\n        }\n\n        observer.observe(node);\n    }\n}\n\nfunction unsubscribeFromNode(node: Element, listener: Listener) {\n    const listeners = listenerMap.get(node);\n\n    if (listeners) {\n        listeners.delete(listener);\n\n        if (listeners.size === 0) {\n            listenerMap.delete(node);\n\n            observer?.unobserve(node);\n        }\n    }\n}\n\nconst Expand = styled.div<{ revert: boolean }>`\n  color: #4797ff;\n  width: 24px;\n  height: 24px;\n  border-radius: 6px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: ${({ revert }) => (revert ? \"rotate(180deg)\" : \"none\")};\n\n  &:hover {\n    cursor: pointer;\n    background: rgba(71, 151, 255, 30%);\n  }\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  height: 39px;\n  background-image: linear-gradient(\n    to bottom,\n    transparent,\n    rgb(255 255 255 / 75%) 50%\n  );\n  border-bottom-right-radius: 6px;\n  pointer-events: none;\n`;\n\n// The container is sticky, but zero height to prevent the gradient itself\n// from reserving any space.\nconst GradientContainer = styled.div`\n  bottom: 0;\n  height: 0;\n  position: sticky;\n  width: 100%;\n`;\n","import { useReducer } from \"react\";\n\nconst reducer = (counter: number): number => counter + 1;\n\nexport function useForceUpdate(): () => void {\n    const [, forceUpdate] = useReducer(reducer, 0);\n\n    return forceUpdate;\n}\n","import { useMemo, useReducer } from \"react\";\n\nimport {\n    defaultControlsState,\n    InteractiveControls,\n    InteractiveControlsState,\n} from \"../context\";\nimport { useHandler } from \"./useHandler\";\n\ntype ActionZoomStart = {\n    type: \"ZOOM_START\";\n    payload: {\n        start: number;\n    };\n};\n\ntype ActionUpdateEndValue = {\n    type: \"UPDATE_END_VALUE\";\n    payload: {\n        end: number;\n    };\n};\n\ntype ActionDragStart = {\n    type: \"DRAG_START\";\n    payload: {\n        start: number;\n    };\n};\n\ntype ActionReset = {\n    type: \"RESET\";\n};\n\ntype Actions =\n    | ActionZoomStart\n    | ActionUpdateEndValue\n    | ActionDragStart\n    | ActionReset;\n\nfunction controlsStateReducer(\n    state: InteractiveControlsState,\n    action: Actions,\n): InteractiveControlsState {\n    switch (action.type) {\n        case \"RESET\":\n            return defaultControlsState;\n\n        case \"DRAG_START\":\n            return {\n                type: \"drag\",\n                start: action.payload.start,\n            };\n\n        case \"ZOOM_START\":\n            return {\n                type: \"zoom\",\n                start: action.payload.start,\n            };\n\n        case \"UPDATE_END_VALUE\":\n            if (state.type === \"none\") {\n                return state;\n            }\n\n            return {\n                type: state.type,\n                start: state.start,\n                end: action.payload.end,\n            };\n\n        default:\n            return state;\n    }\n}\n\n/**\n * Returns zoom/drag handlers and state.\n */\nexport function useInteractiveControls(): {\n    interactiveControls: InteractiveControls;\n    interactiveControlsState: InteractiveControlsState;\n} {\n    const [interactiveControlsState, dispatch] = useReducer(\n        controlsStateReducer,\n        defaultControlsState,\n    );\n\n    const reset = useHandler(() => {\n        dispatch({ type: \"RESET\" });\n    });\n\n    const startZoom = useHandler((start: number) => {\n        dispatch({ type: \"ZOOM_START\", payload: { start } });\n    });\n\n    const startDrag = useHandler((start: number) => {\n        dispatch({ type: \"DRAG_START\", payload: { start } });\n    });\n\n    const updateEndValue = useHandler((end: number) => {\n        dispatch({ type: \"UPDATE_END_VALUE\", payload: { end } });\n    });\n\n    const interactiveControls = useMemo(\n        () => ({ reset, startDrag, startZoom, updateEndValue }),\n        [reset, startDrag, startZoom, updateEndValue],\n    );\n\n    return { interactiveControls, interactiveControlsState };\n}\n","import { useEffect, useState } from \"react\";\n\nconst noEntries: Array<IntersectionObserverEntry> = [];\n\nexport function useIntersectionObserver(\n    ref: React.RefObject<HTMLElement>,\n    options?: IntersectionObserverInit,\n) {\n    const [intersections, setIntersections] =\n        useState<Array<IntersectionObserverEntry>>(noEntries);\n\n    const element = ref.current;\n    useEffect(() => {\n        if (!element) {\n            return;\n        }\n\n        const observer = new IntersectionObserver(setIntersections, options);\n        observer.observe(element);\n        return () => {\n            observer.disconnect();\n            setIntersections(noEntries);\n        };\n    }, [element, options?.root, options?.rootMargin, options?.threshold]);\n\n    return intersections;\n}\n","import { useLayoutEffect, useMemo, useState } from \"react\";\n\ntype Dimensions = { width: number; height: number };\n\nconst defaultDimensions: Dimensions = {\n    width: 0,\n    height: 0,\n};\n\nexport function useMeasure<T extends HTMLElement>(): [\n    React.RefCallback<T>,\n    Dimensions,\n] {\n    const [element, setElement] = useState<T | null>(null);\n    const [rect, setRect] = useState(defaultDimensions);\n\n    const observer = useMemo(\n        () =>\n            new window.ResizeObserver((entries) => {\n                const entry = entries[0];\n                if (entry) {\n                    const { width, height } = entry.contentRect;\n                    setRect({ width, height });\n                }\n            }),\n        [],\n    );\n\n    useLayoutEffect(() => {\n        if (!element) {\n            return;\n        }\n\n        observer.observe(element);\n        return () => {\n            observer.disconnect();\n        };\n    }, [element]);\n\n    return [setElement, rect];\n}\n","import { localPoint } from \"@visx/event\";\nimport { MouseEvent, MouseEventHandler, Ref, useContext, useRef } from \"react\";\n\nimport {\n    ChartSizeContext,\n    CoreControlsContext,\n    InteractiveControlsContext,\n    InteractiveControlsStateContext,\n} from \"../context\";\nimport {\n    isMac,\n    preventDefault,\n    secondsToTimestamp,\n    timestampToSeconds,\n} from \"../utils\";\nimport { MARGINS } from \"../constants\";\nimport type { TimeRange } from \"../types\";\n\nfunction zoomKeyPressed(event: MouseEvent | WheelEvent) {\n    return isMac ? event.metaKey : event.ctrlKey;\n}\n\n/**\n * Hook for setting up mouse handlers to control dragging & zoom\n */\nexport function useMouseControls({\n    timeRange,\n    onChangeTimeRange,\n}: {\n    timeRange: TimeRange;\n    onChangeTimeRange?: (timeRange: TimeRange | null) => void;\n}): {\n    onMouseDown: MouseEventHandler<HTMLElement>;\n    onMouseMove: MouseEventHandler<HTMLElement>;\n    onMouseUp: MouseEventHandler<HTMLElement>;\n    onMouseEnter: MouseEventHandler<HTMLElement>;\n    graphContentRef: Ref<SVGGElement>;\n} {\n    const { move, zoom } = useContext(CoreControlsContext);\n    const { startDrag, startZoom, reset, updateEndValue } = useContext(\n        InteractiveControlsContext,\n    );\n    const controlsState = useContext(InteractiveControlsStateContext);\n    const { xMax, yMax } = useContext(ChartSizeContext);\n    const graphContentRef = useRef<SVGGElement | null>(null);\n\n    const onMouseDown = (event: MouseEvent<HTMLElement>) => {\n        if (event.buttons !== 1 || !onChangeTimeRange) {\n            return;\n        }\n\n        preventDefault(event);\n\n        if (!graphContentRef.current) {\n            return;\n        }\n\n        const point = localPoint(graphContentRef.current, event);\n        if (!point) {\n            return;\n        }\n\n        let { x, y } = point;\n        x -= MARGINS.left;\n        y -= MARGINS.top;\n\n        if (x >= 0 && x <= xMax && y >= 0 && y <= yMax) {\n            if (zoomKeyPressed(event)) {\n                startZoom(x);\n            } else if (event.shiftKey) {\n                startDrag(x);\n            }\n        }\n    };\n\n    const onMouseMove = (event: MouseEvent<HTMLElement>) => {\n        preventDefault(event);\n\n        if (controlsState.type === \"none\") {\n            return;\n        }\n\n        if (\n            (controlsState.type === \"drag\" && !event.shiftKey) ||\n            (controlsState.type === \"zoom\" && !zoomKeyPressed(event))\n        ) {\n            reset();\n            return;\n        }\n\n        if (!graphContentRef.current) {\n            return;\n        }\n\n        const point = localPoint(graphContentRef.current, event);\n        if (!point) {\n            return;\n        }\n\n        let { x, y } = point;\n        x -= MARGINS.left;\n        y -= MARGINS.top;\n\n        if (x >= 0 && x <= xMax && y >= 0 && y <= yMax) {\n            updateEndValue(x);\n        }\n    };\n\n    const onMouseUp = (event: MouseEvent) => {\n        if (event.button !== 0) {\n            return;\n        }\n\n        preventDefault(event);\n\n        if (controlsState.type === \"none\") {\n            return;\n        }\n\n        if (controlsState.type === \"zoom\") {\n            const { start, end } = controlsState;\n            if (end !== undefined && start !== end) {\n                const positionToSeconds = (x: number) =>\n                    timestampToSeconds(timeRange.from) +\n                    (x / xMax) *\n                        (timestampToSeconds(timeRange.to) -\n                            timestampToSeconds(timeRange.from));\n                const positionToTimestamp = (x: number) =>\n                    secondsToTimestamp(positionToSeconds(x));\n\n                const from = positionToTimestamp(Math.min(start, end));\n                const to = positionToTimestamp(Math.max(start, end));\n\n                onChangeTimeRange?.({ from, to });\n            }\n        } else if (controlsState.type === \"drag\") {\n            const { start, end } = controlsState;\n            if (end !== undefined && start !== end) {\n                move((start - end) / xMax);\n            }\n        }\n\n        reset();\n    };\n\n    const onWheel = (event: WheelEvent) => {\n        if (controlsState.type !== \"none\" || !zoomKeyPressed(event)) {\n            return;\n        }\n\n        startZoom(null);\n\n        const graphContent = graphContentRef.current;\n        if (!graphContent) {\n            return;\n        }\n\n        const rect = graphContent.getClientRects()[0];\n        const x = event.pageX - (rect?.left ?? 0);\n        if (x < 0 || x > xMax) {\n            return;\n        }\n\n        preventDefault(event);\n\n        const factor = event.deltaY < 0 ? 0.5 : 2;\n        const focusRatio = x / xMax;\n        zoom(factor, focusRatio);\n    };\n\n    const onMouseEnter = (event: MouseEvent<HTMLElement>) => {\n        const { currentTarget } = event;\n        currentTarget.addEventListener(\"wheel\", onWheel);\n        currentTarget.addEventListener(\"mouseleave\", () => {\n            currentTarget.removeEventListener(\"wheel\", onWheel);\n        });\n    };\n\n    return {\n        onMouseDown,\n        onMouseMove,\n        onMouseUp,\n        onMouseEnter,\n        graphContentRef,\n    };\n}\n","import { scaleUtc, scaleLinear, scaleBand } from \"@visx/scale\";\n\nimport { formatTimeseries } from \"../utils\";\nimport type { InteractiveControlsState } from \"../context\";\nimport type { Metric, StackingType, TimeRange, Timeseries } from \"../types\";\n\nconst getTime = (timestamp: string) => new Date(timestamp).getTime();\n\nexport const x = (metric: Metric) => getTime(metric.time);\nexport const y = (metric: Metric) => metric.value;\n\nexport function getTimeScale(timeRange: TimeRange, xMax: number) {\n    return scaleUtc<number>({\n        range: [0, xMax],\n        domain: [\n            new Date(timeRange.from).getTime(),\n            new Date(timeRange.to).getTime(),\n        ],\n    });\n}\n\nexport type TimeScale = ReturnType<typeof getTimeScale>;\n\n/**\n * In short: get two scales. This is used for bar charts (no `stackingType`),\n * where there's an `xScale` chart which contains the timeseries and a\n * `groupScale` for each of the metrics for each timestamp.\n */\nexport function getGroupedScales(\n    timeseriesData: Array<Timeseries>,\n    controlsState: InteractiveControlsState,\n    xMax: number,\n) {\n    const formattedVisibleTimeseries = timeseriesData\n        .filter((series) => series.visible)\n        .map((series) => formatTimeseries(series));\n\n    const timestampSet = new Set<string>();\n    for (const item of timeseriesData) {\n        for (const metric of item.metrics) {\n            timestampSet.add(metric.time);\n        }\n    }\n\n    const timestamps = [...timestampSet].map(getTime).sort((a, b) => a - b);\n\n    const delta =\n        controlsState.type === \"drag\" && typeof controlsState.end === \"number\"\n            ? controlsState.end - controlsState.start\n            : 0;\n\n    const xScale = scaleBand<number>({\n        range: [0 + delta, xMax + delta],\n        domain: timestamps,\n        padding: 0.2,\n    });\n\n    const groupScale = scaleBand<string>({\n        range: [0, xScale.bandwidth()],\n        domain: formattedVisibleTimeseries,\n        padding: 0.2,\n    });\n\n    return {\n        xScale,\n        groupScale,\n    };\n}\n\nexport type GroupedScales = ReturnType<typeof getGroupedScales>;\nexport type XScaleTypes = TimeScale | GroupedScales[\"xScale\"];\n\ntype MinMax = {\n    min: number;\n    max: number;\n};\n\nexport function getValueScale({\n    timeseriesData,\n    yMax,\n    stackingType = \"none\",\n}: {\n    timeseriesData: Array<Timeseries>;\n    yMax: number;\n    stackingType?: StackingType;\n}) {\n    const { min, max } = getMinMax(timeseriesData, stackingType);\n    const delta = max - min;\n\n    return scaleLinear({\n        range: [yMax, 0],\n        round: false,\n        nice: false,\n        domain: [\n            // only use min when stackingType is default, otherwise use 0\n            // stacked graphs can otherwise overlap the axis text\n            stackingType === \"none\" && min ? min : 0,\n            stackingType === \"percentage\" ? max : max + delta * 0.05,\n        ],\n    });\n}\n\nexport type ValueScale = ReturnType<typeof getValueScale>;\n\nfunction getMinMax(\n    timeseriesData: Array<Timeseries>,\n    stackingType: StackingType,\n): Readonly<MinMax> {\n    switch (stackingType) {\n        case \"none\":\n            return getMinMaxDefault(timeseriesData);\n        case \"percentage\":\n            return { min: 0, max: 100 };\n        case \"stacked\":\n            return getMinMaxStacked(timeseriesData);\n    }\n}\n\nfunction getMinMaxDefault(timeseriesData: Array<Timeseries>): Readonly<MinMax> {\n    const yValues = timeseriesData\n        .filter((result) => result.visible)\n        .flatMap((series) => series.metrics.map(y));\n    const min = yValues.length > 0 ? Math.min(...yValues) : 0;\n    const max = yValues.length > 0 ? Math.max(...yValues) : 0;\n\n    if (min === max) {\n        // If all values are the same, we need to add/subtract a small offset\n        // to/from min/max, otherwise the scale will be broken. But we should be\n        // also careful not to drop the minimum below 0 if that's not necessary,\n        // because it can give very odd results otherwise. The `-0.001` value makes\n        // sure that we see at least a line with \"0\" values, or you might not see\n        // whether there are any results at all.\n        return {\n            min: min < 0 || min >= 1 ? min - 1 : min - 0.001,\n            max: max + 1,\n        };\n    }\n\n    return {\n        min,\n        max,\n    };\n}\n\nfunction getMinMaxStacked(timeseriesData: Array<Timeseries>): Readonly<MinMax> {\n    const totals = new Map<number, number>();\n    for (const series of timeseriesData) {\n        if (!series.visible) {\n            continue;\n        }\n\n        for (const metric of series.metrics) {\n            const time = getTime(metric.time);\n            totals.set(time, (totals.get(time) ?? 0) + metric.value);\n        }\n    }\n\n    return {\n        min: Math.min(...totals.values()),\n        max: Math.max(...totals.values()),\n    };\n}\n","import { useContext, useMemo } from \"react\";\n\nimport {\n    ChartSizeContext,\n    InteractiveControlsState,\n    InteractiveControlsStateContext,\n} from \"../context\";\nimport {\n    getGroupedScales,\n    getTimeScale,\n    getValueScale,\n} from \"../MetricsChart/scales\";\nimport type { MetricsChartProps, XScaleProps } from \"../MetricsChart/types\";\nimport { secondsToTimestamp, timestampToSeconds } from \"../utils\";\nimport type { TimeRange } from \"../types\";\n\nexport function useScales({\n    graphType,\n    timeseriesData,\n    stackingType,\n    timeRange,\n}: MetricsChartProps) {\n    const { xMax, yMax } = useContext(ChartSizeContext);\n    const controlsState = useContext(InteractiveControlsStateContext);\n\n    const xScaleProps = useMemo((): XScaleProps => {\n        if (graphType === \"bar\" && stackingType === \"none\") {\n            return {\n                graphType,\n                stackingType,\n                ...getGroupedScales(timeseriesData, controlsState, xMax),\n            };\n        }\n\n        return {\n            graphType,\n            stackingType,\n            xScale: getTimeScale(\n                translateTimeRange(timeRange, controlsState, xMax),\n                xMax,\n            ),\n        } as XScaleProps;\n    }, [\n        timeRange,\n        xMax,\n        controlsState,\n        graphType,\n        timeseriesData,\n        stackingType,\n    ]);\n\n    const yScale = useMemo(\n        () => getValueScale({ timeseriesData, stackingType, yMax }),\n        [timeseriesData, stackingType, yMax],\n    );\n\n    return { xScaleProps, yScale };\n}\n\n/**\n * Translates a time-range based on the active zoom state.\n */\nfunction translateTimeRange(\n    timeRange: TimeRange,\n    controlsState: InteractiveControlsState,\n    xMax: number,\n): TimeRange {\n    if (controlsState.type === \"drag\") {\n        const { start, end } = controlsState;\n        if (end !== undefined && start !== end) {\n            const from = timestampToSeconds(timeRange.from);\n            const to = timestampToSeconds(timeRange.to);\n            const delta = ((start - end) / xMax) * (to - from);\n            return {\n                from: secondsToTimestamp(from + delta),\n                to: secondsToTimestamp(to + delta),\n            };\n        }\n    }\n\n    return timeRange;\n}\n","import { useRef, useState } from \"react\";\n\nimport type { CloseTooltipFn, ShowTooltipFn, VirtualElement } from \"../types\";\nimport type { GraphTooltip } from \"../context\";\nimport { useHandler } from \"./useHandler\";\n\nexport function useTooltip(showTooltip: ShowTooltipFn | undefined) {\n    const [graphTooltip, setGraphTooltip] = useState<GraphTooltip | null>(null);\n\n    const closeFnRef = useRef<CloseTooltipFn | null>(null);\n\n    return {\n        graphTooltip,\n\n        showTooltip: useHandler((tip: GraphTooltip) => {\n            if (!showTooltip) {\n                return;\n            }\n\n            setGraphTooltip(tip);\n\n            const element: VirtualElement = {\n                getBoundingClientRect: (): DOMRect => {\n                    const ctm = tip.element.getScreenCTM();\n                    const point = tip.element.createSVGPoint();\n                    point.x = tip.left;\n                    point.y = tip.top;\n\n                    const { x = tip.left, y = tip.top } =\n                        ctm === null ? {} : point.matrixTransform(ctm);\n\n                    return new DOMRect(x - 4, y - 4, 8, 8);\n                },\n                contextElement: tip.element,\n            };\n\n            closeFnRef.current = showTooltip(element, tip.metric);\n        }),\n\n        hideTooltip: useHandler(() => {\n            setGraphTooltip(null);\n            if (closeFnRef.current) {\n                closeFnRef.current();\n                closeFnRef.current = null;\n            }\n        }),\n    };\n}\n","import { debounce } from \"throttle-debounce\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { ChartSizeContext, ChartSizeContextValue } from \"../context\";\nimport { HEIGHT, MARGINS } from \"../constants\";\nimport { mergeRefs } from \"../utils\";\nimport { useIntersectionObserver, useMeasure } from \"../hooks\";\n\nconst yMax = HEIGHT - MARGINS.top - MARGINS.bottom;\n\ntype Props = {\n    children: React.ReactNode;\n    className?: string;\n};\n\nexport function ChartSizeContainerProvider({ children, className }: Props) {\n    const [measureRef, { width, height }] = useMeasure<HTMLDivElement>();\n    const intersectionRef = useRef<HTMLDivElement>(null);\n    const ref = mergeRefs([measureRef, intersectionRef]);\n\n    const intersections = useIntersectionObserver(intersectionRef, {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 0,\n    });\n    const [value, setValue] = useState<ChartSizeContextValue>(getValue(width));\n    const heightRef = useRef(height || 700);\n\n    const updateValue = useMemo(\n        () => debounce(100, (newWidth: number) => setValue(getValue(newWidth))),\n        [],\n    );\n\n    useEffect(() => {\n        updateValue(width);\n    }, [width, updateValue]);\n\n    if (height) {\n        heightRef.current = height;\n    }\n\n    return (\n        <div ref={ref} className={className}>\n            {intersections.some(\n                (intersection) => intersection.isIntersecting,\n            ) ? (\n                <ChartSizeContext.Provider value={value}>\n                    {children}\n                </ChartSizeContext.Provider>\n            ) : (\n                <ChartSkeleton height={heightRef.current} />\n            )}\n        </div>\n    );\n}\n\nfunction ChartSkeleton({ height }: { height: number }) {\n    return <div style={{ height }} />;\n}\n\nfunction getXMax(width: number) {\n    return width - MARGINS.left - MARGINS.right;\n}\n\nfunction getValue(width: number = 0): ChartSizeContextValue {\n    return {\n        width,\n        height: HEIGHT,\n        xMax: Math.max(0, getXMax(width)),\n        yMax,\n    };\n}\n","import { useMemo, useState } from \"react\";\n\nimport {\n    FocusedTimeseriesApiContext,\n    FocusedTimeseriesStateContext,\n} from \"../context\";\nimport type { Timeseries } from \"../types\";\n\nexport function FocusedTimeseriesContextProvider(props: {\n    children?: React.ReactNode;\n}) {\n    const { children } = props;\n\n    const [focusedTimeseries, setFocusedTimeseries] =\n        useState<Timeseries | null>(null);\n    const value = useMemo(() => ({ focusedTimeseries }), [focusedTimeseries]);\n\n    const apiValue = useMemo(\n        () => ({ setFocusedTimeseries }),\n        [setFocusedTimeseries],\n    );\n\n    return (\n        <FocusedTimeseriesApiContext.Provider value={apiValue}>\n            <FocusedTimeseriesStateContext.Provider value={value}>\n                {children}\n            </FocusedTimeseriesStateContext.Provider>\n        </FocusedTimeseriesApiContext.Provider>\n    );\n}\n","import type { DefaultTheme } from \"styled-components\";\n\nconst colors: Array<keyof DefaultTheme> = [\n    \"colorSupport1400\",\n    \"colorSupport2400\",\n    \"colorSupport3400\",\n    \"colorSupport4400\",\n    \"colorSupport5400\",\n    \"colorSupport6400\",\n    \"colorSupport7400\",\n    \"colorSupport8400\",\n    \"colorSupport9400\",\n    \"colorSupport10400\",\n    \"colorSupport11400\",\n];\n\nexport type SupportColors = keyof DefaultTheme;\n\nexport function getChartColor(i: number) {\n    return colors[i % colors.length];\n}\n","import styled, { css } from \"styled-components\";\nimport { useEffect } from \"react\";\n\nimport type { ChartLegendProps, Timeseries } from \"./types\";\nimport { Container, Icon } from \"../BaseComponents\";\nimport { FormattedTimeseries, isMac, noop, preventDefault } from \"../utils\";\nimport { useMeasure } from \"../hooks\";\n\ntype Props = {\n    color: string;\n    onHover: () => void;\n    onToggleTimeseriesVisibility: ChartLegendProps[\"onToggleTimeseriesVisibility\"];\n    readOnly: boolean;\n    setSize: (value: number) => void;\n    timeseries: Timeseries;\n    uniqueKeys: Array<string>;\n};\n\nexport function ChartLegendItem({\n    color,\n    onHover,\n    onToggleTimeseriesVisibility,\n    readOnly,\n    setSize,\n    timeseries,\n    uniqueKeys,\n}: Props): JSX.Element {\n    const [ref, { height }] = useMeasure<HTMLDivElement>();\n\n    useEffect(() => {\n        if (height) {\n            setSize(height);\n        }\n    }, [height, setSize]);\n\n    const toggleTimeseriesVisibility =\n        onToggleTimeseriesVisibility && !readOnly\n            ? (event: React.MouseEvent | React.KeyboardEvent) => {\n                  preventDefault(event);\n                  const toggleSingle = isMac ? event.metaKey : event.ctrlKey;\n                  onToggleTimeseriesVisibility({\n                      timeseries,\n                      toggleOthers: !toggleSingle,\n                  });\n              }\n            : noop;\n\n    const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Space\") {\n            toggleTimeseriesVisibility(event);\n        }\n    };\n\n    return (\n        <div\n            ref={ref}\n            onClick={toggleTimeseriesVisibility}\n            onKeyDown={onKeyDown}\n        >\n            <LegendItemContainer\n                onMouseOver={timeseries.visible ? onHover : noop}\n                readOnly={readOnly}\n            >\n                <ColorBlock color={color} selected={timeseries.visible}>\n                    {timeseries.visible && (\n                        <Icon type=\"check\" width=\"12\" height=\"12\" />\n                    )}\n                </ColorBlock>\n                <Text>\n                    <FormattedTimeseries\n                        metric={timeseries}\n                        sortLabels\n                        emphasizedKeys={uniqueKeys}\n                    />\n                </Text>\n            </LegendItemContainer>\n        </div>\n    );\n}\n\nconst ColorBlock = styled.div<{ color: string; selected: boolean }>`\n  background: ${({ color, selected }) => (selected ? color : \"transparent\")};\n  border: 2px solid ${({ color }) => color};\n  width: 14px;\n  height: 14px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: ${({ theme }) => theme.colorBackground};\n  border-radius: ${({ theme }) => theme.borderRadius400};\n`;\n\nconst InteractiveItemStyling = css`\n  cursor: pointer;\n\n  &:hover {\n    background: ${({ theme }) => theme.colorPrimaryAlpha100};\n  }\n`;\n\nconst LegendItemContainer = styled(Container)<{ readOnly: boolean }>`\n  border-radius: ${({ theme }) => theme.borderRadius500};\n  display: flex;\n  align-items: center;\n  font: ${({ theme }) => theme.fontAxisShortHand};\n  padding: 8px 8px 8px 14px;\n  gap: 10px;\n  word-wrap: anywhere;\n\n  ${({ readOnly }) => readOnly === false && InteractiveItemStyling}\n`;\n\nconst Text = styled.div`\n  flex: 1;\n`;\n","import { memo, useContext, useEffect, useMemo, useRef } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { VariableSizeList } from \"react-window\";\n\nimport type { ChartLegendProps } from \"./types\";\nimport { Container } from \"../BaseComponents\";\nimport { findUniqueKeys } from \"../utils\";\nimport { getChartColor } from \"../colors\";\nimport { ChartLegendItem } from \"./ChartLegendItem\";\nimport type { Timeseries } from \"../providerTypes\";\nimport { FocusedTimeseriesApiContext } from \"../context\";\nimport { useExpandable, useForceUpdate, useHandler } from \"../hooks\";\n\nconst DEFAULT_HEIGHT = 293;\nconst DEFAULT_SIZE = 50;\nconst EXPANDED_HEIGHT = 592;\n\nexport const Legend = memo(function Legend({\n    onToggleTimeseriesVisibility,\n    readOnly = false,\n    timeseriesData,\n}: ChartLegendProps) {\n    const { expandButton, gradient, isExpanded, onScroll, ref } =\n        useExpandable<HTMLDivElement>({ defaultHeight: DEFAULT_HEIGHT });\n\n    const { setFocusedTimeseries } = useContext(FocusedTimeseriesApiContext);\n\n    const maxHeight = isExpanded ? EXPANDED_HEIGHT : DEFAULT_HEIGHT;\n\n    const numSeries = timeseriesData.length;\n    const resultsText = `${numSeries} result${numSeries === 1 ? \"\" : \"s\"}`;\n\n    const uniqueKeys = useMemo(\n        () => findUniqueKeys(timeseriesData),\n        [timeseriesData],\n    );\n    const theme = useTheme();\n    const listRef = useRef<VariableSizeList<Array<Timeseries>>>(null);\n    const sizeMap = useRef(new Map<number, number>());\n    const heightRef = useRef(timeseriesData.length * DEFAULT_SIZE);\n    const update = useForceUpdate();\n\n    useEffect(() => {\n        sizeMap.current = new Map();\n        heightRef.current = timeseriesData.length * DEFAULT_SIZE;\n        update();\n    }, [timeseriesData, update]);\n\n    const getSize = (index: number) =>\n        sizeMap.current.get(index) ?? DEFAULT_SIZE;\n\n    const setSize = (index: number, size: number) => {\n        const oldSize = getSize(index);\n        sizeMap.current.set(index, size);\n        listRef.current?.resetAfterIndex(index);\n        heightRef.current += size - oldSize;\n\n        if (heightRef.current < maxHeight) {\n            update();\n        }\n    };\n\n    const onMouseOut = () => setFocusedTimeseries(null);\n\n    const render = useHandler(\n        ({\n            data,\n            index,\n            style,\n        }: {\n            data: Array<Timeseries>;\n            index: number;\n            style: React.CSSProperties;\n        }) => {\n            const timeseries = data[index];\n            return (\n                <div style={style}>\n                    {timeseries && (\n                        <ChartLegendItem\n                            color={theme[getChartColor(index)]}\n                            onHover={() => setFocusedTimeseries(timeseries)}\n                            onToggleTimeseriesVisibility={\n                                onToggleTimeseriesVisibility\n                            }\n                            readOnly={readOnly}\n                            timeseries={timeseries}\n                            uniqueKeys={uniqueKeys}\n                            setSize={(height) => setSize(index, height)}\n                        />\n                    )}\n                </div>\n            );\n        },\n    );\n\n    return (\n        <ChartLegendContainer onMouseOut={onMouseOut} ref={ref}>\n            <ExpandableContainer\n                maxHeight={`${maxHeight}px`}\n                onScroll={onScroll}\n            >\n                <VariableSizeList\n                    height={Math.min(heightRef.current, maxHeight)}\n                    width=\"100%\"\n                    ref={listRef}\n                    itemCount={timeseriesData.length}\n                    itemData={timeseriesData}\n                    itemSize={getSize}\n                >\n                    {render}\n                </VariableSizeList>\n                {gradient}\n            </ExpandableContainer>\n            <Footer>\n                <Results>{resultsText}</Results>\n                {expandButton}\n            </Footer>\n        </ChartLegendContainer>\n    );\n});\n\nconst ExpandableContainer = styled.div<{\n    maxHeight: Exclude<React.CSSProperties[\"height\"], undefined>;\n}>`\n  max-height: ${({ maxHeight }) => maxHeight};\n  overflow: auto;\n`;\n\nconst Footer = styled.div`\n  width: 100%;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst ChartLegendContainer = styled(Container)`\n  flex-direction: column;\n  font: ${({ theme }) => theme.fontLegendShortHand};\n  letter-spacing: ${({ theme }) => theme.fontLegendLetterSpacing};\n  letter-spacing: 0.02em;\n  padding: 10px 0 0;\n  position: relative;\n  word-wrap: break-word;\n`;\n\nconst Results = styled.span`\n  font: ${({ theme }) => theme.fontResultsSummaryShortHand};\n  letter-spacing: ${({ theme }) => theme.fontResultsSummaryLetterSpacing};\n  color: ${({ theme }) => theme.colorBase400};\n`;\n","import styled from \"styled-components\";\n\nexport const TimeseriesTableCaption = styled.caption`\n  font-weight: bold;\n  text-align: center;\n  padding: 0 0 6px;\n  color: ${({ theme }) => theme.colorBase400};\n`;\n\nexport const TimeseriesTableTd = styled.td`\n  word-wrap: anywhere;\n`;\n","import { AreaStack, Bar } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { memo, useContext, useMemo } from \"react\";\nimport { SeriesPoint } from \"@visx/shape/lib/types\";\nimport { Group } from \"@visx/group\";\nimport { useTheme } from \"styled-components\";\n\nimport {\n    ChartSizeContext,\n    FocusedTimeseriesStateContext,\n    TooltipContext,\n} from \"../../context\";\nimport {\n    DataItem,\n    dataToPercentages,\n    toDataItems,\n    ClosestPointArgs,\n    insideRange,\n    toClosestPointArgs,\n    getTimestamp,\n} from \"../../utils\";\nimport { formatTimeseries } from \"../../utils\";\nimport { getChartColor } from \"../../colors\";\nimport { MARGINS } from \"../../constants\";\nimport type { Metric, OtelMetadata, Timeseries } from \"../../types\";\nimport { TimeScale, ValueScale } from \"../scales\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"./TimeseriesTable\";\n\ntype Props = {\n    timeseriesData: Array<Timeseries>;\n    xScale: TimeScale;\n    yScale: ValueScale;\n    asPercentage?: boolean;\n};\n\nconst getY0 = (d: SeriesPoint<DataItem>) => d[0];\nconst getY1 = (d: SeriesPoint<DataItem>) => d[1];\n\nexport const Areas = memo(function Areas({\n    timeseriesData,\n    xScale,\n    yScale,\n    asPercentage = false,\n}: Props) {\n    const { xMax, yMax } = useContext(ChartSizeContext);\n    const { showTooltip, hideTooltip } = useContext(TooltipContext);\n    const theme = useTheme();\n    const dataItems = useMemo(() => {\n        const dataItems = toDataItems(timeseriesData);\n        return asPercentage ? dataToPercentages(dataItems) : dataItems;\n    }, [timeseriesData, asPercentage]);\n\n    const timeseriesArray = dataItems[0] ? [...dataItems[0].data.keys()] : [];\n    const keys = timeseriesArray.map((series) => formatTimeseries(series));\n\n    const handleTooltip = (event: React.MouseEvent<SVGRectElement>) => {\n        const args = toClosestPointArgs({ event, xScale, yScale });\n        const metric = closestMetric({ dataItems, ...args });\n\n        if (metric) {\n            const left = xScale(new Date(metric.time)) + MARGINS.left;\n            const top = yScale(metric.cumulativeValue) + MARGINS.top;\n            const seriesIndex = timeseriesData.indexOf(metric.timeseries);\n            const timeseries = timeseriesData[seriesIndex];\n\n            const svg = event.currentTarget.ownerSVGElement;\n            if (svg) {\n                showTooltip({\n                    colorName: getChartColor(seriesIndex),\n                    metric: formatTimeseriesTooltip(\n                        timeseries,\n                        metric,\n                        asPercentage,\n                    ),\n                    element: svg,\n                    left,\n                    top,\n                });\n            }\n        } else {\n            hideTooltip();\n        }\n    };\n\n    const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n    const focusedKey = focusedTimeseries && formatTimeseries(focusedTimeseries);\n    return (\n        <>\n            <AreaStack\n                keys={keys}\n                data={dataItems}\n                x={(d) => xScale(getTimestamp(d.data)) ?? 0}\n                value={(d: DataItem, key: string): number => {\n                    const index = keys.indexOf(key);\n                    const metric = timeseriesArray[index];\n                    return (metric && d.data.get(metric)) || 0;\n                }}\n                y0={(d) => yScale(getY0(d)) ?? 0}\n                y1={(d) => yScale(getY1(d)) ?? 0}\n            >\n                {({ stacks, path }) =>\n                    stacks\n                        .map((series, index) => {\n                            const realIndex = timeseriesData.findIndex(\n                                (item) => formatTimeseries(item) === series.key,\n                            );\n                            const timeseries = timeseriesData[realIndex];\n                            const color = theme[getChartColor(realIndex)];\n\n                            return (\n                                <Group\n                                    opacity={\n                                        focusedKey === null ||\n                                        focusedKey === series.key\n                                            ? 1\n                                            : 0.2\n                                    }\n                                    key={formatTimeseries(timeseries, {\n                                        sortLabels: false,\n                                    })}\n                                >\n                                    <LinearGradient\n                                        id={`line-${index}`}\n                                        from={color}\n                                        to={color}\n                                        fromOpacity={0.15}\n                                        toOpacity={0.03}\n                                        toOffset=\"80%\"\n                                    />\n                                    <path\n                                        key={`stack-${series.key}`}\n                                        id={series.key}\n                                        d={path(series) || \"\"}\n                                        stroke={color}\n                                        fill={`url(#line-${index})`}\n                                    />\n                                </Group>\n                            );\n                        })\n                        .reverse()\n                }\n            </AreaStack>\n            <Bar\n                width={xMax}\n                height={yMax}\n                fill=\"transparent\"\n                onMouseMove={handleTooltip}\n                onMouseLeave={hideTooltip}\n            />\n        </>\n    );\n});\n\ntype BareMetric = Omit<Metric, keyof OtelMetadata>;\n\ntype CandidateValue = {\n    cumulativeValue: number;\n    timeseries: Timeseries;\n};\n\nfunction closestMetric({\n    dataItems,\n    xRange,\n    yRange,\n}: {\n    dataItems: Array<DataItem>;\n} & ClosestPointArgs): (BareMetric & CandidateValue) | null {\n    let metric: ReturnType<typeof closestMetric> = null;\n    let minLen = Number.MAX_SAFE_INTEGER;\n\n    for (const item of dataItems) {\n        const x = getTimestamp(item);\n        if (!insideRange(x, xRange)) {\n            continue;\n        }\n\n        let y = 0;\n        const candidates: CandidateValue[] = [];\n        for (const [timeseries, value] of item.data.entries()) {\n            y += value;\n\n            if (insideRange(y, yRange)) {\n                candidates.push({ cumulativeValue: y, timeseries });\n            }\n        }\n\n        if (candidates.length > 0) {\n            const xLen = Math.pow(xRange.value - x, 2);\n\n            for (const { cumulativeValue, timeseries } of candidates) {\n                const yLen = Math.pow(yRange.value - cumulativeValue, 2);\n                const len = xLen + yLen;\n                const value = item.data.get(timeseries);\n                if (len < minLen && value !== undefined) {\n                    minLen = len;\n                    metric = {\n                        cumulativeValue,\n                        time: new Date(x).toISOString(),\n                        timeseries,\n                        value,\n                    };\n                }\n            }\n        }\n    }\n\n    return metric;\n}\n\nfunction formatTimeseriesTooltip(\n    timeseries: Timeseries,\n    metric: BareMetric & CandidateValue,\n    asPercentage = false,\n) {\n    const labelEntries = Object.entries(timeseries.labels);\n    return (\n        <table>\n            <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n            <thead>\n                <tr>\n                    <th>{timeseries.name || \"value\"}</th>\n                    <th>\n                        {asPercentage\n                            ? `${metric.value.toLocaleString(\"en-US\", {\n                                  maximumFractionDigits: 2,\n                                  minimumFractionDigits: 2,\n                                  useGrouping: false,\n                              })}%`\n                            : metric.value}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {labelEntries.map(([key, value]) => (\n                    <tr key={key}>\n                        <TimeseriesTableTd>{key}:</TimeseriesTableTd>\n                        <TimeseriesTableTd>{value}</TimeseriesTableTd>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n","// This is the space that's always there even if the padding is set to 0.\nconst FIXED_PADDING = 7;\n// Minimum width for a bar\nconst MIN_BAR_WIDTH = 3;\n\nexport function calculateBandwidth(width: number, steps: number): number {\n    return Math.max(\n        (width - FIXED_PADDING * (steps - 1)) / steps,\n        MIN_BAR_WIDTH,\n    );\n}\n","import { useContext } from \"react\";\n\nimport { calculateBandwidth } from \"./utils\";\nimport { ChartSizeContext, TooltipContext } from \"../../../context\";\nimport {\n    ClosestPointArgs,\n    DataItem,\n    getTimestamp,\n    insideRange,\n    toClosestPointArgs,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, OtelMetadata, Timeseries } from \"../../../types\";\nimport type { TimeScale, ValueScale } from \"../../scales\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\n\ntype Params = {\n    dataItems: Array<DataItem>;\n    timeseriesData: Array<Timeseries>;\n    xScale: TimeScale;\n    yScale: ValueScale;\n    asPercentage: boolean;\n};\n\ntype Handlers = {\n    onMouseMove: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n};\n\n/**\n * Hook managing tooltips/mouseevents for BarStacked component\n */\nexport function useTooltips(params: Params): Handlers {\n    const { dataItems, xScale, yScale, timeseriesData, asPercentage } = params;\n    const { xMax } = useContext(ChartSizeContext);\n\n    const { showTooltip, hideTooltip } = useContext(TooltipContext);\n\n    const onMouseMove = (event: React.MouseEvent<SVGRectElement>) => {\n        const args = toClosestPointArgs({ event, xScale, yScale, EPS: 40 });\n        const metric = closestMetric({ dataItems, ...args });\n\n        if (metric === null) {\n            hideTooltip();\n            return;\n        }\n\n        const svg = event.currentTarget.ownerSVGElement;\n        if (svg) {\n            const bandwidth = calculateBandwidth(xMax, dataItems.length);\n\n            const { cumulativeValue, time, timeseries } = metric;\n            const seriesIndex = timeseriesData.indexOf(timeseries);\n\n            showTooltip({\n                top: yScale(cumulativeValue) + MARGINS.top,\n                left: xScale(new Date(time)) + MARGINS.left + 0.5 * bandwidth,\n                colorName: getChartColor(seriesIndex),\n                element: svg,\n                metric: formatMetricTooltip(timeseries, metric, asPercentage),\n            });\n        }\n    };\n\n    return {\n        onMouseMove,\n        onMouseLeave: hideTooltip,\n    };\n}\n\ntype BareMetric = Omit<Metric, keyof OtelMetadata>;\n\ntype CandidateValue = {\n    cumulativeValue: number;\n    timeseries: Timeseries;\n};\n\nfunction closestMetric({\n    dataItems,\n    xRange,\n    yRange,\n}: {\n    dataItems: DataItem[];\n} & ClosestPointArgs): (BareMetric & CandidateValue) | null {\n    let metric: ReturnType<typeof closestMetric> = null;\n    let minLen = Number.MAX_SAFE_INTEGER;\n\n    for (const item of dataItems) {\n        const x = getTimestamp(item);\n        if (!insideRange(x, xRange)) {\n            continue;\n        }\n\n        let y = 0;\n        const candidates: CandidateValue[] = [];\n        for (const [metric, value] of item.data.entries()) {\n            y += value;\n\n            if (insideRange(y, yRange)) {\n                candidates.push({ timeseries: metric, cumulativeValue: y });\n            }\n        }\n\n        if (candidates.length > 0) {\n            const xLen = Math.pow(xRange.value - x, 2);\n\n            for (const { timeseries, cumulativeValue } of candidates) {\n                const value = item.data.get(timeseries);\n                const yLen = Math.pow(yRange.value - cumulativeValue, 2);\n\n                const len = xLen + yLen;\n\n                if (len < minLen && value !== undefined) {\n                    minLen = len;\n                    metric = {\n                        cumulativeValue,\n                        time: new Date(x).toISOString(),\n                        timeseries,\n                        value,\n                    };\n                }\n            }\n        }\n    }\n\n    return metric;\n}\n\nfunction formatMetricTooltip(\n    timeseries: Timeseries,\n    metric: BareMetric & CandidateValue,\n    asPercentage = false,\n) {\n    const labelEntries = Object.entries(timeseries.labels);\n    return (\n        <table>\n            <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n            <thead>\n                <tr>\n                    <th>{timeseries.name || \"value\"}</th>\n                    <th>\n                        {asPercentage\n                            ? `${metric.value.toLocaleString(\"en-US\", {\n                                  maximumFractionDigits: 2,\n                                  minimumFractionDigits: 2,\n                                  useGrouping: false,\n                              })}%`\n                            : metric.value}\n                    </th>\n                </tr>\n            </thead>\n            <tbody>\n                {labelEntries.map(([key, value]) => (\n                    <tr key={key}>\n                        <TimeseriesTableTd>{key}: </TimeseriesTableTd>\n                        <TimeseriesTableTd>{value}</TimeseriesTableTd>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n","import { Bar } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { memo, ReactNode, useContext, useMemo } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport { calculateBandwidth } from \"./utils\";\nimport {\n    ChartSizeContext,\n    FocusedTimeseriesStateContext,\n} from \"../../../context\";\nimport {\n    dataToPercentages,\n    dateKey,\n    getTimestamp,\n    toDataItems,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport type { TimeScale, ValueScale } from \"../../scales\";\nimport type { Timeseries } from \"../../../types\";\nimport { useTooltips } from \"./hooks\";\n\ntype Props = {\n    timeseriesData: Array<Timeseries>;\n    xScale: TimeScale;\n    yScale: ValueScale;\n    asPercentage?: boolean;\n};\n\nexport const BarsStacked = memo(function BarsStacked(props: Props) {\n    const { timeseriesData, xScale, yScale, asPercentage = false } = props;\n\n    const { xMax, yMax } = useContext(ChartSizeContext);\n    const theme = useTheme();\n\n    const dataItems = useMemo(() => {\n        const dataItems = toDataItems(timeseriesData);\n        return asPercentage ? dataToPercentages(dataItems) : dataItems;\n    }, [timeseriesData, asPercentage]);\n\n    const { onMouseMove, onMouseLeave } = useTooltips({\n        dataItems,\n        timeseriesData,\n        xScale,\n        yScale,\n        asPercentage,\n    });\n\n    const bandwidth = calculateBandwidth(xMax, dataItems.length);\n    const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n    return (\n        <>\n            {dataItems.map((item) => {\n                let offsetY = 0;\n                const timestamp = item[dateKey];\n                const x = xScale(getTimestamp(item)) ?? 0;\n\n                const bars: Array<ReactNode> = [];\n                for (const [timeseries, value] of item.data.entries()) {\n                    const realIndex = timeseriesData.indexOf(timeseries);\n\n                    const yValue = value;\n                    const originalY = yValue === undefined ? 0 : yScale(yValue);\n                    const height = yMax - originalY;\n                    const translatedY = originalY - offsetY;\n                    offsetY += height;\n\n                    const color = theme[getChartColor(realIndex)];\n\n                    bars.push(\n                        <LinearGradient\n                            id={`fill-${timestamp}-line-${realIndex}`}\n                            key={`fill-${timestamp}-line-${realIndex}-gradient`}\n                            from={color}\n                            to={color}\n                            fromOpacity={0.15}\n                            toOpacity={0.03}\n                        />,\n                        <Bar\n                            key={`stack-${timestamp}-${realIndex}`}\n                            id={`stack-${timestamp}-${realIndex}`}\n                            x={x}\n                            y={translatedY}\n                            height={height}\n                            width={bandwidth}\n                            stroke={color}\n                            fill={`url(#fill-${timestamp}-line-${realIndex})`}\n                            opacity={\n                                focusedTimeseries === null ||\n                                focusedTimeseries === timeseries\n                                    ? 1\n                                    : 0.2\n                            }\n                        />,\n                    );\n                }\n\n                return bars;\n            })}\n            <Bar\n                width={xMax}\n                height={yMax}\n                fill=\"transparent\"\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        </>\n    );\n});\n","import { ScaleBand } from \"d3-scale\";\nimport { DefaultTheme } from \"styled-components\";\n\nimport {\n    compact,\n    formatTimeseries,\n    getBoundary,\n    insideRange,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport type { GraphTooltip } from \"../../../context\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, Timeseries } from \"../../../types\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\nimport { ValueScale } from \"../../scales\";\n\n/**\n * Returns the relative value inside a band.\n *\n * Use case: get the X value as it is inside a specific band (useful when you\n * have scales inside scales)\n */\nexport function getValueInsideScale<T extends { toString(): string }>(\n    value: number,\n    scale: ScaleBand<T>,\n): number {\n    // Calculate the max width\n    const maxScale = scale.step() * scale.domain().length;\n\n    // clamp the value to this range\n    const clamped = clamp(\n        value - scale.paddingOuter() * scale.step(),\n        0,\n        maxScale,\n    );\n\n    // Get the value for inside the groupScale\n    return clamped % scale.step();\n}\n\nexport function clamp(min: number, value: number, max: number): number {\n    return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Convenient object to store information about a possible candidate\n */\nexport type Candidate = {\n    timeseriesIndex: number;\n    timeseries: Timeseries;\n    metric: Metric;\n};\n\ntype GetCandidatesArgs = {\n    x: number;\n    xScale: ScaleBand<string>;\n    y: number;\n    yScale: ValueScale;\n    timeseriesData: Array<Timeseries>;\n    activeTimestamp: string;\n};\n\nexport function getCandidate({\n    x,\n    xScale,\n    y,\n    yScale,\n    timeseriesData,\n    activeTimestamp,\n}: GetCandidatesArgs): Candidate | null {\n    const possibleTimeseries = timeseriesData.filter(\n        (series) => series.visible,\n    );\n\n    const yRange = getBoundary({\n        value: y,\n        EPS: 80,\n        scale: yScale,\n    });\n\n    const candidates: Array<Candidate> = compact(\n        possibleTimeseries.map((timeseries) => {\n            // Find the index for looking up the metric in the results\n            const timeseriesIndex = xScale\n                .domain()\n                .indexOf(formatTimeseries(timeseries));\n            const series = timeseriesData[timeseriesIndex];\n            const metric = series?.metrics.find(\n                (item) => item.time === activeTimestamp,\n            );\n\n            // Check if there's no metric or it's outside of the range.\n            if (!metric || !insideRange(metric.value, yRange)) {\n                return null;\n            }\n\n            return {\n                timeseries,\n                timeseriesIndex,\n                metric,\n            };\n        }),\n    );\n\n    let minLen = Number.MAX_SAFE_INTEGER;\n    let closest: Candidate | null = null;\n\n    for (const candidate of candidates) {\n        const candidateX = xScale(\n            formatTimeseries(candidate.timeseries),\n        )?.valueOf();\n        if (candidateX === undefined) {\n            continue;\n        }\n\n        const xLen = Math.pow(x - candidateX, 2);\n        const yLen = Math.pow(y - yScale(candidate.metric.value).valueOf(), 2);\n        const len = xLen + yLen;\n\n        if (len < minLen) {\n            minLen = len;\n            closest = candidate;\n        }\n    }\n\n    return closest;\n}\n\n/**\n * BandScales don't have an invert function\n *\n * This function re-implements the logic and takes paddingOuter/inner into\n * consideration so we can do more than just set a single padding value\n */\nexport function invert<T extends { toString(): string }>(\n    scale: ScaleBand<T>,\n    value: number,\n): T | undefined {\n    const [lower, upper] = scale.range();\n    const start = Math.min(lower, upper);\n    const end = Math.max(lower, upper);\n    const domain = scale.domain();\n\n    const paddingOuter = scale.paddingOuter();\n    const paddingInner = scale.paddingInner();\n\n    /**\n     * The range isn't divided into equal sections, padding outer offsets\n     * the pattern as well as the paddingInner is used n(items) - 1 times\n     */\n    const calculatedItems = domain.length + 2 * paddingOuter - paddingInner;\n    const itemWidth = (end - start) / calculatedItems;\n\n    const beginOffset = (0.5 * paddingInner - paddingOuter) * itemWidth;\n    const offsetX = value + beginOffset;\n    const closestIndex = Math.floor(offsetX / itemWidth);\n    return domain[clamp(0, closestIndex, domain.length - 1)];\n}\n\n/**\n * Retrieve a range of possible values in the domain\n */\nexport function invertRange<T extends { toString(): string }>(\n    scale: ScaleBand<T>,\n    range: { low: number; high: number },\n): Array<T> {\n    const lowValue = invert(scale, range.low);\n    const highValue = invert(scale, range.high);\n    if (lowValue === undefined || highValue === undefined) {\n        return [];\n    }\n\n    if (lowValue === highValue) {\n        return [lowValue];\n    }\n\n    const domain = scale.domain();\n    const lowIndex = domain.indexOf(lowValue);\n    const highIndex = domain.indexOf(highValue);\n\n    return domain.slice(lowIndex, highIndex);\n}\n\ntype GetTooltipArgs = {\n    candidate: Candidate;\n    groupScale: ScaleBand<string>;\n    xScale: ScaleBand<number>;\n    yScale: ValueScale;\n    element: SVGSVGElement;\n    theme: DefaultTheme;\n};\n\nexport function getTooltipData({\n    candidate,\n    groupScale,\n    xScale,\n    yScale,\n    element,\n}: GetTooltipArgs): GraphTooltip | null {\n    const { metric, timeseries, timeseriesIndex } = candidate;\n    const activeTimestamp = metric.time;\n    const bandwidth = groupScale.bandwidth();\n\n    // Calculate proper positions\n    const left =\n        (groupScale(formatTimeseries(timeseries)) ?? 0) +\n        (xScale(new Date(activeTimestamp).getTime())?.valueOf() ?? 0) +\n        MARGINS.left +\n        0.5 * bandwidth;\n    const top = yScale(metric.value).valueOf() + MARGINS.top;\n\n    const colorName = getChartColor(timeseriesIndex);\n    return {\n        top,\n        left,\n        colorName,\n        element,\n        metric: formatTimeseriesTooltip(timeseries, metric, activeTimestamp),\n    };\n}\n\nfunction formatTimeseriesTooltip(\n    timeseries: Timeseries,\n    metric: Metric,\n    activeTimestamp: string,\n) {\n    const labelEntries = Object.entries(timeseries.labels);\n    return (\n        <table>\n            <TimeseriesTableCaption>{activeTimestamp}</TimeseriesTableCaption>\n            <thead>\n                <tr>\n                    <th>{timeseries.name || \"value\"}</th>\n                    <th>{metric.value}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {labelEntries.map(([key, value]) => (\n                    <tr key={key}>\n                        <TimeseriesTableTd>{key}:</TimeseriesTableTd>{\" \"}\n                        <TimeseriesTableTd>{value}</TimeseriesTableTd>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n","import { localPoint } from \"@visx/event\";\nimport type { ScaleBand } from \"d3-scale\";\nimport { useContext } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport {\n    getCandidate,\n    getTooltipData,\n    getValueInsideScale,\n    invert,\n} from \"./utils\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Timeseries } from \"../../../types\";\nimport { TooltipContext } from \"../../../context\";\nimport { useHandler } from \"../../../hooks\";\nimport { ValueScale } from \"../../scales\";\n\ntype Params = {\n    groupScale: ScaleBand<string>;\n    timeseriesData: Array<Timeseries>;\n    xScale: ScaleBand<number>;\n    yScale: ValueScale;\n};\n\ntype Handlers = {\n    onMouseMove: React.MouseEventHandler;\n    onMouseLeave: React.MouseEventHandler;\n};\n\n/**\n * Hook managing tooltips/mouseevents for BarStacked component\n */\nexport function useTooltips(params: Params): Handlers {\n    const { groupScale, timeseriesData, xScale, yScale } = params;\n\n    const { showTooltip, hideTooltip } = useContext(TooltipContext);\n    const theme = useTheme();\n\n    const onMouseMove = useHandler(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            const { x: x0, y: y0 } = localPoint(event) || { x: 0, y: 0 };\n\n            const x = x0 - MARGINS.left;\n            const y = y0 - MARGINS.top;\n\n            // Find the relevant timestamp\n            const activeTimestamp = invert(xScale, x);\n            if (activeTimestamp === undefined) {\n                hideTooltip();\n                return;\n            }\n\n            // Convert x to value as it would be inside the step of the scale\n            // You can consider it to be x % xScale.step()\n            // but with some additional math due considering padding + clamp logic\n            // to avoid issues at the boundary of the graph\n            const xInTimescale = getValueInsideScale(x, xScale);\n\n            const candidate = getCandidate({\n                x: xInTimescale, // xInTimescale is now the \"x\"\n                xScale: groupScale, // Groupscale is now the main X scale\n                timeseriesData,\n                activeTimestamp: new Date(activeTimestamp).toISOString(),\n                y,\n                yScale,\n            });\n\n            if (!candidate) {\n                hideTooltip();\n                return;\n            }\n\n            const svg = event.currentTarget.ownerSVGElement;\n            const tooltipData =\n                svg &&\n                getTooltipData({\n                    candidate,\n                    xScale,\n                    yScale,\n                    element: svg,\n                    groupScale,\n                    theme,\n                });\n\n            if (!tooltipData) {\n                hideTooltip();\n                return;\n            }\n\n            showTooltip(tooltipData);\n        },\n    );\n\n    return {\n        onMouseMove,\n        onMouseLeave: hideTooltip,\n    };\n}\n","import { Bar } from \"@visx/shape\";\nimport { memo, useContext, useMemo } from \"react\";\nimport { Group } from \"@visx/group\";\nimport { useTheme } from \"styled-components\";\n\nimport {\n    ChartSizeContext,\n    FocusedTimeseriesStateContext,\n} from \"../../../context\";\nimport { dateKey, formatTimeseries, toDataItems } from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { GroupedScales, ValueScale } from \"../../scales\";\nimport type { Timeseries } from \"../../../types\";\nimport { useTooltips } from \"./hooks\";\n\ntype Props = {\n    timeseriesData: Array<Timeseries>;\n    yScale: ValueScale;\n} & GroupedScales;\n\nexport const DefaultBars = memo(function DefaultBars(\n    props: Props,\n): JSX.Element {\n    const { groupScale, timeseriesData, xScale, yScale } = props;\n    const { onMouseMove, onMouseLeave } = useTooltips({\n        groupScale,\n        timeseriesData,\n        xScale,\n        yScale,\n    });\n    const theme = useTheme();\n\n    const dataItems = useMemo(\n        () => toDataItems(timeseriesData),\n        [timeseriesData],\n    );\n    const { xMax, yMax } = useContext(ChartSizeContext);\n\n    const bandwidth = groupScale.bandwidth();\n    const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n    const seriesData = useMemo(() => {\n        return timeseriesData.map((timeseries, index) => {\n            const colorName = getChartColor(index);\n            return {\n                timeseries,\n                index,\n                x: groupScale(formatTimeseries(timeseries)),\n                colorName,\n            };\n        });\n    }, [timeseriesData, groupScale]);\n\n    return (\n        <>\n            {dataItems.map((dataItem, index) => (\n                <Group\n                    key={dataItem[dateKey]}\n                    transform={`translate(${xScale(\n                        new Date(dataItem[dateKey]).getTime(),\n                    )}, 0)`}\n                >\n                    {seriesData.map(\n                        ({ timeseries, x, colorName }, keyIndex) => {\n                            const value = dataItem.data.get(timeseries);\n                            if (value === undefined) {\n                                return null;\n                            }\n\n                            const color = theme[colorName];\n\n                            return (\n                                <Bar\n                                    key={formatTimeseries(timeseries, {\n                                        sortLabels: false,\n                                    })}\n                                    id={`stack-${index}-${keyIndex}`}\n                                    x={x}\n                                    y={yScale(value)}\n                                    height={yMax - yScale(value)}\n                                    width={bandwidth}\n                                    stroke={color}\n                                    fill={color}\n                                    fillOpacity={0.1}\n                                    opacity={\n                                        focusedTimeseries === null ||\n                                        focusedTimeseries === timeseries\n                                            ? 1\n                                            : 0.2\n                                    }\n                                />\n                            );\n                        },\n                    )}\n                </Group>\n            ))}\n            <Bar\n                width={xMax}\n                height={yMax}\n                fill=\"transparent\"\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n            />\n        </>\n    );\n});\n","import { AxisScale } from \"@visx/axis\";\nimport { Area } from \"@visx/shape\";\nimport { Threshold } from \"@visx/threshold\";\nimport { memo } from \"react\";\n\nimport type { Metric } from \"../../../types\";\nimport { x, y, ValueScale } from \"../../scales\";\n\ntype Props = {\n    id: string;\n    metrics: Metric[];\n    xScale: AxisScale<number>;\n    yScale: ValueScale;\n    yMax: number;\n    fillColor: string;\n    strokeColor: string;\n    highlight?: boolean;\n};\n\nexport const Series = memo(function Series({\n    metrics,\n    xScale,\n    yScale,\n    yMax,\n    strokeColor,\n    fillColor,\n    id,\n    highlight = false,\n}: Props) {\n    return (\n        <>\n            <Threshold<Metric>\n                id={id}\n                data={metrics}\n                x={(d) => xScale(x(d)) ?? 0}\n                y0={(d) => yScale(y(d)) ?? 0}\n                y1={yScale(0)}\n                clipAboveTo={0}\n                clipBelowTo={yMax}\n                aboveAreaProps={{ fill: fillColor }}\n                // Keep this one around to spot any incorrect threshold computations.\n                belowAreaProps={{ fill: \"violet\" }}\n            />\n            <Area\n                data={metrics}\n                x={(d) => xScale(x(d)) ?? 0}\n                y={(d) => yScale(y(d)) ?? 0}\n                stroke={strokeColor}\n                strokeWidth={highlight ? 1.5 : 1}\n                fill={fillColor}\n            />\n        </>\n    );\n});\n","import { LinearGradient } from \"@visx/gradient\";\nimport { memo } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport { getChartColor } from \"../../../colors\";\nimport type { Metric } from \"../../../types\";\nimport { Series } from \"./Series\";\nimport { TimeScale, ValueScale } from \"../../scales\";\n\ntype Props = {\n    index: number;\n    xScale: TimeScale;\n    yScale: ValueScale;\n    metrics: Array<Metric>;\n    yMax: number;\n    highlight?: boolean;\n};\n\nexport const Line = memo(function Line({\n    xScale,\n    yScale,\n    metrics,\n    index,\n    yMax,\n    highlight = false,\n}: Props): JSX.Element {\n    const theme = useTheme();\n    const color = theme[getChartColor(index)];\n\n    return (\n        <>\n            <LinearGradient\n                id={`line-${index}`}\n                from={color}\n                to={color}\n                fromOpacity={0.15}\n                toOpacity={0.03}\n                toOffset=\"23%\"\n            />\n            <Series\n                id={index.toString()}\n                metrics={metrics}\n                xScale={xScale}\n                yScale={yScale}\n                yMax={yMax}\n                // Do naive color selection for now.\n                // Later make colors fixed per time series.\n                strokeColor={color}\n                highlight={highlight}\n                fillColor={`url(#line-${index})`}\n            />\n        </>\n    );\n});\n","import { Bar } from \"@visx/shape\";\nimport { Group } from \"@visx/group\";\nimport { memo, useContext } from \"react\";\n\nimport {\n    ChartSizeContext,\n    FocusedTimeseriesStateContext,\n    TooltipContext,\n} from \"../../../context\";\nimport {\n    ClosestPointArgs,\n    formatTimeseries,\n    insideRange,\n    toClosestPointArgs,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { Line } from \"./Line\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, Timeseries } from \"../../../types\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\nimport type { ValueScale, TimeScale } from \"../../scales\";\nimport { useHandler } from \"../../../hooks\";\n\nexport const x = (metric: Metric) => new Date(metric.time).getTime();\nexport const y = (metric: Metric) => metric.value;\n\ntype Props = {\n    timeseriesData: Array<Timeseries>;\n    xScale: TimeScale;\n    yScale: ValueScale;\n};\n\nexport const Lines = memo(function Lines({\n    timeseriesData,\n    xScale,\n    yScale,\n}: Props) {\n    const { xMax, yMax } = useContext(ChartSizeContext);\n    const { showTooltip, hideTooltip } = useContext(TooltipContext);\n\n    const handleTooltip = useHandler(\n        (event: React.MouseEvent<SVGRectElement>) => {\n            const displayed = timeseriesData.filter((series) => series.visible);\n            const args = toClosestPointArgs({ event, xScale, yScale });\n            const [metric, seriesIndex] = closestMetric({\n                timeseriesData: displayed,\n                ...args,\n            });\n\n            if (metric !== null && seriesIndex !== null) {\n                const left = xScale(x(metric)) + MARGINS.left;\n                const top = yScale(y(metric)) + MARGINS.top;\n                const timeseries = displayed[seriesIndex];\n\n                // metric should not be undefined, but if it is we shouldn't continue\n                if (timeseries === undefined) {\n                    hideTooltip();\n                    return;\n                }\n\n                // Find the absoluteIndex so the tooltip color still matches\n                // if an element is hidden\n                const absoluteIndex = timeseriesData.indexOf(timeseries);\n\n                const svg = event.currentTarget.ownerSVGElement;\n                if (svg) {\n                    showTooltip({\n                        colorName: getChartColor(absoluteIndex),\n                        metric: formatTimeseriesTooltip(timeseries, metric),\n                        element: svg,\n                        left,\n                        top,\n                    });\n                }\n            } else {\n                hideTooltip();\n            }\n        },\n    );\n\n    const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n    return (\n        <>\n            {timeseriesData.map(\n                (timeseries, index) =>\n                    timeseries.visible && (\n                        <Group\n                            key={formatTimeseries(timeseries, {\n                                sortLabels: false,\n                            })}\n                            opacity={\n                                focusedTimeseries === null ||\n                                focusedTimeseries === timeseries\n                                    ? 1\n                                    : 0.2\n                            }\n                        >\n                            <Line\n                                index={index}\n                                xScale={xScale}\n                                yScale={yScale}\n                                metrics={timeseries.metrics}\n                                yMax={yMax}\n                                highlight={focusedTimeseries === timeseries}\n                            />\n                        </Group>\n                    ),\n            )}\n            <Bar\n                width={xMax}\n                height={yMax}\n                fill=\"transparent\"\n                onMouseMove={handleTooltip}\n                onMouseLeave={hideTooltip}\n            />\n        </>\n    );\n});\n\nfunction closestMetric({\n    timeseriesData,\n    xRange,\n    yRange,\n}: {\n    timeseriesData: Array<Timeseries>;\n} & ClosestPointArgs): [Metric | null, number | null] {\n    let metric: Metric | null = null;\n    let seriesIndex: number | null = null;\n    let minLen = Number.MAX_SAFE_INTEGER;\n\n    for (const [i, series] of timeseriesData.entries()) {\n        const candidates = series.metrics.filter(\n            (p) => insideRange(x(p), xRange) && insideRange(y(p), yRange),\n        );\n\n        // In order to get a length that is to scale calculate a factor\n        // based on the range of the x and y values.\n        // This is to offset the fact that the x and y ranges can be on very different scales.\n        const xFactor = xRange.high - xRange.low;\n        const yFactor = yRange.high - yRange.low;\n\n        for (const p of candidates) {\n            const xLen = Math.pow((x(p) - xRange.value) / xFactor, 2);\n            const yLen = Math.pow((y(p) - yRange.value) / yFactor, 2);\n            const len = xLen + yLen;\n            if (len < minLen) {\n                minLen = len;\n                seriesIndex = i;\n                metric = p;\n            }\n        }\n    }\n\n    return [metric, seriesIndex];\n}\n\nfunction formatTimeseriesTooltip(timeseries: Timeseries, metric: Metric) {\n    return (\n        <table>\n            <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n            <thead>\n                <tr>\n                    <th>{timeseries.name || \"value\"}</th>\n                    <th>{metric.value}</th>\n                </tr>\n            </thead>\n            <tbody>\n                {Object.entries(timeseries.labels).map(([key, value]) => (\n                    <tr key={key}>\n                        <TimeseriesTableTd>{key}:</TimeseriesTableTd>\n                        <TimeseriesTableTd>{value}</TimeseriesTableTd>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n}\n","import { Areas } from \"./Areas\";\nimport { BarsStacked } from \"./BarsStacked\";\nimport { DefaultBars } from \"./DefaultBars\";\nimport { Lines } from \"./Lines\";\nimport type { Timeseries } from \"../../types\";\nimport type { ValueScale } from \"../scales\";\nimport type { XScaleProps } from \"../types\";\n\ntype Props = {\n    timeseriesData: Array<Timeseries>;\n    xScaleProps: XScaleProps;\n    yScale: ValueScale;\n};\n\nexport function ChartContent({\n    timeseriesData,\n    xScaleProps,\n    yScale,\n}: Props): JSX.Element {\n    if (\n        xScaleProps.graphType === \"line\" &&\n        xScaleProps.stackingType === \"none\"\n    ) {\n        return (\n            <Lines\n                timeseriesData={timeseriesData}\n                xScale={xScaleProps.xScale}\n                yScale={yScale}\n            />\n        );\n    }\n\n    if (xScaleProps.graphType === \"line\") {\n        return (\n            <Areas\n                timeseriesData={timeseriesData}\n                xScale={xScaleProps.xScale}\n                yScale={yScale}\n                asPercentage={xScaleProps.stackingType === \"percentage\"}\n            />\n        );\n    }\n\n    if (xScaleProps.stackingType === \"none\") {\n        return (\n            <DefaultBars\n                groupScale={xScaleProps.groupScale}\n                timeseriesData={timeseriesData}\n                xScale={xScaleProps.xScale}\n                yScale={yScale}\n            />\n        );\n    }\n\n    return (\n        <BarsStacked\n            timeseriesData={timeseriesData}\n            xScale={xScaleProps.xScale}\n            yScale={yScale}\n            asPercentage={xScaleProps.stackingType === \"percentage\"}\n        />\n    );\n}\n","import { AxisBottom, TickFormatter } from \"@visx/axis\";\nimport { NumberValue } from \"d3-scale\";\nimport { memo } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport { XScaleTypes } from \"../scales\";\n\ntype Props = {\n    xMax: number;\n    yMax: number;\n    xScale: XScaleTypes;\n    xScaleFormatter?: TickFormatter<Date | NumberValue>;\n};\n\nfunction Bottom({ yMax, xScale, xScaleFormatter }: Props) {\n    const {\n        colorBase300,\n        colorBase500,\n        fontAxisFontSize,\n        fontAxisFontFamily,\n        fontAxisFontStyle,\n        fontAxisFontWeight,\n        fontAxisLetterSpacing,\n        fontAxisLineHeight,\n    } = useTheme();\n\n    const axisBottomTickLabelProps = {\n        textAnchor: \"middle\" as const,\n        fontFamily: fontAxisFontFamily,\n        fontStyle: fontAxisFontStyle,\n        fontWeight: fontAxisFontWeight,\n        fontSize: fontAxisFontSize,\n        letterSpacing: fontAxisLetterSpacing,\n        lineHeight: fontAxisLineHeight,\n        fill: colorBase500,\n    };\n\n    return (\n        <AxisBottom\n            top={yMax}\n            scale={xScale}\n            stroke={colorBase300}\n            hideTicks={true}\n            tickFormat={xScaleFormatter}\n            tickLabelProps={() => axisBottomTickLabelProps}\n        />\n    );\n}\n\nexport default memo(Bottom);\n","import { AxisLeft, TickFormatter, Orientation } from \"@visx/axis\";\nimport { GridRows, GridColumns } from \"@visx/grid\";\nimport { NumberValue } from \"d3-scale\";\nimport { animate, Tween, useMotionValue } from \"framer-motion\";\nimport { memo, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport Bottom from \"./Bottom\";\nimport { ValueScale, XScaleTypes } from \"../scales\";\n\ntype Props = {\n    xMax: number;\n    yMax: number;\n    xScale: XScaleTypes;\n    yScale: ValueScale;\n    xScaleFormatter?: TickFormatter<Date | NumberValue>;\n};\n\nexport const GridWithAxes = memo(function GridWithAxes({\n    xMax,\n    yMax,\n    xScale,\n    yScale,\n    xScaleFormatter,\n}: Props) {\n    const [targetLower = 0, targetUpper = 0] = yScale.domain();\n\n    const { colorBase300 } = useTheme();\n    const lower = useCustomSpring(targetLower);\n    const upper = useCustomSpring(targetUpper);\n\n    const temporaryScale = yScale.copy().domain([lower, upper]);\n    const ticks = temporaryScale.ticks();\n    const {\n        colorBase500,\n        fontAxisFontSize,\n        fontAxisFontFamily,\n        fontAxisFontStyle,\n        fontAxisFontWeight,\n        fontAxisLetterSpacing,\n        fontAxisLineHeight,\n    } = useTheme();\n\n    const axisLeftTickLabelProps = {\n        dx: \"-0.25em\",\n        dy: \"0.25em\",\n        textAnchor: \"end\" as const,\n        fontFamily: fontAxisFontFamily,\n        fontStyle: fontAxisFontStyle,\n        fontWeight: fontAxisFontWeight,\n        fontSize: fontAxisFontSize,\n        letterSpacing: fontAxisLetterSpacing,\n        lineHeight: fontAxisLineHeight,\n        fill: colorBase500,\n    };\n\n    return (\n        <>\n            <GridRows\n                scale={temporaryScale}\n                width={xMax}\n                height={yMax}\n                stroke={colorBase300}\n            />\n            <line\n                x1={xMax}\n                x2={xMax}\n                y1={0}\n                y2={yMax}\n                stroke={colorBase300}\n                strokeWidth={1}\n            />\n            <GridColumns\n                scale={xScale}\n                width={xMax}\n                height={yMax}\n                stroke={colorBase300}\n            />\n            <Bottom\n                xMax={xMax}\n                xScale={xScale}\n                yMax={yMax}\n                xScaleFormatter={xScaleFormatter}\n            />\n            <AxisLeft\n                scale={temporaryScale}\n                orientation={Orientation.left}\n                stroke={colorBase300}\n                hideTicks={true}\n                tickLabelProps={() => axisLeftTickLabelProps}\n                tickFormat={temporaryScale.tickFormat(10, \"~s\")}\n                tickValues={ticks.slice(1, -1)}\n            />\n        </>\n    );\n});\n\nconst spring: Tween = {\n    type: \"tween\",\n    duration: 1,\n    easings: [\"anticipate\"],\n};\n\nfunction useCustomSpring(value: number) {\n    const motionValue = useMotionValue(value);\n    const [current, setCurrent] = useState(value);\n\n    useLayoutEffect(() => {\n        return motionValue.onChange((value) => setCurrent(value));\n    }, [motionValue]);\n\n    useEffect(() => {\n        const controls = animate(motionValue, value, spring);\n        return controls.stop;\n    }, [motionValue, value]);\n\n    return current;\n}\n","import { Bar } from \"@visx/shape\";\nimport { useContext } from \"react\";\n\nimport { ChartSizeContext, InteractiveControlsStateContext } from \"../context\";\n\nexport function ZoomBar(): JSX.Element | null {\n    const { yMax } = useContext(ChartSizeContext);\n    const controlsState = useContext(InteractiveControlsStateContext);\n    if (controlsState.type !== \"zoom\") {\n        return null;\n    }\n\n    const { start, end } = controlsState;\n    if (end === undefined) {\n        return null;\n    }\n\n    const reverseZoom = end < start;\n\n    return (\n        <Bar\n            stroke=\"#4797ff\"\n            strokeWidth={1}\n            fill=\"#a3cbff\"\n            fillOpacity=\"10%\"\n            x={reverseZoom ? end : start}\n            y={0}\n            width={reverseZoom ? start - end : end - start}\n            height={yMax}\n        />\n    );\n}\n","import { Group } from \"@visx/group\";\nimport { Line } from \"@visx/shape\";\nimport styled, { useTheme } from \"styled-components\";\nimport { useContext, useMemo, useState } from \"react\";\n\nimport { ChartContent } from \"./ChartContent\";\nimport {\n    ChartSizeContext,\n    InteractiveControlsState,\n    InteractiveControlsStateContext,\n    TooltipContext,\n} from \"../context\";\nimport { Container } from \"../BaseComponents\";\nimport { getTimeFormatter } from \"../utils\";\nimport { GridWithAxes } from \"./GridWithAxes\";\nimport type { MetricsChartProps } from \"./types\";\nimport { MARGINS } from \"../constants\";\nimport { useMouseControls, useScales, useTooltip } from \"../hooks\";\nimport { ZoomBar } from \"./ZoomBar\";\n\nexport function MainChartContent(props: MetricsChartProps): JSX.Element {\n    const { width, height, xMax, yMax } = useContext(ChartSizeContext);\n    const interactiveControlsState = useContext(\n        InteractiveControlsStateContext,\n    );\n\n    const { xScaleProps, yScale } = useScales(props);\n\n    const {\n        onMouseDown,\n        onMouseUp,\n        onMouseEnter,\n        onMouseMove,\n        graphContentRef,\n    } = useMouseControls(props);\n\n    const [shiftKeyPressed, setShiftKeyPressed] = useState(false);\n\n    const onKeyHandler = (event: React.KeyboardEvent) => {\n        setShiftKeyPressed(event.shiftKey);\n    };\n\n    const onMouseMoveWithShiftDetection = (\n        event: React.MouseEvent<HTMLElement>,\n    ) => {\n        setShiftKeyPressed(event.shiftKey);\n        onMouseMove(event);\n    };\n\n    const { graphTooltip, showTooltip, hideTooltip } = useTooltip(\n        props.showTooltip,\n    );\n    const tooltipApiValue = useMemo(\n        () => ({ showTooltip, hideTooltip }),\n        [showTooltip, hideTooltip],\n    );\n    const theme = useTheme();\n\n    // Use a custom formatter when `xScale` is a `ScaleBand<number>`. We want to\n    // display the time, not the timestamp (number).\n    const xScaleFormatter =\n        xScaleProps.graphType === \"bar\" && xScaleProps.stackingType === \"none\"\n            ? getTimeFormatter(xScaleProps.xScale)\n            : undefined;\n\n    return (\n        <TooltipContext.Provider value={tooltipApiValue}>\n            <StyledContainer\n                onKeyDown={onKeyHandler}\n                onKeyUp={onKeyHandler}\n                onMouseDown={onMouseDown}\n                onMouseMove={onMouseMoveWithShiftDetection}\n                onMouseUp={onMouseUp}\n                onMouseEnter={onMouseEnter}\n            >\n                <svg\n                    width={width}\n                    height={height}\n                    style={{\n                        cursor: getCursorFromState(\n                            interactiveControlsState,\n                            shiftKeyPressed,\n                        ),\n                    }}\n                >\n                    <defs>\n                        <clipPath id=\"clip-chart\">\n                            <rect x={0} y={0} width={xMax} height={yMax} />\n                        </clipPath>\n                    </defs>\n                    <Group left={MARGINS.left} top={MARGINS.top}>\n                        <GridWithAxes\n                            xMax={xMax}\n                            yMax={yMax}\n                            xScale={xScaleProps.xScale}\n                            yScale={yScale}\n                            xScaleFormatter={xScaleFormatter}\n                        />\n                        <Group\n                            innerRef={graphContentRef}\n                            clipPath=\"url(#clip-chart)\"\n                        >\n                            <ChartContent\n                                timeseriesData={props.timeseriesData}\n                                xScaleProps={xScaleProps}\n                                yScale={yScale}\n                            />\n                        </Group>\n                        <ZoomBar />\n                    </Group>\n                    {graphTooltip && (\n                        <g>\n                            <Line\n                                from={{ x: graphTooltip.left, y: 0 }}\n                                to={{ x: graphTooltip.left, y: yMax }}\n                                stroke={theme[graphTooltip.colorName]}\n                                strokeWidth={1}\n                                pointerEvents=\"none\"\n                                strokeDasharray=\"1 1\"\n                            />\n                            <circle\n                                cx={graphTooltip.left}\n                                cy={graphTooltip.top}\n                                r={4}\n                                fill={theme[graphTooltip.colorName]}\n                                pointerEvents=\"none\"\n                            />\n                        </g>\n                    )}\n                </svg>\n            </StyledContainer>\n        </TooltipContext.Provider>\n    );\n}\n\nconst StyledContainer = styled(Container)`\n  margin-top: 2px;\n`;\n\nfunction getCursorFromState(\n    interactiveControlsState: InteractiveControlsState,\n    shiftKey: boolean,\n): string {\n    switch (interactiveControlsState.type) {\n        case \"none\":\n            return shiftKey ? \"grab\" : \"default\";\n        case \"drag\":\n            return interactiveControlsState.start === null\n                ? \"grab\"\n                : \"grabbing\";\n        case \"zoom\":\n            return \"zoom-in\";\n    }\n}\n","import { memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport { ChartControls } from \"./ChartControls\";\nimport { ChartSizeContainerProvider } from \"./ChartSizeContainerProvider\";\nimport {\n    CoreControlsContext,\n    InteractiveControlsContext,\n    InteractiveControlsStateContext,\n} from \"../context\";\nimport { FocusedTimeseriesContextProvider } from \"./FocusedTimeseriesContextProvider\";\nimport { Legend } from \"../ChartLegend\";\nimport { MainChartContent } from \"./MainChartContent\";\nimport type { MetricsChartProps } from \"./types\";\nimport { useCoreControls, useInteractiveControls } from \"../hooks\";\n\nexport function MetricsChart(props: MetricsChartProps) {\n    return props.readOnly ? (\n        <ReadOnlyMetricsChart {...props} />\n    ) : (\n        <InteractiveMetricsChart {...props} />\n    );\n}\n\nfunction InteractiveMetricsChart(props: MetricsChartProps) {\n    const coreControls = useCoreControls(props);\n    const { interactiveControls, interactiveControlsState } =\n        useInteractiveControls();\n\n    return (\n        <CoreControlsContext.Provider value={coreControls}>\n            <InteractiveControlsContext.Provider value={interactiveControls}>\n                <InteractiveControlsStateContext.Provider\n                    value={interactiveControlsState}\n                >\n                    <StyledChartSizeContainerProvider>\n                        <InnerMetricsChart {...props} />\n                    </StyledChartSizeContainerProvider>\n                </InteractiveControlsStateContext.Provider>\n            </InteractiveControlsContext.Provider>\n        </CoreControlsContext.Provider>\n    );\n}\n\nfunction ReadOnlyMetricsChart(props: MetricsChartProps) {\n    return (\n        <ChartSizeContainerProvider>\n            <InnerMetricsChart {...props} />\n        </ChartSizeContainerProvider>\n    );\n}\nconst InnerMetricsChart = memo(function InnerMetricsChart(\n    props: MetricsChartProps,\n) {\n    const hasMultipleTimeseries = props.timeseriesData.length > 1;\n\n    return (\n        <FocusedTimeseriesContextProvider>\n            {!props.readOnly && (\n                <ChartControls\n                    {...props}\n                    showStackingControls={hasMultipleTimeseries}\n                />\n            )}\n            <MainChartContent {...props} />\n            {hasMultipleTimeseries && <Legend {...props} />}\n        </FocusedTimeseriesContextProvider>\n    );\n});\n\nconst StyledChartSizeContainerProvider = styled(ChartSizeContainerProvider)`\n  display: flex;\n  gap: 12px;\n  flex-direction: column;\n`;\n"],"names":["ButtonGroup","styled","span","theme","colorBase200","borderRadius500","Box","div","Container","ControlsContainer","ControlsGroup","ControlsSet","ControlsSetLabel","fontControlsShortHand","fontControlsLetterSpacing","colorBase500","_path","_extends","ICON_MAP","chart_bar","ChartBarIcon","chart_line","ChartLineIcon","check","CheckIcon","combined","CombinedIcon","percentage","PercentageIcon","stacked","StackedIcon","triangle_down","TriangleDownIcon","Icon","type","svgProps","Component","_jsx","buttonStyling","css","colorPrimary500","effectFocusOutline","useIconButtonTheme","normal","color","colorBase800","backgroundColor","hover","colorBase300","active","colorBackground","colorBase600","focus","disabled","StyledButton","button","buttonSize","padding","width","height","iconSize","IconButton","forwardRef","props","ref","className","style","children","otherProps","useTheme","iconButtonTheme","newStyle","elementProps","HEIGHT","MARGINS","top","bottom","left","right","toClosestPointArgs","args","event","xScale","yScale","EPS","x","x0","y","y0","localPoint","xRange","getBoundary","value","scale","yRange","low","invert","valueOf","high","Math","min","max","insideRange","range","compact","items","filter","Boolean","dateKey","Symbol","getTimestamp","d","Date","getTime","dataToPercentages","dataItems","map","item","total","data","values","Map","key","set","toDataItems","timeseriesData","timestampSet","Set","annotatedFilteredDataIn","series","visible","metric","metrics","time","add","sort","timestamp","record","findUniqueKeys","constantKeys","detectedValues","timeseries","keys","Object","labels","undefined","delete","allKeys","has","sortBy","array","getPriorityFn","reverse","a","b","priorityA","priorityB","formatTimeseries","sortLabels","name","entries","k","v","join","Emphasis","FormattedTimeseries","memo","emphasizedKeys","labelEntries","_jsxs","_Fragment","index","Fragment","includes","mergeRefs","refs","current","noop","preventDefault","getFormatter","unit","utcFormat","getTimeFormatter","ticks","getTicks","length","toString","first","second","timeScale","getTimeScale","formatter","time1","time2","delta","secondsToTimestamp","seconds","toISOString","timestampToSeconds","os","navigator","platform","match","toLowerCase","isMac","ChartControls","graphType","onChangeGraphType","onChangeStackingType","showStackingControls","stackingType","aria-label","onClick","ChartSizeContext","createContext","xMax","yMax","CoreControlsContext","zoom","move","FocusedTimeseriesApiContext","setFocusedTimeseries","FocusedTimeseriesStateContext","focusedTimeseries","InteractiveControlsContext","reset","startDrag","startZoom","updateEndValue","defaultControlsState","InteractiveControlsStateContext","TooltipContext","showTooltip","hideTooltip","noDeps","useHandler","handler","handlerRef","useRef","useCallback","MIN_DURATION","useCoreControls","timeRange","onChangeTimeRange","deltaRatio","currentFrom","from","currentTo","to","factor","focusRatio","duration","focusTimestamp","newDuration","useMemo","useExpandable","defaultHeight","showExpandButton","setShowExpandButton","useState","isExpanded","setIsExpanded","showGradient","setShowGradient","update","element","scrollTop","scrollHeight","clientHeight","asyncUpdate","setTimeout","useEffect","unsubscribeFromNode","setRef","node","subscribeToNode","onClickExpand","onScroll","currentTarget","expandButton","Expand","revert","gradient","GradientContainer","Gradient","listenerMap","WeakMap","observer","observerCallback","entry","listeners","get","target","listener","ResizeObserver","observe","size","unobserve","reducer","counter","useForceUpdate","forceUpdate","useReducer","controlsStateReducer","state","action","start","payload","end","useInteractiveControls","interactiveControlsState","dispatch","interactiveControls","noEntries","useIntersectionObserver","options","intersections","setIntersections","IntersectionObserver","disconnect","root","rootMargin","threshold","defaultDimensions","useMeasure","setElement","rect","setRect","window","contentRect","useLayoutEffect","zoomKeyPressed","metaKey","ctrlKey","useMouseControls","useContext","controlsState","graphContentRef","onMouseDown","buttons","point","shiftKey","onMouseMove","onMouseUp","positionToSeconds","positionToTimestamp","onWheel","graphContent","getClientRects","pageX","deltaY","onMouseEnter","addEventListener","removeEventListener","scaleUtc","domain","getGroupedScales","formattedVisibleTimeseries","timestamps","scaleBand","groupScale","bandwidth","getValueScale","getMinMax","scaleLinear","round","nice","getMinMaxDefault","getMinMaxStacked","yValues","result","flatMap","totals","useScales","xScaleProps","translateTimeRange","useTooltip","graphTooltip","setGraphTooltip","closeFnRef","tip","getBoundingClientRect","ctm","getScreenCTM","createSVGPoint","matrixTransform","DOMRect","contextElement","ChartSizeContainerProvider","measureRef","intersectionRef","setValue","getValue","heightRef","updateValue","debounce","newWidth","some","intersection","isIntersecting","Provider","ChartSkeleton","getXMax","FocusedTimeseriesContextProvider","apiValue","colors","getChartColor","i","ChartLegendItem","onHover","onToggleTimeseriesVisibility","readOnly","setSize","uniqueKeys","toggleTimeseriesVisibility","toggleSingle","toggleOthers","onKeyDown","LegendItemContainer","onMouseOver","ColorBlock","selected","Text","borderRadius400","InteractiveItemStyling","colorPrimaryAlpha100","fontAxisShortHand","DEFAULT_HEIGHT","DEFAULT_SIZE","EXPANDED_HEIGHT","Legend","maxHeight","numSeries","resultsText","listRef","sizeMap","getSize","oldSize","resetAfterIndex","onMouseOut","render","ChartLegendContainer","ExpandableContainer","VariableSizeList","itemCount","itemData","itemSize","Footer","Results","fontLegendShortHand","fontLegendLetterSpacing","fontResultsSummaryShortHand","fontResultsSummaryLetterSpacing","colorBase400","TimeseriesTableCaption","caption","TimeseriesTableTd","td","getY0","getY1","Areas","asPercentage","timeseriesArray","handleTooltip","closestMetric","cumulativeValue","seriesIndex","indexOf","svg","ownerSVGElement","colorName","formatTimeseriesTooltip","focusedKey","AreaStack","y1","stacks","path","realIndex","findIndex","Group","opacity","LinearGradient","id","fromOpacity","toOpacity","toOffset","stroke","fill","Bar","onMouseLeave","minLen","Number","MAX_SAFE_INTEGER","candidates","push","xLen","pow","yLen","len","table","thead","tr","th","toLocaleString","maximumFractionDigits","minimumFractionDigits","useGrouping","tbody","FIXED_PADDING","MIN_BAR_WIDTH","calculateBandwidth","steps","useTooltips","params","formatMetricTooltip","BarsStacked","offsetY","bars","yValue","originalY","translatedY","getValueInsideScale","maxScale","step","clamped","clamp","paddingOuter","getCandidate","activeTimestamp","possibleTimeseries","timeseriesIndex","find","closest","candidate","candidateX","lower","upper","paddingInner","calculatedItems","itemWidth","beginOffset","offsetX","closestIndex","floor","getTooltipData","xInTimescale","tooltipData","DefaultBars","seriesData","dataItem","transform","keyIndex","fillOpacity","Series","strokeColor","fillColor","highlight","Threshold","clipAboveTo","clipBelowTo","aboveAreaProps","belowAreaProps","Area","strokeWidth","Line","Lines","displayed","absoluteIndex","p","xFactor","yFactor","ChartContent","Bottom","xScaleFormatter","fontAxisFontSize","fontAxisFontFamily","fontAxisFontStyle","fontAxisFontWeight","fontAxisLetterSpacing","fontAxisLineHeight","axisBottomTickLabelProps","textAnchor","fontFamily","fontStyle","fontWeight","fontSize","letterSpacing","lineHeight","AxisBottom","hideTicks","tickFormat","tickLabelProps","GridWithAxes","targetLower","targetUpper","useCustomSpring","temporaryScale","copy","axisLeftTickLabelProps","dx","dy","GridRows","line","x1","x2","y2","GridColumns","AxisLeft","orientation","Orientation","tickValues","slice","spring","easings","motionValue","useMotionValue","setCurrent","onChange","controls","animate","stop","ZoomBar","reverseZoom","MainChartContent","shiftKeyPressed","setShiftKeyPressed","onKeyHandler","onMouseMoveWithShiftDetection","tooltipApiValue","StyledContainer","onKeyUp","cursor","getCursorFromState","defs","clipPath","innerRef","g","pointerEvents","strokeDasharray","circle","cx","cy","r","MetricsChart","ReadOnlyMetricsChart","InteractiveMetricsChart","coreControls","StyledChartSizeContainerProvider","InnerMetricsChart","hasMultipleTimeseries"],"mappings":"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"}