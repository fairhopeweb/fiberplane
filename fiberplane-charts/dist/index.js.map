{"version":3,"file":"index.js","sources":["../src/BaseComponents/ButtonGroup.tsx","../src/BaseComponents/Containers.tsx","../src/BaseComponents/Controls.tsx","../src/BaseComponents/Icon/icons/ChartBar.svg","../src/BaseComponents/Icon/icons/ChartLine.svg","../src/BaseComponents/Icon/icons/Check.svg","../src/BaseComponents/Icon/icons/Combined.svg","../src/BaseComponents/Icon/icons/Percentage.svg","../src/BaseComponents/Icon/icons/Stacked.svg","../src/BaseComponents/Icon/icons/TriangleDown.svg","../src/BaseComponents/Icon/IconMap.ts","../src/BaseComponents/Icon/Icon.tsx","../src/BaseComponents/IconButton.tsx","../src/constants.ts","../src/utils/closestPoints.ts","../src/utils/compact.ts","../src/utils/convert.ts","../src/utils/findUniqueKeys.ts","../src/utils/sortBy.ts","../src/utils/formatTimeseries.tsx","../src/utils/mergeRefs.ts","../src/utils/noop.ts","../src/utils/preventDefault.ts","../src/utils/scaleFormatter.ts","../src/utils/timestamps.ts","../src/utils/useragent.ts","../src/MetricsChart/ChartControls.tsx","../src/context/ChartSizeContext.ts","../src/context/CoreControlsContext.ts","../src/context/FocusedTimeseriesApiContext.ts","../src/context/FocusedTimeseriesStateContext.ts","../src/context/InteractiveControlsContext.ts","../src/context/InteractiveControlsStateContext.ts","../src/context/TooltipApiContext.ts","../src/hooks/useHandler.ts","../src/hooks/useCoreControls.ts","../src/hooks/useExpandable.tsx","../src/hooks/useForceUpdate.ts","../src/hooks/useInteractiveControls.ts","../src/hooks/useIntersectionObserver.ts","../src/hooks/useMeasure.ts","../src/hooks/useMouseControls.ts","../src/MetricsChart/scales.ts","../src/hooks/useScales.ts","../src/hooks/useTooltip.ts","../src/ChartSizeContainerProvider/ChartSizeContainerProvider.tsx","../src/MetricsChart/FocusedTimeseriesContextProvider.tsx","../src/colors.ts","../src/ChartLegend/ChartLegendItem.tsx","../src/ChartLegend/ChartLegend.tsx","../src/CoreChart/ChartContent/TimeseriesTable.tsx","../src/CoreChart/ChartContent/Areas.tsx","../src/CoreChart/ChartContent/BarsStacked/utils.ts","../src/CoreChart/ChartContent/BarsStacked/hooks.tsx","../src/CoreChart/ChartContent/BarsStacked/BarsStacked.tsx","../src/CoreChart/ChartContent/DefaultBars/utils.tsx","../src/CoreChart/ChartContent/DefaultBars/hooks.ts","../src/CoreChart/ChartContent/DefaultBars/DefaultBars.tsx","../src/CoreChart/ChartContent/Lines/Series.tsx","../src/CoreChart/ChartContent/Lines/Line.tsx","../src/CoreChart/ChartContent/Lines/Lines.tsx","../src/CoreChart/ChartContent/ChartContent.tsx","../src/CoreChart/GridWithAxes/Bottom.tsx","../src/CoreChart/GridWithAxes/GridWithAxes.tsx","../src/CoreChart/ZoomBar.tsx","../src/CoreChart/CoreChart.tsx","../src/MetricsChart/MetricsChart.tsx","../src/SparkChart/SparkChart.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ButtonGroup = styled.span`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  padding: 4px 8px;\n  background: ${({ theme }) => theme.colorBase200};\n  border-radius: ${({ theme }) => theme.borderRadius500};\n`;\n","import styled from \"styled-components\";\n\nexport const Box = styled.div`\n  box-sizing: border-box;\n  margin: 0;\n  min-width: 0;\n`;\n\nexport const Container = styled(Box)`\n  display: flex;\n`;\n","import styled from \"styled-components\";\n\nexport const ControlsContainer = styled.div`\n  display: flex;\n  margin: 0 0 12px;\n  gap: 24px;\n`;\n\nexport const ControlsGroup = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const ControlsSet = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nexport const ControlsSetLabel = styled.span`\n  font: ${({ theme }) => theme.fontControlsShortHand};\n  letter-spacing: ${({ theme }) => theme.fontControlsLetterSpacing};\n  color: ${({ theme }) => theme.colorBase500};\n`;\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.8125 15.625H17.1875V3.125C17.1875 2.95924 17.1217 2.80027 17.0044 2.68306C16.8872 2.56585 16.7283 2.5 16.5625 2.5H12.1875C12.0217 2.5 11.8628 2.56585 11.7456 2.68306C11.6283 2.80027 11.5625 2.95924 11.5625 3.125V6.25H7.8125C7.64674 6.25 7.48777 6.31585 7.37056 6.43306C7.25335 6.55027 7.1875 6.70924 7.1875 6.875V10H3.4375C3.27174 10 3.11277 10.0658 2.99556 10.1831C2.87835 10.3003 2.8125 10.4592 2.8125 10.625V15.625H2.1875C2.02174 15.625 1.86277 15.6908 1.74556 15.8081C1.62835 15.9253 1.5625 16.0842 1.5625 16.25C1.5625 16.4158 1.62835 16.5747 1.74556 16.6919C1.86277 16.8092 2.02174 16.875 2.1875 16.875H17.8125C17.9783 16.875 18.1372 16.8092 18.2544 16.6919C18.3717 16.5747 18.4375 16.4158 18.4375 16.25C18.4375 16.0842 18.3717 15.9253 18.2544 15.8081C18.1372 15.6908 17.9783 15.625 17.8125 15.625ZM8.4375 7.5H11.5625V15.625H8.4375V7.5ZM4.0625 11.25H7.1875V15.625H4.0625V11.25Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.5 15.625H3.125V12.7812L7.53125 8.92969L12.125 12.375C12.24 12.4614 12.3813 12.5055 12.5251 12.4998C12.6688 12.4941 12.8062 12.439 12.9141 12.3438L17.9141 7.96875C17.9756 7.91437 18.0259 7.84841 18.0619 7.77461C18.098 7.70082 18.1192 7.62065 18.1242 7.53867C18.1293 7.45669 18.1182 7.37452 18.0915 7.29684C18.0648 7.21916 18.0231 7.14749 17.9688 7.08594C17.9144 7.02438 17.8484 6.97414 17.7746 6.93807C17.7008 6.90201 17.6206 6.88084 17.5387 6.87576C17.4567 6.87068 17.3745 6.8818 17.2968 6.90848C17.2192 6.93516 17.1475 6.97687 17.0859 7.03125L12.4688 11.0703L7.875 7.625C7.75997 7.5386 7.61866 7.49453 7.47491 7.50022C7.33116 7.50591 7.19377 7.56102 7.08594 7.65625L3.125 11.125V3.75C3.125 3.58424 3.05915 3.42527 2.94194 3.30806C2.82473 3.19085 2.66576 3.125 2.5 3.125C2.33424 3.125 2.17527 3.19085 2.05806 3.30806C1.94085 3.42527 1.875 3.58424 1.875 3.75V16.25C1.875 16.4158 1.94085 16.5747 2.05806 16.6919C2.17527 16.8092 2.33424 16.875 2.5 16.875H17.5C17.6658 16.875 17.8247 16.8092 17.9419 16.6919C18.0592 16.5747 18.125 16.4158 18.125 16.25C18.125 16.0842 18.0592 15.9253 17.9419 15.8081C17.8247 15.6908 17.6658 15.625 17.5 15.625Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.1251 15C7.95944 14.9977 7.80061 14.9336 7.67979 14.8203L3.30479 10.4453C3.20512 10.3239 3.15419 10.1697 3.1619 10.0128C3.1696 9.85587 3.2354 9.70744 3.34648 9.59636C3.45756 9.48527 3.606 9.41948 3.7629 9.41177C3.91981 9.40407 4.07398 9.455 4.19541 9.55466L8.1251 13.4922L16.4298 5.17966C16.5512 5.08 16.7054 5.02907 16.8623 5.03677C17.0192 5.04448 17.1676 5.11027 17.2787 5.22136C17.3898 5.33244 17.4556 5.48087 17.4633 5.63778C17.471 5.79469 17.4201 5.94885 17.3204 6.07029L8.57041 14.8203C8.44958 14.9336 8.29075 14.9977 8.1251 15Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.157 3.79383C12.0751 3.61284 11.8938 3.49752 11.6952 3.50004C11.4966 3.50256 11.3183 3.62243 11.2409 3.80543L8.43641 10.4442L7.29719 8.11376C7.21401 7.9436 7.04184 7.83505 6.85245 7.83336C6.66307 7.83167 6.48898 7.93713 6.40278 8.10577L1.97276 16.7724C1.89353 16.9274 1.90062 17.1125 1.99148 17.261C2.08234 17.4095 2.24389 17.5 2.41797 17.5H11.0846C11.0858 17.5 11.087 17.5 11.0882 17.5H17.5856C17.7555 17.5 17.9137 17.4138 18.0058 17.271C18.0979 17.1283 18.1112 16.9486 18.0411 16.7938L12.157 3.79383ZM11.3968 16.5H16.8105L11.7173 5.24746L9.01875 11.6354L11.3968 16.5ZM8.50275 12.8569L10.2837 16.5H6.96373L8.50275 12.8569ZM7.92042 11.6656L5.87815 16.5H3.23508L6.83801 9.45142L7.92042 11.6656Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.3536 4.64645C15.5488 4.84171 15.5488 5.15829 15.3536 5.35355L5.35355 15.3536C5.15829 15.5488 4.84171 15.5488 4.64645 15.3536C4.45118 15.1583 4.45118 14.8417 4.64645 14.6464L14.6464 4.64645C14.8417 4.45118 15.1583 4.45118 15.3536 4.64645ZM6.5 5.5C5.94772 5.5 5.5 5.94772 5.5 6.5C5.5 7.05228 5.94772 7.5 6.5 7.5C7.05228 7.5 7.5 7.05228 7.5 6.5C7.5 5.94772 7.05228 5.5 6.5 5.5ZM4.5 6.5C4.5 5.39543 5.39543 4.5 6.5 4.5C7.60457 4.5 8.5 5.39543 8.5 6.5C8.5 7.60457 7.60457 8.5 6.5 8.5C5.39543 8.5 4.5 7.60457 4.5 6.5ZM12.5 13.5C12.5 12.9477 12.9477 12.5 13.5 12.5C14.0523 12.5 14.5 12.9477 14.5 13.5C14.5 14.0523 14.0523 14.5 13.5 14.5C12.9477 14.5 12.5 14.0523 12.5 13.5ZM13.5 11.5C12.3954 11.5 11.5 12.3954 11.5 13.5C11.5 14.6046 12.3954 15.5 13.5 15.5C14.6046 15.5 15.5 14.6046 15.5 13.5C15.5 12.3954 14.6046 11.5 13.5 11.5Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6875 3.125C11.6875 2.84886 11.9114 2.625 12.1875 2.625H16.5625C16.8386 2.625 17.0625 2.84886 17.0625 3.125V16.25C17.0625 16.5261 16.8386 16.75 16.5625 16.75H14.4464C14.4458 16.75 14.4451 16.75 14.4444 16.75H7.88346C7.86028 16.7533 7.83659 16.755 7.8125 16.755C7.78841 16.755 7.76472 16.7533 7.74154 16.75H3.4375C3.16136 16.75 2.9375 16.5261 2.9375 16.25V12.4372V11.4997V6.81216C2.9375 6.53602 3.16136 6.31216 3.4375 6.31216H7.3125V5.875C7.3125 5.59886 7.53636 5.375 7.8125 5.375H11.6875V3.125ZM7.3125 7.31216H3.9375V10.9997H7.3125V7.31216ZM7.3125 11.9997H3.9375V12.4372V15.75H7.3125V11.9997ZM8.3125 15.75V11.4997V6.81216V6.375H11.6875V15.75H8.3125ZM12.6875 15.75V5.875V3.625H16.0625V15.75H12.6875Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.1425 13L13.4871 7H6.79785L10.1425 13Z\" fill=\"currentColor\"/>\n</svg>\n","import ChartBarIcon from \"./icons/ChartBar.svg\";\nimport ChartLineIcon from \"./icons/ChartLine.svg\";\nimport CheckIcon from \"./icons/Check.svg\";\nimport CombinedIcon from \"./icons/Combined.svg\";\nimport PercentageIcon from \"./icons/Percentage.svg\";\nimport StackedIcon from \"./icons/Stacked.svg\";\nimport TriangleDownIcon from \"./icons/TriangleDown.svg\";\n\nexport const ICON_MAP = {\n  chart_bar: ChartBarIcon,\n  chart_line: ChartLineIcon,\n  check: CheckIcon,\n  combined: CombinedIcon,\n  percentage: PercentageIcon,\n  stacked: StackedIcon,\n  triangle_down: TriangleDownIcon,\n} as const;\n","import { ICON_MAP } from \"./IconMap\";\n\ntype IconType = keyof typeof ICON_MAP;\n\ntype Props = React.SVGProps<SVGSVGElement> & {\n  type: IconType;\n};\n\nexport function Icon({ type, ...svgProps }: Props): JSX.Element {\n  const Component = ICON_MAP[type];\n  return <Component {...svgProps} />;\n}\n","import { forwardRef } from \"react\";\nimport styled, { css, DefaultTheme, useTheme } from \"styled-components\";\n\nexport const buttonStyling = css`\n    --color: var(--button-normal-color);\n    --backgroundColor: var(--button-normal-backgroundColor);\n  \n    outline: none;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    transition-property: background-color, border-color;\n    transition-duration: 0.2s;\n    transition-timing-function: linear;\n    border-radius: ${({ theme }) => theme.borderRadius500};\n    box-sizing: border-box;\n    height: var(--icon-button-height, 20px);\n    width: var(--icon-button-width, 20px);\n    padding: var(--icon-button-padding, 2px);\n    color: var(--color);\n    background-color: var(--background);\n    border: 1px solid var(--background);\n  \n    :focus,\n    :hover,\n    :active,\n    .active {\n      cursor: pointer;\n    }\n  \n    :focus {\n      border-color: ${({ theme }) => theme.colorPrimary500};\n      outline: ${({ theme }) => theme.effectFocusOutline};\n  \n      --background: var(--button-focus-backgroundColor);\n      --color: var(--button-focus-color);\n    }\n  \n    &:disabled {\n      cursor: default;\n  \n      --color: var(--button-disabled-color);\n      --background: var(--button-disabled-backgroundColor);\n    }\n  \n    &.active,\n    &:active:not([data-dragging], [disabled]) {\n      --background: var(--button-active-backgroundColor);\n      --color: var(--button-active-color);\n    }\n  \n    :hover:not([data-disabled][data-dragging], [disabled]) {\n      --background: var(--button-hover-backgroundColor);\n      --color: var(--button-hover-color);\n      border: none;\n    }\n  \n    & svg {\n      flex: 0 0 var(--icon-button-icon-size);\n      width: var(--icon-button-icon-size);\n      height: var(--icon-button-icon-size);\n    }\n  `;\n\ntype IconButtonColorSet = {\n  color: string;\n  backgroundColor: string;\n};\n\ntype IconButtonTheme = {\n  normal: IconButtonColorSet;\n  hover: IconButtonColorSet;\n  active: IconButtonColorSet;\n  focus: IconButtonColorSet;\n  disabled: IconButtonColorSet;\n};\n\nfunction useIconButtonTheme(theme: DefaultTheme): IconButtonTheme {\n  return {\n    normal: {\n      color: theme.colorBase800,\n      backgroundColor: \"transparent\",\n    },\n    hover: {\n      color: theme.colorBase800,\n      backgroundColor: theme.colorBase300,\n    },\n    active: {\n      color: theme.colorBackground,\n      backgroundColor: theme.colorBase600,\n    },\n    focus: {\n      color: theme.colorBase600,\n      backgroundColor: theme.colorBackground,\n    },\n    disabled: {\n      color: theme.colorBase500,\n      backgroundColor: \"transparent\",\n    },\n  };\n}\n\nconst StyledButton = styled.button`\n  ${buttonStyling}\n`;\n\nconst buttonSize = {\n  padding: \"6px\",\n  width: \"32px\",\n  height: \"32px\",\n  iconSize: \"20px\",\n};\n\nexport type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  active?: boolean;\n};\n\nexport const IconButton = forwardRef(function IconButton(\n  props: Props,\n  ref: React.ForwardedRef<HTMLButtonElement>,\n): JSX.Element {\n  const {\n    className = \"\",\n    style = {},\n    active = false,\n    children,\n    ...otherProps\n  } = props;\n\n  const theme = useTheme();\n  const iconButtonTheme = useIconButtonTheme(theme);\n\n  const newStyle = {\n    ...style,\n    \"--icon-button-padding\": buttonSize.padding,\n    \"--icon-button-width\": buttonSize.width,\n    \"--icon-button-height\": buttonSize.height,\n    \"--icon-button-icon-size\": buttonSize.iconSize,\n\n    \"--button-normal-color\": iconButtonTheme.normal.color,\n    \"--button-normal-backgroundColor\": iconButtonTheme.normal.backgroundColor,\n    \"--button-hover-color\": iconButtonTheme.hover.color,\n    \"--button-hover-backgroundColor\": iconButtonTheme.hover.backgroundColor,\n    \"--button-active-color\": iconButtonTheme.active.color,\n    \"--button-active-backgroundColor\": iconButtonTheme.active.backgroundColor,\n    \"--button-focus-color\": iconButtonTheme.focus.color,\n    \"--button-focus-backgroundColor\": iconButtonTheme.focus.backgroundColor,\n    \"--button-disabled-color\": iconButtonTheme.disabled.color,\n    \"--button-disabled-backgroundColor\":\n      iconButtonTheme.disabled.backgroundColor,\n  };\n\n  const elementProps = {\n    ...otherProps,\n    ref,\n    style: newStyle,\n    className: active ? `${className} active` : className,\n    \"aria-pressed\": active,\n  };\n\n  return <StyledButton {...elementProps}>{children}</StyledButton>;\n});\n","// Dimensions.\nexport const HEIGHT = 275;\nexport const MARGINS = { top: 0, bottom: 20, left: 38, right: 0 };\n","import { localPoint } from \"@visx/event\";\n\nimport { MARGINS } from \"../constants\";\nimport type { TimeScale, ValueScale } from \"../MetricsChart/scales\";\n\nexport function toClosestPointArgs(args: {\n  event: React.MouseEvent<SVGElement>;\n  xScale: TimeScale;\n  yScale: ValueScale;\n  /**\n   * Determine square boundaries within which to search for the closest point.\n   *\n   * The square side is 2 * EPS pixels.\n   *\n   * By default the value of 20 is used\n   */\n  EPS?: number;\n}) {\n  const { event, xScale, yScale, EPS = 20 } = args;\n  const { x: x0, y: y0 } = localPoint(event) || {\n    x: 0,\n    y: 0,\n  };\n\n  const xRange = getBoundary({\n    value: x0 - MARGINS.left,\n    // Decrease the EPS value slightly\n    EPS,\n    scale: xScale,\n  });\n\n  const yRange = getBoundary({\n    value: y0 - MARGINS.top,\n    EPS,\n    scale: yScale,\n  });\n\n  return {\n    xRange,\n    yRange,\n  };\n}\n\nexport type Boundary = {\n  value: number;\n  high: number;\n  low: number;\n};\n\ntype GetBoundaryArgs = {\n  value: number;\n  EPS: number;\n  scale: TimeScale | ValueScale;\n};\n\nexport function getBoundary({ value, EPS, scale }: GetBoundaryArgs): Boundary {\n  const low = scale.invert(value - EPS).valueOf();\n  const high = scale.invert(value + EPS).valueOf();\n\n  return {\n    value: scale.invert(value).valueOf(),\n    low: Math.min(low, high),\n    high: Math.max(low, high),\n  };\n}\n\nexport type ClosestPointArgs = {\n  xRange: Boundary;\n  yRange: Boundary;\n};\n\nexport function insideRange(value: number, range: Boundary): boolean {\n  return range.low < value && value < range.high;\n}\n","/**\n * Strips all falsy values from an array.\n */\nexport function compact<T>(\n  items: Array<T | false | undefined | null | 0 | \"\">,\n): Array<T> {\n  return items.filter(Boolean) as Array<T>;\n}\n","import { compact } from \"./compact\";\nimport type { Timeseries } from \"../providerTypes\";\n\nexport const dateKey: unique symbol = Symbol(\"date\");\n\nexport type DataItem = { [dateKey]: string; data: Map<Timeseries, number> };\n\ntype TimestampRecord = Record<string, number>;\n\nexport function getTimestamp(d: DataItem): number {\n  return new Date(d[dateKey]).getTime();\n}\n\nexport function dataToPercentages(dataItems: Array<DataItem>): Array<DataItem> {\n  return dataItems.map((item): DataItem => {\n    let total = 0;\n    for (const value of item.data.values()) {\n      total += value;\n    }\n\n    if (total === 0) {\n      return item;\n    }\n\n    const data: Map<Timeseries, number> = new Map();\n    for (const [key, value] of item.data) {\n      data.set(key, (value / total) * 100);\n    }\n\n    return {\n      [dateKey]: item[dateKey],\n      data,\n    };\n  });\n}\n\nexport function toDataItems(\n  timeseriesData: ReadonlyArray<Timeseries>,\n): Array<DataItem> {\n  const timestampSet = new Set<string>();\n  const annotatedFilteredDataIn = compact(\n    timeseriesData.map((series): null | [Timeseries, TimestampRecord] => {\n      if (!series.visible) {\n        return null;\n      }\n\n      // Make it easy to look up points by timestamp when assembling result:\n      const data: TimestampRecord = {};\n      for (const metric of series.metrics) {\n        data[metric.time] = metric.value;\n        timestampSet.add(metric.time);\n      }\n\n      return [series, data];\n    }),\n  );\n\n  return [...timestampSet].sort().map((timestamp): DataItem => {\n    const data = new Map();\n    for (const [series, record] of annotatedFilteredDataIn) {\n      data.set(series, record[timestamp] ?? 0);\n    }\n\n    return { [dateKey]: timestamp, data };\n  });\n}\n","import type { Timeseries } from \"../providerTypes\";\n\n/**\n * Return a list of keys whose values vary across series (or don't exist\n * everywhere).\n */\nexport function findUniqueKeys(timeseriesData: Array<Timeseries>) {\n  let constantKeys: Set<string> | undefined;\n  let detectedValues: Record<string, string> = {};\n\n  for (const timeseries of timeseriesData) {\n    const keys = Object.keys(timeseries.labels);\n\n    if (constantKeys === undefined) {\n      constantKeys = new Set(keys);\n      detectedValues = { ...timeseries.labels };\n    } else {\n      for (const key of keys) {\n        if (detectedValues[key] !== timeseries.labels[key]) {\n          constantKeys.delete(key);\n        }\n\n        detectedValues[key] = timeseries.labels[key] || \"\";\n      }\n    }\n  }\n\n  const allKeys = Object.keys(detectedValues);\n  return allKeys.filter(\n    (key) => constantKeys === undefined || constantKeys.has(key) === false,\n  );\n}\n","/**\n * Sorts an array ascending by priority.\n *\n * *Warning:* As this function uses `Array#sort()` it also mutates the input\n * array.\n */\nexport function sortBy<T, U extends number | string>(\n  array: Array<T>,\n  getPriorityFn: (item: T) => U,\n  reverse: boolean = false,\n) {\n  return array.sort((a, b) => {\n    const priorityA = getPriorityFn(a);\n    const priorityB = getPriorityFn(b);\n    if (priorityA < priorityB) {\n      return reverse === true ? 1 : -1;\n    } else if (priorityA > priorityB) {\n      return reverse === true ? -1 : 1;\n    } else {\n      return 0;\n    }\n  });\n}\n","import { Fragment, memo } from \"react\";\nimport styled from \"styled-components\";\n\nimport type { Timeseries } from \"../types\";\nimport { sortBy } from \"./sortBy\";\n\n/**\n * Format metric to string. This is used to generate human readable strings\n *\n * Sorting of the labels is optional, but in the UI can be handy to more quickly find\n * a specific label in the text\n */\nexport function formatTimeseries(\n  timeseries: Timeseries,\n  { sortLabels = true }: { sortLabels?: boolean } = {},\n): string {\n  const { name, labels } = timeseries;\n  let entries = Object.entries(labels);\n  entries = sortLabels ? sortBy(entries, ([key]) => key) : entries;\n\n  return `${name}{${entries.map(([k, v]) => `\"${k}\":\"${v}\"`).join(\", \")}}`;\n}\n\nconst Emphasis = styled.span`\n  background-color: ${({ theme }) => theme.colorBase200};\n  /* TODO (Jacco): we should try and find out what to do with this styling */\n  /* stylelint-disable-next-line scale-unlimited/declaration-strict-value */\n  font-weight: 600;\n  border-radius: ${({ theme }) => theme.borderRadius500};\n  padding: 1px 4px;\n  display: inline-block;\n`;\n\nexport const FormattedTimeseries = memo(function FormattedTimeseries({\n  metric,\n  sortLabels = true,\n  emphasizedKeys = [],\n}: {\n  metric: Timeseries;\n  sortLabels?: boolean;\n  emphasizedKeys?: Array<string>;\n}): JSX.Element {\n  const { name, labels } = metric;\n\n  let labelEntries: Array<[string, string]> = Object.entries(labels);\n  if (sortLabels) {\n    labelEntries = sortBy(labelEntries, ([key]) => key);\n  }\n\n  return (\n    <>\n      {name && `${name}: `}\n      {labelEntries.map(([key, value], index) => (\n        <Fragment key={key}>\n          {index > 0 && \", \"}\n          <span className={key in emphasizedKeys ? \"emphasize\" : \"\"}>\n            {key}\n            {value && [\n              \": \",\n              emphasizedKeys.includes(key) ? (\n                <Emphasis key={key}>{value}</Emphasis>\n              ) : (\n                value\n              ),\n            ]}\n          </span>\n        </Fragment>\n      ))}\n    </>\n  );\n});\n","/**\n * Taken from: https://github.com/gregberge/react-merge-refs\n *\n * Copyright (c) 2020 Greg Bergé\n *\n * @license MIT\n */\nexport function mergeRefs<T extends HTMLElement>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>,\n): React.RefCallback<T> {\n  return (value) => {\n    for (const ref of refs) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    }\n  };\n}\n","export function noop() {}\n","export function preventDefault(event: Event | React.SyntheticEvent) {\n  event.preventDefault();\n}\n","import { getTicks } from \"@visx/scale\";\nimport type { NumberValue, ScaleBand } from \"d3-scale\";\nimport type { TickFormatter } from \"@visx/axis\";\nimport { utcFormat } from \"d3-time-format\";\n\nfunction getFormatter(unit: TimeScale): ReturnType<typeof utcFormat> {\n  switch (unit) {\n    case \"milliseconds\":\n      return utcFormat(\".%L\");\n    case \"seconds\":\n      return utcFormat(\":%S\");\n    case \"minutes\":\n      return utcFormat(\"%I:%M\");\n    case \"hours\":\n      return utcFormat(\"%I %p\");\n  }\n\n  // must be days\n  return utcFormat(\"%a %d\");\n}\n\nconst timeScales = [\n  \"milliseconds\",\n  \"seconds\",\n  \"minutes\",\n  \"hours\",\n  \"days\",\n] as const;\n\nexport function getTimeFormatter(\n  scale: ScaleBand<number>,\n): TickFormatter<Date | NumberValue> {\n  const ticks = getTicks(scale, 10);\n  if (ticks.length === 0) {\n    return (item) => item.toString();\n  }\n\n  const first = ticks[0];\n  const second = ticks[1];\n\n  const timeScale =\n    first !== undefined && second !== undefined\n      ? getTimeScale(first, second)\n      : \"hours\";\n  const formatter = getFormatter(timeScale);\n\n  return (item) => {\n    const value = item instanceof Date ? item : new Date(item.valueOf());\n    return formatter(value);\n  };\n}\n\ntype TimeScale = typeof timeScales[number];\n\nfunction getTimeScale(time1: number, time2: number): TimeScale {\n  const delta = time2 - time1;\n  if (delta < 1000) {\n    return \"milliseconds\";\n  }\n\n  if (delta < 60 * 1000) {\n    return \"seconds\";\n  }\n\n  if (delta < 60 * 60 * 1000) {\n    return \"minutes\";\n  }\n\n  if (delta < 24 * 60 * 60 * 1000) {\n    return \"hours\";\n  }\n\n  return \"days\";\n}\n","import type { Timestamp } from \"../providerTypes\";\n\nexport const dateToSeconds = (date: Date): number => date.getTime() / 1000;\n\nexport const secondsToTimestamp = (seconds: number): Timestamp =>\n  new Date(seconds * 1000).toISOString();\n\nexport const timestampToDate = (timestamp: Timestamp): Date =>\n  new Date(timestamp);\n\nexport const timestampToSeconds = (timestamp: Timestamp): number =>\n  new Date(timestamp).getTime() / 1000;\n\nexport const timestampToMs = (value: Timestamp) => {\n  const date = new Date(value);\n  return date.getTime();\n};\n","const os =\n  typeof navigator === \"undefined\"\n    ? \"\"\n    : navigator.platform.match(/mac|win|linux/i)?.[0]?.toLowerCase();\n\nexport const isMac = os === \"mac\";\n","import {\n  ButtonGroup,\n  ControlsContainer,\n  ControlsGroup,\n  ControlsSet,\n  ControlsSetLabel,\n  Icon,\n  IconButton,\n} from \"../BaseComponents\";\nimport type { GraphType, StackingType } from \"../types\";\nimport { preventDefault } from \"../utils\";\n\ntype Props = {\n  graphType: GraphType;\n  onChangeGraphType?: (graphType: GraphType) => void;\n  onChangeStackingType?: (stackingType: StackingType) => void;\n  stackingControlsShown: boolean;\n  stackingType: StackingType;\n};\n\n/**\n * Control what kind fo chart you're viewing (and more)\n */\nexport function ChartControls({\n  graphType,\n  onChangeGraphType,\n  onChangeStackingType,\n  stackingControlsShown,\n  stackingType,\n}: Props): JSX.Element | null {\n  if (!onChangeGraphType && !onChangeStackingType) {\n    return null;\n  }\n\n  return (\n    <ControlsContainer>\n      <ControlsGroup key=\"core\">\n        {onChangeGraphType && (\n          <ControlsSet>\n            <ControlsSetLabel>Type</ControlsSetLabel>\n            <ButtonGroup>\n              <IconButton\n                active={graphType === \"line\"}\n                aria-label=\"Line chart\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeGraphType(\"line\");\n                }}\n              >\n                <Icon type=\"chart_line\" />\n              </IconButton>\n\n              <IconButton\n                active={graphType === \"bar\"}\n                aria-label=\"Bar chart\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeGraphType(\"bar\");\n                }}\n              >\n                <Icon type=\"chart_bar\" />\n              </IconButton>\n            </ButtonGroup>\n          </ControlsSet>\n        )}\n\n        {stackingControlsShown && onChangeStackingType && (\n          <ControlsSet>\n            <ControlsSetLabel>Stacking</ControlsSetLabel>\n            <ButtonGroup>\n              <IconButton\n                active={stackingType === \"none\"}\n                aria-label=\"Combined/default\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"none\");\n                }}\n              >\n                <Icon type=\"combined\" />\n              </IconButton>\n\n              <IconButton\n                active={stackingType === \"stacked\"}\n                aria-label=\"Stacked\"\n                className=\"iconButton\"\n                type=\"button\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"stacked\");\n                }}\n              >\n                <Icon type=\"stacked\" />\n              </IconButton>\n\n              <IconButton\n                active={stackingType === \"percentage\"}\n                aria-label=\"Stacked/percentage\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"percentage\");\n                }}\n              >\n                <Icon type=\"percentage\" />\n              </IconButton>\n            </ButtonGroup>\n          </ControlsSet>\n        )}\n      </ControlsGroup>\n      <ControlsGroup key=\"meta\" />\n    </ControlsContainer>\n  );\n}\n","import { createContext } from \"react\";\n\nexport type ChartSizeContextValue = {\n  width: number;\n  height: number;\n  xMax: number;\n  yMax: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n};\n\n/**\n * Context for tracking the size of the chart.\n */\nexport const ChartSizeContext = createContext<ChartSizeContextValue>({\n  width: 0,\n  height: 0,\n  xMax: 0,\n  yMax: 0,\n  marginTop: 0,\n  marginRight: 0,\n  marginBottom: 0,\n  marginLeft: 0,\n});\n","import { createContext } from \"react\";\n\nexport type CoreControls = {\n  zoom(factor: number, focusRatio?: number): void;\n  move(deltaRation: number): void;\n};\n\n/**\n * Context that handles the result of useCoreControls hooks\n */\nexport const CoreControlsContext = createContext<CoreControls>({\n  zoom() {},\n  move() {},\n});\n","import { createContext } from \"react\";\n\nimport { noop } from \"../utils\";\nimport type { Timeseries } from \"../types\";\n\nexport type FocusedTimeseriesApi = {\n  setFocusedTimeseries: (focusedTimeseries: Timeseries | null) => void;\n};\n\nexport const FocusedTimeseriesApiContext = createContext<FocusedTimeseriesApi>({\n  setFocusedTimeseries: noop,\n});\n","import { createContext } from \"react\";\n\nimport type { Timeseries } from \"../types\";\n\nexport type FocusedTimeseriesState = {\n  focusedTimeseries: Timeseries | null;\n};\n\nexport const FocusedTimeseriesStateContext =\n  createContext<FocusedTimeseriesState>({ focusedTimeseries: null });\n","import { createContext } from \"react\";\n\nexport type InteractiveControls = {\n  reset(): void;\n  startDrag(start: number | null): void;\n  startZoom(start: number | null): void;\n  updateEndValue(end: number): void;\n};\n\n/**\n * One of two parts of the useInteractiveControlState hook results\n *\n * This is the api/functional part\n */\nexport const InteractiveControlsContext = createContext<InteractiveControls>({\n  reset() {},\n  startDrag() {},\n  startZoom() {},\n  updateEndValue() {},\n});\n","import { createContext } from \"react\";\n\nexport type InteractiveControlsState =\n  | { type: \"none\" }\n  | { type: \"drag\"; start: number; end?: number }\n  | { type: \"zoom\"; start: number; end?: number };\n\nexport const defaultControlsState: InteractiveControlsState = { type: \"none\" };\n\n/**\n * Holds the interactive control state as returned by the useInteractiveControlState\n */\nexport const InteractiveControlsStateContext =\n  createContext<InteractiveControlsState>(defaultControlsState);\n","import { createContext } from \"react\";\n\nexport type GraphTooltip = {\n  top: number;\n  left: number;\n  element: SVGSVGElement;\n  color: string;\n  metric: JSX.Element;\n};\n\nexport type TooltipApi = {\n  showTooltip: (tooltip: GraphTooltip) => void;\n  hideTooltip: () => void;\n};\n\nexport const TooltipContext = createContext<TooltipApi>({\n  showTooltip() {},\n  hideTooltip() {},\n});\n","import { useCallback, useRef } from \"react\";\n\nconst noDeps: Array<void> = [];\n\nexport function useHandler<Handler extends Function>(\n  handler: Handler,\n): Handler {\n  const handlerRef = useRef(handler);\n  handlerRef.current = handler;\n\n  // @ts-ignore\n  return useCallback((...args) => handlerRef.current(...args), noDeps);\n}\n","import { useMemo } from \"react\";\n\nimport type { CoreControls } from \"../context\";\nimport { secondsToTimestamp, timestampToSeconds } from \"../utils\";\nimport { useHandler } from \"./useHandler\";\nimport { CoreChartProps } from \"../CoreChart\";\n\nconst MIN_DURATION = 60; // in seconds\n\n/**\n * Hook for creating convenient move/zoom functions\n */\nexport function useCoreControls({\n  timeRange,\n  onChangeTimeRange,\n}: CoreChartProps): CoreControls {\n  /**\n   * Moves the time scale.\n   *\n   * @param deltaRatio The delta to move as a ratio of the current time scale\n   *                   window. -1 moves a full window to the left, and 1 moves\n   *                   a full window to the right.\n   */\n  const move = useHandler((deltaRatio: number) => {\n    const currentFrom = timestampToSeconds(timeRange.from);\n    const currentTo = timestampToSeconds(timeRange.to);\n    const delta = deltaRatio * (currentTo - currentFrom);\n    const from = secondsToTimestamp(currentFrom + delta);\n    const to = secondsToTimestamp(currentTo + delta);\n\n    onChangeTimeRange?.({ from, to });\n  });\n\n  /**\n   * Zooms into or out from the graph.\n   *\n   * @param factor The zoom factor. Anything below 1 makes the time scale\n   *               smaller (zooming in), and anything above 1 makes the time\n   *               scale larger (zooming out).\n   * @param focusRatio The horizontal point on which to focus the zoom,\n   *                   expressed as a ratio from 0 (left-hand side of the graph)\n   *                   to 1 (right-hand side of the graph).\n   */\n  const zoom = useHandler((factor: number, focusRatio = 0.5) => {\n    const currentFrom = timestampToSeconds(timeRange.from);\n    const currentTo = timestampToSeconds(timeRange.to);\n    const duration = currentTo - currentFrom;\n    const focusTimestamp = currentFrom + focusRatio * duration;\n    const newDuration = Math.max(duration * factor, MIN_DURATION);\n    const from = secondsToTimestamp(focusTimestamp - newDuration * focusRatio);\n    const to = secondsToTimestamp(\n      focusTimestamp + newDuration * (1 - focusRatio),\n    );\n\n    onChangeTimeRange?.({ from, to });\n  });\n\n  return useMemo(() => ({ move, zoom }), [move, zoom]);\n}\n","import styled from \"styled-components\";\nimport { useRef, useState, useEffect } from \"react\";\n\nimport { Icon } from \"../BaseComponents\";\nimport { useHandler } from \"./useHandler\";\n\ntype Options = {\n  /**\n   * Default height (assumed to be in pixels).\n   */\n  defaultHeight: number;\n};\n\ntype Result<T> = {\n  /**\n   * Component you should include in your output to allow the user to toggle\n   * the expanded state, if relevant.\n   */\n  expandButton?: JSX.Element;\n\n  /**\n   * Component you may need to include in your output to display the gradient\n   * to indicate the collapsed state, if relevant.\n   */\n  gradient?: JSX.Element;\n\n  /**\n   * Whether the expandable container is currently expanded.\n   */\n  isExpanded: boolean;\n\n  /**\n   * Scroll event listener to attach to the container.\n   */\n  onScroll: (event: React.UIEvent<T, UIEvent>) => void;\n\n  /**\n   * Ref to attach to the container.\n   */\n  ref: React.RefCallback<T>;\n};\n\n/**\n * Implements all the logic needed to create an expandable container.\n */\nexport function useExpandable<T extends HTMLElement = HTMLDivElement>({\n  defaultHeight,\n}: Options): Result<T> {\n  const ref = useRef<T | null>(null);\n\n  const [showExpandButton, setShowExpandButton] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showGradient, setShowGradient] = useState(false);\n\n  const update = useHandler((element: Element) => {\n    const { scrollTop, scrollHeight, clientHeight } = element;\n\n    if (scrollHeight <= defaultHeight) {\n      setShowExpandButton(false);\n      setShowGradient(false);\n    } else {\n      setShowExpandButton(true);\n      setShowGradient(scrollHeight - scrollTop >= clientHeight);\n    }\n  });\n\n  // This calls update function with a tiny delay. This fixes\n  // errors with the ResizeObserver loop taking too long\n  const asyncUpdate = useHandler((element: Element) => {\n    setTimeout(() => {\n      if (ref.current !== element) {\n        return;\n      }\n\n      update(element);\n    }, 0);\n  });\n\n  useEffect(() => {\n    return () => {\n      if (ref.current) {\n        unsubscribeFromNode(ref.current, asyncUpdate);\n        ref.current = null;\n      }\n    };\n  }, [asyncUpdate]);\n\n  const setRef = useHandler((node: T | null) => {\n    if (ref.current === node) {\n      return;\n    }\n\n    if (ref.current) {\n      unsubscribeFromNode(ref.current, asyncUpdate);\n    }\n\n    if (node) {\n      subscribeToNode(node, asyncUpdate);\n      update(node);\n    }\n\n    ref.current = node;\n  });\n\n  const onClickExpand = useHandler(() => {\n    setIsExpanded(!isExpanded);\n  });\n\n  const onScroll = useHandler((event: React.UIEvent<T, UIEvent>) => {\n    asyncUpdate(event.currentTarget);\n  });\n\n  return {\n    expandButton: showExpandButton ? (\n      <Expand onClick={onClickExpand} revert={isExpanded}>\n        <Icon type=\"triangle_down\" />\n      </Expand>\n    ) : undefined,\n    gradient: showGradient ? (\n      <GradientContainer>\n        <Gradient />\n      </GradientContainer>\n    ) : undefined,\n    isExpanded: isExpanded || !showExpandButton,\n    onScroll,\n    ref: setRef,\n  };\n}\n\ntype Listener = (node: Element) => void;\n\nconst listenerMap: WeakMap<Element, Set<Listener>> = new WeakMap();\n\nlet observer: ResizeObserver | undefined;\n\nfunction observerCallback(entries: ResizeObserverEntry[]) {\n  for (const entry of entries) {\n    const listeners = listenerMap.get(entry.target);\n    if (listeners) {\n      for (const listener of listeners) {\n        listener(entry.target);\n      }\n    }\n  }\n}\n\nfunction subscribeToNode(node: Element, listener: Listener) {\n  const listeners = listenerMap.get(node);\n  if (listeners) {\n    listeners.add(listener);\n  } else {\n    listenerMap.set(node, new Set([listener]));\n\n    if (!observer) {\n      observer = new ResizeObserver(observerCallback);\n    }\n\n    observer.observe(node);\n  }\n}\n\nfunction unsubscribeFromNode(node: Element, listener: Listener) {\n  const listeners = listenerMap.get(node);\n\n  if (listeners) {\n    listeners.delete(listener);\n\n    if (listeners.size === 0) {\n      listenerMap.delete(node);\n\n      observer?.unobserve(node);\n    }\n  }\n}\n\nconst Expand = styled.div<{ revert: boolean }>`\n  color: #4797ff;\n  width: 24px;\n  height: 24px;\n  border-radius: 6px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: ${({ revert }) => (revert ? \"rotate(180deg)\" : \"none\")};\n\n  &:hover {\n    cursor: pointer;\n    background: rgba(71, 151, 255, 30%);\n  }\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  height: 39px;\n  background-image: linear-gradient(\n    to bottom,\n    transparent,\n    rgb(255 255 255 / 75%) 50%\n  );\n  border-bottom-right-radius: 6px;\n  pointer-events: none;\n`;\n\n// The container is sticky, but zero height to prevent the gradient itself\n// from reserving any space.\nconst GradientContainer = styled.div`\n  bottom: 0;\n  height: 0;\n  position: sticky;\n  width: 100%;\n`;\n","import { useReducer } from \"react\";\n\nconst reducer = (counter: number): number => counter + 1;\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(reducer, 0);\n\n  return forceUpdate;\n}\n","import { useMemo, useReducer } from \"react\";\n\nimport {\n  defaultControlsState,\n  InteractiveControls,\n  InteractiveControlsState,\n} from \"../context\";\nimport { useHandler } from \"./useHandler\";\n\ntype ActionZoomStart = {\n  type: \"ZOOM_START\";\n  payload: {\n    start: number;\n  };\n};\n\ntype ActionUpdateEndValue = {\n  type: \"UPDATE_END_VALUE\";\n  payload: {\n    end: number;\n  };\n};\n\ntype ActionDragStart = {\n  type: \"DRAG_START\";\n  payload: {\n    start: number;\n  };\n};\n\ntype ActionReset = {\n  type: \"RESET\";\n};\n\ntype Actions =\n  | ActionZoomStart\n  | ActionUpdateEndValue\n  | ActionDragStart\n  | ActionReset;\n\nfunction controlsStateReducer(\n  state: InteractiveControlsState,\n  action: Actions,\n): InteractiveControlsState {\n  switch (action.type) {\n    case \"RESET\":\n      return defaultControlsState;\n\n    case \"DRAG_START\":\n      return {\n        type: \"drag\",\n        start: action.payload.start,\n      };\n\n    case \"ZOOM_START\":\n      return {\n        type: \"zoom\",\n        start: action.payload.start,\n      };\n\n    case \"UPDATE_END_VALUE\":\n      if (state.type === \"none\") {\n        return state;\n      }\n\n      return {\n        type: state.type,\n        start: state.start,\n        end: action.payload.end,\n      };\n\n    default:\n      return state;\n  }\n}\n\n/**\n * Returns zoom/drag handlers and state.\n */\nexport function useInteractiveControls(): {\n  interactiveControls: InteractiveControls;\n  interactiveControlsState: InteractiveControlsState;\n} {\n  const [interactiveControlsState, dispatch] = useReducer(\n    controlsStateReducer,\n    defaultControlsState,\n  );\n\n  const reset = useHandler(() => {\n    dispatch({ type: \"RESET\" });\n  });\n\n  const startZoom = useHandler((start: number) => {\n    dispatch({ type: \"ZOOM_START\", payload: { start } });\n  });\n\n  const startDrag = useHandler((start: number) => {\n    dispatch({ type: \"DRAG_START\", payload: { start } });\n  });\n\n  const updateEndValue = useHandler((end: number) => {\n    dispatch({ type: \"UPDATE_END_VALUE\", payload: { end } });\n  });\n\n  const interactiveControls = useMemo(\n    () => ({ reset, startDrag, startZoom, updateEndValue }),\n    [reset, startDrag, startZoom, updateEndValue],\n  );\n\n  return { interactiveControls, interactiveControlsState };\n}\n","import { useEffect, useState } from \"react\";\n\nconst noEntries: Array<IntersectionObserverEntry> = [];\n\nexport function useIntersectionObserver(\n  ref: React.RefObject<HTMLElement>,\n  options?: IntersectionObserverInit,\n) {\n  const [intersections, setIntersections] =\n    useState<Array<IntersectionObserverEntry>>(noEntries);\n\n  const element = ref.current;\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(setIntersections, options);\n    observer.observe(element);\n    return () => {\n      observer.disconnect();\n      setIntersections(noEntries);\n    };\n  }, [element, options?.root, options?.rootMargin, options?.threshold]);\n\n  return intersections;\n}\n","import { useLayoutEffect, useMemo, useState } from \"react\";\n\ntype Dimensions = { width: number; height: number };\n\nconst defaultDimensions: Dimensions = {\n  width: 0,\n  height: 0,\n};\n\nexport function useMeasure<T extends HTMLElement>(): [\n  React.RefCallback<T>,\n  Dimensions,\n] {\n  const [element, setElement] = useState<T | null>(null);\n  const [rect, setRect] = useState(defaultDimensions);\n\n  const observer = useMemo(\n    () =>\n      new window.ResizeObserver((entries) => {\n        const entry = entries[0];\n        if (entry) {\n          const { width, height } = entry.contentRect;\n          setRect({ width, height });\n        }\n      }),\n    [],\n  );\n\n  useLayoutEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    observer.observe(element);\n    return () => {\n      observer.disconnect();\n    };\n  }, [element]);\n\n  return [setElement, rect];\n}\n","import { localPoint } from \"@visx/event\";\nimport { MouseEvent, MouseEventHandler, Ref, useContext, useRef } from \"react\";\n\nimport {\n  ChartSizeContext,\n  CoreControlsContext,\n  InteractiveControlsContext,\n  InteractiveControlsStateContext,\n} from \"../context\";\nimport {\n  isMac,\n  preventDefault,\n  secondsToTimestamp,\n  timestampToSeconds,\n} from \"../utils\";\nimport { MARGINS } from \"../constants\";\nimport type { TimeRange } from \"../types\";\n\nfunction zoomKeyPressed(event: MouseEvent | WheelEvent) {\n  return isMac ? event.metaKey : event.ctrlKey;\n}\n\n/**\n * Hook for setting up mouse handlers to control dragging & zoom\n */\nexport function useMouseControls({\n  timeRange,\n  onChangeTimeRange,\n}: {\n  timeRange: TimeRange;\n  onChangeTimeRange?: (timeRange: TimeRange) => void;\n}): {\n  onMouseDown: MouseEventHandler<HTMLElement>;\n  onMouseMove: MouseEventHandler<HTMLElement>;\n  onMouseUp: MouseEventHandler<HTMLElement>;\n  onMouseEnter: MouseEventHandler<HTMLElement>;\n  graphContentRef: Ref<SVGGElement>;\n} {\n  const { move, zoom } = useContext(CoreControlsContext);\n  const { startDrag, startZoom, reset, updateEndValue } = useContext(\n    InteractiveControlsContext,\n  );\n  const controlsState = useContext(InteractiveControlsStateContext);\n  const { xMax, yMax } = useContext(ChartSizeContext);\n  const graphContentRef = useRef<SVGGElement | null>(null);\n\n  const onMouseDown = (event: MouseEvent<HTMLElement>) => {\n    if (event.buttons !== 1 || !onChangeTimeRange) {\n      return;\n    }\n\n    preventDefault(event);\n\n    if (!graphContentRef.current) {\n      return;\n    }\n\n    const point = localPoint(graphContentRef.current, event);\n    if (!point) {\n      return;\n    }\n\n    let { x, y } = point;\n    x -= MARGINS.left;\n    y -= MARGINS.top;\n\n    if (x >= 0 && x <= xMax && y >= 0 && y <= yMax) {\n      if (zoomKeyPressed(event)) {\n        startZoom(x);\n      } else if (event.shiftKey) {\n        startDrag(x);\n      }\n    }\n  };\n\n  const onMouseMove = (event: MouseEvent<HTMLElement>) => {\n    preventDefault(event);\n\n    if (controlsState.type === \"none\") {\n      return;\n    }\n\n    if (\n      (controlsState.type === \"drag\" && !event.shiftKey) ||\n      (controlsState.type === \"zoom\" && !zoomKeyPressed(event))\n    ) {\n      reset();\n      return;\n    }\n\n    if (!graphContentRef.current) {\n      return;\n    }\n\n    const point = localPoint(graphContentRef.current, event);\n    if (!point) {\n      return;\n    }\n\n    let { x, y } = point;\n    x -= MARGINS.left;\n    y -= MARGINS.top;\n\n    if (x >= 0 && x <= xMax && y >= 0 && y <= yMax) {\n      updateEndValue(x);\n    }\n  };\n\n  const onMouseUp = (event: MouseEvent) => {\n    if (event.button !== 0) {\n      return;\n    }\n\n    preventDefault(event);\n\n    if (controlsState.type === \"none\") {\n      return;\n    }\n\n    if (controlsState.type === \"zoom\") {\n      const { start, end } = controlsState;\n      if (end !== undefined && start !== end) {\n        const positionToSeconds = (x: number) =>\n          timestampToSeconds(timeRange.from) +\n          (x / xMax) *\n            (timestampToSeconds(timeRange.to) -\n              timestampToSeconds(timeRange.from));\n        const positionToTimestamp = (x: number) =>\n          secondsToTimestamp(positionToSeconds(x));\n\n        const from = positionToTimestamp(Math.min(start, end));\n        const to = positionToTimestamp(Math.max(start, end));\n\n        onChangeTimeRange?.({ from, to });\n      }\n    } else if (controlsState.type === \"drag\") {\n      const { start, end } = controlsState;\n      if (end !== undefined && start !== end) {\n        move((start - end) / xMax);\n      }\n    }\n\n    reset();\n  };\n\n  const onWheel = (event: WheelEvent) => {\n    if (controlsState.type !== \"none\" || !zoomKeyPressed(event)) {\n      return;\n    }\n\n    startZoom(null);\n\n    const graphContent = graphContentRef.current;\n    if (!graphContent) {\n      return;\n    }\n\n    const rect = graphContent.getClientRects()[0];\n    const x = event.pageX - (rect?.left ?? 0);\n    if (x < 0 || x > xMax) {\n      return;\n    }\n\n    preventDefault(event);\n\n    const factor = event.deltaY < 0 ? 0.5 : 2;\n    const focusRatio = x / xMax;\n    zoom(factor, focusRatio);\n  };\n\n  const onMouseEnter = (event: MouseEvent<HTMLElement>) => {\n    const { currentTarget } = event;\n    currentTarget.addEventListener(\"wheel\", onWheel);\n    currentTarget.addEventListener(\"mouseleave\", () => {\n      currentTarget.removeEventListener(\"wheel\", onWheel);\n    });\n  };\n\n  return {\n    onMouseDown,\n    onMouseMove,\n    onMouseUp,\n    onMouseEnter,\n    graphContentRef,\n  };\n}\n","import { scaleUtc, scaleLinear, scaleBand } from \"@visx/scale\";\n\nimport { formatTimeseries } from \"../utils\";\nimport type { InteractiveControlsState } from \"../context\";\nimport type { Metric, StackingType, TimeRange, Timeseries } from \"../types\";\n\nconst getTime = (timestamp: string) => new Date(timestamp).getTime();\n\nexport const x = (metric: Metric) => getTime(metric.time);\nexport const y = (metric: Metric) => metric.value;\n\nexport function getTimeScale(timeRange: TimeRange, xMax: number) {\n  return scaleUtc<number>({\n    range: [0, xMax],\n    domain: [\n      new Date(timeRange.from).getTime(),\n      new Date(timeRange.to).getTime(),\n    ],\n  });\n}\n\nexport type TimeScale = ReturnType<typeof getTimeScale>;\n\n/**\n * In short: get two scales. This is used for bar charts (no `stackingType`),\n * where there's an `xScale` chart which contains the timeseries and a\n * `groupScale` for each of the metrics for each timestamp.\n */\nexport function getGroupedScales(\n  timeseriesData: Array<Timeseries>,\n  controlsState: InteractiveControlsState,\n  xMax: number,\n) {\n  const formattedVisibleTimeseries = timeseriesData\n    .filter((series) => series.visible)\n    .map((series) => formatTimeseries(series));\n\n  const timestampSet = new Set<string>();\n  for (const item of timeseriesData) {\n    for (const metric of item.metrics) {\n      timestampSet.add(metric.time);\n    }\n  }\n\n  const timestamps = [...timestampSet].map(getTime).sort((a, b) => a - b);\n\n  const delta =\n    controlsState.type === \"drag\" && typeof controlsState.end === \"number\"\n      ? controlsState.end - controlsState.start\n      : 0;\n\n  const xScale = scaleBand<number>({\n    range: [0 + delta, xMax + delta],\n    domain: timestamps,\n    padding: 0.2,\n  });\n\n  const groupScale = scaleBand<string>({\n    range: [0, xScale.bandwidth()],\n    domain: formattedVisibleTimeseries,\n    padding: 0.2,\n  });\n\n  return {\n    xScale,\n    groupScale,\n  };\n}\n\nexport type GroupedScales = ReturnType<typeof getGroupedScales>;\nexport type XScaleTypes = TimeScale | GroupedScales[\"xScale\"];\n\ntype MinMax = {\n  min: number;\n  max: number;\n};\n\nexport function getValueScale({\n  timeseriesData,\n  yMax,\n  stackingType = \"none\",\n}: {\n  timeseriesData: Array<Timeseries>;\n  yMax: number;\n  stackingType?: StackingType;\n}) {\n  const { min, max } = getMinMax(timeseriesData, stackingType);\n  const delta = max - min;\n\n  return scaleLinear({\n    range: [yMax, 0],\n    round: false,\n    nice: false,\n    domain: [\n      // only use min when stackingType is default, otherwise use 0\n      // stacked graphs can otherwise overlap the axis text\n      stackingType === \"none\" && min ? min : 0,\n      stackingType === \"percentage\" ? max : max + delta * 0.05,\n    ],\n  });\n}\n\nexport type ValueScale = ReturnType<typeof getValueScale>;\n\nfunction getMinMax(\n  timeseriesData: Array<Timeseries>,\n  stackingType: StackingType,\n): Readonly<MinMax> {\n  switch (stackingType) {\n    case \"none\":\n      return getMinMaxDefault(timeseriesData);\n    case \"percentage\":\n      return { min: 0, max: 100 };\n    case \"stacked\":\n      return getMinMaxStacked(timeseriesData);\n  }\n}\n\nfunction getMinMaxDefault(timeseriesData: Array<Timeseries>): Readonly<MinMax> {\n  const yValues = timeseriesData\n    .filter((result) => result.visible)\n    .flatMap((series) => series.metrics.map(y));\n  const min = yValues.length > 0 ? Math.min(...yValues) : 0;\n  const max = yValues.length > 0 ? Math.max(...yValues) : 0;\n\n  if (min === max) {\n    // If all values are the same, we need to add/subtract a small offset\n    // to/from min/max, otherwise the scale will be broken. But we should be\n    // also careful not to drop the minimum below 0 if that's not necessary,\n    // because it can give very odd results otherwise. The `-0.001` value\n    // makes sure that we see at least a line with \"0\" values, or you might\n    // not see whether there are any results at all.\n    return {\n      min: min < 0 || min >= 1 ? min - 1 : min - 0.001,\n      max: max + 1,\n    };\n  }\n\n  return {\n    min,\n    max,\n  };\n}\n\nfunction getMinMaxStacked(timeseriesData: Array<Timeseries>): Readonly<MinMax> {\n  const totals = new Map<number, number>();\n  for (const series of timeseriesData) {\n    if (!series.visible) {\n      continue;\n    }\n\n    for (const metric of series.metrics) {\n      const time = getTime(metric.time);\n      totals.set(time, (totals.get(time) ?? 0) + metric.value);\n    }\n  }\n\n  return {\n    min: Math.min(...totals.values()),\n    max: Math.max(...totals.values()),\n  };\n}\n","import { useContext, useMemo } from \"react\";\n\nimport {\n  ChartSizeContext,\n  InteractiveControlsState,\n  InteractiveControlsStateContext,\n} from \"../context\";\nimport {\n  getGroupedScales,\n  getTimeScale,\n  getValueScale,\n} from \"../MetricsChart/scales\";\nimport type { XScaleProps } from \"../MetricsChart\";\nimport { secondsToTimestamp, timestampToSeconds } from \"../utils\";\nimport type { TimeRange } from \"../types\";\nimport { CoreChartProps } from \"../CoreChart\";\n\nexport function useScales({\n  graphType,\n  timeseriesData,\n  stackingType,\n  timeRange,\n}: CoreChartProps) {\n  const { xMax, yMax } = useContext(ChartSizeContext);\n  const controlsState = useContext(InteractiveControlsStateContext);\n\n  const xScaleProps = useMemo((): XScaleProps => {\n    if (graphType === \"bar\" && stackingType === \"none\") {\n      return {\n        graphType,\n        stackingType,\n        ...getGroupedScales(timeseriesData, controlsState, xMax),\n      };\n    }\n\n    return {\n      graphType,\n      stackingType,\n      xScale: getTimeScale(\n        translateTimeRange(timeRange, controlsState, xMax),\n        xMax,\n      ),\n    } as XScaleProps;\n  }, [timeRange, xMax, controlsState, graphType, timeseriesData, stackingType]);\n\n  const yScale = useMemo(\n    () => getValueScale({ timeseriesData, stackingType, yMax }),\n    [timeseriesData, stackingType, yMax],\n  );\n\n  return { xScaleProps, yScale };\n}\n\n/**\n * Translates a time-range based on the active zoom state.\n */\nfunction translateTimeRange(\n  timeRange: TimeRange,\n  controlsState: InteractiveControlsState,\n  xMax: number,\n): TimeRange {\n  if (controlsState.type === \"drag\") {\n    const { start, end } = controlsState;\n    if (end !== undefined && start !== end) {\n      const from = timestampToSeconds(timeRange.from);\n      const to = timestampToSeconds(timeRange.to);\n      const delta = ((start - end) / xMax) * (to - from);\n      return {\n        from: secondsToTimestamp(from + delta),\n        to: secondsToTimestamp(to + delta),\n      };\n    }\n  }\n\n  return timeRange;\n}\n","import { useRef, useState } from \"react\";\n\nimport type { CloseTooltipFn, ShowTooltipFn, VirtualElement } from \"../types\";\nimport type { GraphTooltip } from \"../context\";\nimport { useHandler } from \"./useHandler\";\n\nexport function useTooltip(showTooltip: ShowTooltipFn | undefined) {\n  const [graphTooltip, setGraphTooltip] = useState<GraphTooltip | null>(null);\n\n  const closeFnRef = useRef<CloseTooltipFn | null>(null);\n\n  return {\n    graphTooltip,\n\n    showTooltip: useHandler((tip: GraphTooltip) => {\n      if (!showTooltip) {\n        return;\n      }\n\n      setGraphTooltip(tip);\n\n      const element: VirtualElement = {\n        getBoundingClientRect: (): DOMRect => {\n          const ctm = tip.element.getScreenCTM();\n          const point = tip.element.createSVGPoint();\n          point.x = tip.left;\n          point.y = tip.top;\n\n          const { x = tip.left, y = tip.top } =\n            ctm === null ? {} : point.matrixTransform(ctm);\n\n          return new DOMRect(x - 4, y - 4, 8, 8);\n        },\n        contextElement: tip.element,\n      };\n\n      closeFnRef.current = showTooltip(element, tip.metric);\n    }),\n\n    hideTooltip: useHandler(() => {\n      setGraphTooltip(null);\n      if (closeFnRef.current) {\n        closeFnRef.current();\n        closeFnRef.current = null;\n      }\n    }),\n  };\n}\n","import { debounce } from \"throttle-debounce\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { ChartSizeContext, ChartSizeContextValue } from \"../context\";\nimport { mergeRefs } from \"../utils\";\nimport { useIntersectionObserver, useMeasure } from \"../hooks\";\n\ntype Props = {\n  children: React.ReactNode;\n  className?: string;\n  // By default the measured height will be used unless this value is specified\n  // This is useful for charts that contain more than just the chart (but also a legend, for example)\n  overrideHeight?: number;\n  marginTop?: number;\n  marginLeft?: number;\n  marginRight?: number;\n  marginBottom?: number;\n};\n\nexport function ChartSizeContainerProvider({\n  children,\n  className,\n  overrideHeight,\n  marginTop = 0,\n  marginRight = 0,\n  marginBottom = 0,\n  marginLeft = 0,\n}: Props) {\n  const [measureRef, { width, height: measuredHeight }] =\n    useMeasure<HTMLDivElement>();\n  const intersectionRef = useRef<HTMLDivElement>(null);\n  const ref = mergeRefs([measureRef, intersectionRef]);\n\n  const intersections = useIntersectionObserver(intersectionRef, {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0,\n  });\n  const [value, setValue] = useState<ChartSizeContextValue>({\n    xMax: 0,\n    yMax: 0,\n    width: 0,\n    height: 0,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n  });\n\n  const height = overrideHeight ?? measuredHeight;\n  const updateValue = useMemo(\n    () =>\n      debounce(100, (width: number, height: number) =>\n        setValue({\n          xMax: width - marginLeft - marginRight,\n          yMax: height - marginTop - marginBottom,\n          width,\n          height,\n          marginTop,\n          marginRight,\n          marginBottom,\n          marginLeft,\n        }),\n      ),\n    [marginTop, marginRight, marginBottom, marginLeft],\n  );\n\n  useEffect(() => {\n    updateValue(width, height);\n  }, [width, height]);\n\n  return (\n    <div ref={ref} className={className}>\n      {value.width > 0 &&\n      value.height > 0 &&\n      intersections.some((intersection) => intersection.isIntersecting) ? (\n        <ChartSizeContext.Provider value={value}>\n          {children}\n        </ChartSizeContext.Provider>\n      ) : (\n        <ChartSkeleton height={height} />\n      )}\n    </div>\n  );\n}\n\nfunction ChartSkeleton({ height }: { height: number }) {\n  return <div style={{ height }} />;\n}\n","import { useMemo, useState } from \"react\";\n\nimport {\n  FocusedTimeseriesApiContext,\n  FocusedTimeseriesStateContext,\n} from \"../context\";\nimport type { Timeseries } from \"../types\";\n\nexport function FocusedTimeseriesContextProvider(props: {\n  children?: React.ReactNode;\n}) {\n  const { children } = props;\n\n  const [focusedTimeseries, setFocusedTimeseries] = useState<Timeseries | null>(\n    null,\n  );\n  const value = useMemo(() => ({ focusedTimeseries }), [focusedTimeseries]);\n\n  const apiValue = useMemo(\n    () => ({ setFocusedTimeseries }),\n    [setFocusedTimeseries],\n  );\n\n  return (\n    <FocusedTimeseriesApiContext.Provider value={apiValue}>\n      <FocusedTimeseriesStateContext.Provider value={value}>\n        {children}\n      </FocusedTimeseriesStateContext.Provider>\n    </FocusedTimeseriesApiContext.Provider>\n  );\n}\n","import type { DefaultTheme } from \"styled-components\";\n\nexport function getChartColor(i: number, colors: Array<string>) {\n  return colors[i % colors.length];\n}\n","import styled, { css } from \"styled-components\";\nimport { useEffect } from \"react\";\n\nimport type { ChartLegendProps, Timeseries } from \"./types\";\nimport { Container, Icon } from \"../BaseComponents\";\nimport { FormattedTimeseries, isMac, noop, preventDefault } from \"../utils\";\nimport { useMeasure } from \"../hooks\";\n\ntype Props = {\n  color: string;\n  onHover: () => void;\n  onToggleTimeseriesVisibility: ChartLegendProps[\"onToggleTimeseriesVisibility\"];\n  readOnly: boolean;\n  index: number;\n  setSize: (index: number, value: number) => void;\n  timeseries: Timeseries;\n  uniqueKeys: Array<string>;\n};\n\nexport function ChartLegendItem({\n  color,\n  onHover,\n  onToggleTimeseriesVisibility,\n  readOnly,\n  index,\n  setSize,\n  timeseries,\n  uniqueKeys,\n}: Props): JSX.Element {\n  const [ref, { height }] = useMeasure<HTMLDivElement>();\n\n  useEffect(() => {\n    if (height) {\n      setSize(index, height);\n    }\n  }, [height, setSize, index]);\n\n  const toggleTimeseriesVisibility =\n    onToggleTimeseriesVisibility && !readOnly\n      ? (event: React.MouseEvent | React.KeyboardEvent) => {\n          preventDefault(event);\n          const toggleSingle = isMac ? event.metaKey : event.ctrlKey;\n          onToggleTimeseriesVisibility({\n            timeseries,\n            toggleOthers: !toggleSingle,\n          });\n        }\n      : noop;\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === \"Space\") {\n      toggleTimeseriesVisibility(event);\n    }\n  };\n\n  return (\n    <div ref={ref} onClick={toggleTimeseriesVisibility} onKeyDown={onKeyDown}>\n      <LegendItemContainer\n        onMouseOver={timeseries.visible ? onHover : noop}\n        interactive={!readOnly && onToggleTimeseriesVisibility !== undefined}\n      >\n        <ColorBlock color={color} selected={timeseries.visible}>\n          {timeseries.visible && <Icon type=\"check\" width=\"12\" height=\"12\" />}\n        </ColorBlock>\n        <Text>\n          <FormattedTimeseries\n            metric={timeseries}\n            sortLabels\n            emphasizedKeys={uniqueKeys}\n          />\n        </Text>\n      </LegendItemContainer>\n    </div>\n  );\n}\n\nconst ColorBlock = styled.div<{ color: string; selected: boolean }>`\n    background: ${({ color, selected }) => (selected ? color : \"transparent\")};\n    border: 2px solid ${({ color }) => color};\n    width: 14px;\n    height: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${({ theme }) => theme.colorBackground};\n    border-radius: ${({ theme }) => theme.borderRadius400};\n`;\n\nconst InteractiveItemStyling = css`\n    cursor: pointer;\n\n    &:hover {\n        background: ${({ theme }) => theme.colorPrimaryAlpha100};\n    }\n`;\n\nconst LegendItemContainer = styled(Container)<{ interactive: boolean }>`\n    border-radius: ${({ theme }) => theme.borderRadius500};\n    display: flex;\n    align-items: center;\n    font: ${({ theme }) => theme.fontAxisShortHand};\n    padding: 8px 8px 8px 14px;\n    gap: 10px;\n    word-wrap: anywhere;\n\n    ${({ interactive }) => interactive && InteractiveItemStyling}\n`;\n\nconst Text = styled.div`\n    flex: 1;\n`;\n","import { memo, useContext, useEffect, useMemo, useRef } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport { VariableSizeList } from \"react-window\";\n\nimport type { ChartLegendProps } from \"./types\";\nimport { Container } from \"../BaseComponents\";\nimport { findUniqueKeys } from \"../utils\";\nimport { getChartColor } from \"../colors\";\nimport { ChartLegendItem } from \"./ChartLegendItem\";\nimport type { Timeseries } from \"../providerTypes\";\nimport { FocusedTimeseriesApiContext } from \"../context\";\nimport { useExpandable, useForceUpdate, useHandler } from \"../hooks\";\n\nconst DEFAULT_HEIGHT = 293;\nconst DEFAULT_SIZE = 50;\nconst EXPANDED_HEIGHT = 592;\n\nexport const Legend = memo(function Legend({\n  onToggleTimeseriesVisibility,\n  readOnly = false,\n  timeseriesData,\n  footerShown = true,\n  colors,\n}: ChartLegendProps) {\n  const { expandButton, gradient, isExpanded, onScroll, ref } =\n    useExpandable<HTMLDivElement>({ defaultHeight: DEFAULT_HEIGHT });\n\n  const { setFocusedTimeseries } = useContext(FocusedTimeseriesApiContext);\n\n  const maxHeight = isExpanded ? EXPANDED_HEIGHT : DEFAULT_HEIGHT;\n\n  const numSeries = timeseriesData.length;\n  const resultsText = `${numSeries} result${numSeries === 1 ? \"\" : \"s\"}`;\n\n  const uniqueKeys = useMemo(\n    () => findUniqueKeys(timeseriesData),\n    [timeseriesData],\n  );\n  const listRef = useRef<VariableSizeList<Array<Timeseries>>>(null);\n  const sizeMap = useRef(new Map<number, number>());\n  const heightRef = useRef(timeseriesData.length * DEFAULT_SIZE);\n  const update = useForceUpdate();\n\n  useEffect(() => {\n    sizeMap.current = new Map();\n    heightRef.current = timeseriesData.length * DEFAULT_SIZE;\n    update();\n  }, [timeseriesData, update]);\n\n  const getSize = (index: number) => sizeMap.current.get(index) ?? DEFAULT_SIZE;\n\n  const setSize = useHandler((index: number, size: number) => {\n    const oldSize = getSize(index);\n    sizeMap.current.set(index, size);\n    listRef.current?.resetAfterIndex(index);\n    heightRef.current += size - oldSize;\n\n    if (heightRef.current < maxHeight) {\n      update();\n    }\n  });\n\n  const onMouseOut = () => setFocusedTimeseries(null);\n\n  const render = useHandler(\n    ({\n      data,\n      index,\n      style,\n    }: {\n      data: Array<Timeseries>;\n      index: number;\n      style: React.CSSProperties;\n    }) => {\n      const timeseries = data[index];\n      return (\n        <div style={style}>\n          {timeseries && (\n            <ChartLegendItem\n              color={getChartColor(index, colors)}\n              onHover={() => setFocusedTimeseries(timeseries)}\n              onToggleTimeseriesVisibility={onToggleTimeseriesVisibility}\n              readOnly={readOnly}\n              timeseries={timeseries}\n              uniqueKeys={uniqueKeys}\n              index={index}\n              setSize={setSize}\n            />\n          )}\n        </div>\n      );\n    },\n  );\n\n  return (\n    <ChartLegendContainer onMouseOut={onMouseOut} ref={ref}>\n      <ExpandableContainer maxHeight={`${maxHeight}px`} onScroll={onScroll}>\n        <VariableSizeList\n          height={Math.min(heightRef.current, maxHeight)}\n          width=\"100%\"\n          ref={listRef}\n          itemCount={timeseriesData.length}\n          itemData={timeseriesData}\n          itemSize={getSize}\n        >\n          {render}\n        </VariableSizeList>\n        {gradient}\n      </ExpandableContainer>\n      {footerShown && (\n        <Footer>\n          <Results>{resultsText}</Results>\n          {expandButton}\n        </Footer>\n      )}\n    </ChartLegendContainer>\n  );\n});\n\nconst ExpandableContainer = styled.div<{\n  maxHeight: Exclude<React.CSSProperties[\"height\"], undefined>;\n}>`\n    max-height: ${({ maxHeight }) => maxHeight};\n    overflow: auto;\n`;\n\nconst Footer = styled.div`\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nconst ChartLegendContainer = styled(Container)`\n    flex-direction: column;\n    font: ${({ theme }) => theme.fontLegendShortHand};\n    letter-spacing: ${({ theme }) => theme.fontLegendLetterSpacing};\n    letter-spacing: 0.02em;\n    padding: 10px 0 0;\n    position: relative;\n    word-wrap: break-word;\n`;\n\nconst Results = styled.span`\n    font: ${({ theme }) => theme.fontResultsSummaryShortHand};\n    letter-spacing: ${({ theme }) => theme.fontResultsSummaryLetterSpacing};\n    color: ${({ theme }) => theme.colorBase400};\n`;\n","import styled from \"styled-components\";\n\nexport const TimeseriesTableCaption = styled.caption`\n  font-weight: bold;\n  text-align: center;\n  padding: 0 0 6px;\n  color: ${({ theme }) => theme.colorBase400};\n`;\n\nexport const TimeseriesTableTd = styled.td`\n  word-wrap: anywhere;\n`;\n","import { AreaStack, Bar } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { memo, useContext, useMemo } from \"react\";\nimport { SeriesPoint } from \"@visx/shape/lib/types\";\nimport { Group } from \"@visx/group\";\n\nimport {\n  ChartSizeContext,\n  FocusedTimeseriesStateContext,\n  TooltipContext,\n} from \"../../context\";\nimport {\n  DataItem,\n  dataToPercentages,\n  toDataItems,\n  ClosestPointArgs,\n  insideRange,\n  toClosestPointArgs,\n  getTimestamp,\n} from \"../../utils\";\nimport { formatTimeseries } from \"../../utils\";\nimport { getChartColor } from \"../../colors\";\nimport { MARGINS } from \"../../constants\";\nimport type { Metric, OtelMetadata, Timeseries } from \"../../types\";\nimport { TimeScale, ValueScale } from \"../../MetricsChart/scales\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"./TimeseriesTable\";\n\ntype Props = {\n  timeseriesData: Array<Timeseries>;\n  xScale: TimeScale;\n  yScale: ValueScale;\n  asPercentage?: boolean;\n  colors: Array<string>;\n};\n\nconst getY0 = (d: SeriesPoint<DataItem>) => d[0];\nconst getY1 = (d: SeriesPoint<DataItem>) => d[1];\n\nexport const Areas = memo(function Areas({\n  timeseriesData,\n  xScale,\n  yScale,\n  asPercentage = false,\n  colors,\n}: Props) {\n  const { xMax, yMax } = useContext(ChartSizeContext);\n  const { showTooltip, hideTooltip } = useContext(TooltipContext);\n  const dataItems = useMemo(() => {\n    const dataItems = toDataItems(timeseriesData);\n    return asPercentage ? dataToPercentages(dataItems) : dataItems;\n  }, [timeseriesData, asPercentage]);\n\n  const timeseriesArray = dataItems[0] ? [...dataItems[0].data.keys()] : [];\n  const keys = timeseriesArray.map((series) => formatTimeseries(series));\n\n  const handleTooltip = (event: React.MouseEvent<SVGRectElement>) => {\n    const args = toClosestPointArgs({ event, xScale, yScale });\n    const metric = closestMetric({ dataItems, ...args });\n\n    if (metric) {\n      const left = xScale(new Date(metric.time)) + MARGINS.left;\n      const top = yScale(metric.cumulativeValue) + MARGINS.top;\n      const seriesIndex = timeseriesData.indexOf(metric.timeseries);\n      const timeseries = timeseriesData[seriesIndex];\n\n      const svg = event.currentTarget.ownerSVGElement;\n      if (svg) {\n        showTooltip({\n          color: getChartColor(seriesIndex, colors),\n          metric: formatTimeseriesTooltip(timeseries, metric, asPercentage),\n          element: svg,\n          left,\n          top,\n        });\n      }\n    } else {\n      hideTooltip();\n    }\n  };\n\n  const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n  const focusedKey = focusedTimeseries && formatTimeseries(focusedTimeseries);\n  return (\n    <>\n      <AreaStack\n        keys={keys}\n        data={dataItems}\n        x={(d) => xScale(getTimestamp(d.data)) ?? 0}\n        value={(d: DataItem, key: string): number => {\n          const index = keys.indexOf(key);\n          const metric = timeseriesArray[index];\n          return (metric && d.data.get(metric)) || 0;\n        }}\n        y0={(d) => yScale(getY0(d)) ?? 0}\n        y1={(d) => yScale(getY1(d)) ?? 0}\n      >\n        {({ stacks, path }) =>\n          stacks\n            .map((series, index) => {\n              const realIndex = timeseriesData.findIndex(\n                (item) => formatTimeseries(item) === series.key,\n              );\n              const timeseries = timeseriesData[realIndex];\n              const color = getChartColor(realIndex, colors);\n\n              return (\n                <Group\n                  opacity={\n                    focusedKey === null || focusedKey === series.key ? 1 : 0.2\n                  }\n                  key={formatTimeseries(timeseries, {\n                    sortLabels: false,\n                  })}\n                >\n                  <LinearGradient\n                    id={`line-${index}`}\n                    from={color}\n                    to={color}\n                    fromOpacity={0.15}\n                    toOpacity={0.03}\n                    toOffset=\"80%\"\n                  />\n                  <path\n                    key={`stack-${series.key}`}\n                    id={series.key}\n                    d={path(series) || \"\"}\n                    stroke={color}\n                    fill={`url(#line-${index})`}\n                  />\n                </Group>\n              );\n            })\n            .reverse()\n        }\n      </AreaStack>\n      <Bar\n        width={xMax}\n        height={yMax}\n        fill=\"transparent\"\n        onMouseMove={handleTooltip}\n        onMouseLeave={hideTooltip}\n      />\n    </>\n  );\n});\n\ntype BareMetric = Omit<Metric, keyof OtelMetadata>;\n\ntype CandidateValue = {\n  cumulativeValue: number;\n  timeseries: Timeseries;\n};\n\nfunction closestMetric({\n  dataItems,\n  xRange,\n  yRange,\n}: {\n  dataItems: Array<DataItem>;\n} & ClosestPointArgs): (BareMetric & CandidateValue) | null {\n  let metric: ReturnType<typeof closestMetric> = null;\n  let minLen = Number.MAX_SAFE_INTEGER;\n\n  for (const item of dataItems) {\n    const x = getTimestamp(item);\n    if (!insideRange(x, xRange)) {\n      continue;\n    }\n\n    let y = 0;\n    const candidates: CandidateValue[] = [];\n    for (const [timeseries, value] of item.data.entries()) {\n      y += value;\n\n      if (insideRange(y, yRange)) {\n        candidates.push({ cumulativeValue: y, timeseries });\n      }\n    }\n\n    if (candidates.length > 0) {\n      const xLen = Math.pow(xRange.value - x, 2);\n\n      for (const { cumulativeValue, timeseries } of candidates) {\n        const yLen = Math.pow(yRange.value - cumulativeValue, 2);\n        const len = xLen + yLen;\n        const value = item.data.get(timeseries);\n        if (len < minLen && value !== undefined) {\n          minLen = len;\n          metric = {\n            cumulativeValue,\n            time: new Date(x).toISOString(),\n            timeseries,\n            value,\n          };\n        }\n      }\n    }\n  }\n\n  return metric;\n}\n\nfunction formatTimeseriesTooltip(\n  timeseries: Timeseries,\n  metric: BareMetric & CandidateValue,\n  asPercentage = false,\n) {\n  const labelEntries = Object.entries(timeseries.labels);\n  return (\n    <table>\n      <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n      <thead>\n        <tr>\n          <th>{timeseries.name || \"value\"}</th>\n          <th>\n            {asPercentage\n              ? `${metric.value.toLocaleString(\"en-US\", {\n                  maximumFractionDigits: 2,\n                  minimumFractionDigits: 2,\n                  useGrouping: false,\n                })}%`\n              : metric.value}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {labelEntries.map(([key, value]) => (\n          <tr key={key}>\n            <TimeseriesTableTd>{key}:</TimeseriesTableTd>\n            <TimeseriesTableTd>{value}</TimeseriesTableTd>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","// This is the space that's always there even if the padding is set to 0.\nconst FIXED_PADDING = 7;\n// Minimum width for a bar\nconst MIN_BAR_WIDTH = 3;\n\nexport function calculateBandwidth(width: number, steps: number): number {\n  return Math.max((width - FIXED_PADDING * (steps - 1)) / steps, MIN_BAR_WIDTH);\n}\n","import { useContext } from \"react\";\n\nimport { calculateBandwidth } from \"./utils\";\nimport { ChartSizeContext, TooltipContext } from \"../../../context\";\nimport {\n  ClosestPointArgs,\n  DataItem,\n  getTimestamp,\n  insideRange,\n  toClosestPointArgs,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, OtelMetadata, Timeseries } from \"../../../types\";\nimport type { TimeScale, ValueScale } from \"../../../MetricsChart/scales\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\n\ntype Params = {\n  dataItems: Array<DataItem>;\n  timeseriesData: Array<Timeseries>;\n  xScale: TimeScale;\n  yScale: ValueScale;\n  asPercentage: boolean;\n  colors: Array<string>;\n};\n\ntype Handlers = {\n  onMouseMove: React.MouseEventHandler;\n  onMouseLeave: React.MouseEventHandler;\n};\n\n/**\n * Hook managing tooltips/mouseevents for BarStacked component\n */\nexport function useTooltips(params: Params): Handlers {\n  const { dataItems, xScale, yScale, timeseriesData, asPercentage, colors } =\n    params;\n  const { xMax } = useContext(ChartSizeContext);\n\n  const { showTooltip, hideTooltip } = useContext(TooltipContext);\n\n  const onMouseMove = (event: React.MouseEvent<SVGRectElement>) => {\n    const args = toClosestPointArgs({ event, xScale, yScale, EPS: 40 });\n    const metric = closestMetric({ dataItems, ...args });\n\n    if (metric === null) {\n      hideTooltip();\n      return;\n    }\n\n    const svg = event.currentTarget.ownerSVGElement;\n    if (svg) {\n      const bandwidth = calculateBandwidth(xMax, dataItems.length);\n\n      const { cumulativeValue, time, timeseries } = metric;\n      const seriesIndex = timeseriesData.indexOf(timeseries);\n\n      showTooltip({\n        top: yScale(cumulativeValue) + MARGINS.top,\n        left: xScale(new Date(time)) + MARGINS.left + 0.5 * bandwidth,\n        color: getChartColor(seriesIndex, colors),\n        element: svg,\n        metric: formatMetricTooltip(timeseries, metric, asPercentage),\n      });\n    }\n  };\n\n  return {\n    onMouseMove,\n    onMouseLeave: hideTooltip,\n  };\n}\n\ntype BareMetric = Omit<Metric, keyof OtelMetadata>;\n\ntype CandidateValue = {\n  cumulativeValue: number;\n  timeseries: Timeseries;\n};\n\nfunction closestMetric({\n  dataItems,\n  xRange,\n  yRange,\n}: {\n  dataItems: DataItem[];\n} & ClosestPointArgs): (BareMetric & CandidateValue) | null {\n  let metric: ReturnType<typeof closestMetric> = null;\n  let minLen = Number.MAX_SAFE_INTEGER;\n\n  for (const item of dataItems) {\n    const x = getTimestamp(item);\n    if (!insideRange(x, xRange)) {\n      continue;\n    }\n\n    let y = 0;\n    const candidates: CandidateValue[] = [];\n    for (const [metric, value] of item.data.entries()) {\n      y += value;\n\n      if (insideRange(y, yRange)) {\n        candidates.push({ timeseries: metric, cumulativeValue: y });\n      }\n    }\n\n    if (candidates.length > 0) {\n      const xLen = Math.pow(xRange.value - x, 2);\n\n      for (const { timeseries, cumulativeValue } of candidates) {\n        const value = item.data.get(timeseries);\n        const yLen = Math.pow(yRange.value - cumulativeValue, 2);\n\n        const len = xLen + yLen;\n\n        if (len < minLen && value !== undefined) {\n          minLen = len;\n          metric = {\n            cumulativeValue,\n            time: new Date(x).toISOString(),\n            timeseries,\n            value,\n          };\n        }\n      }\n    }\n  }\n\n  return metric;\n}\n\nfunction formatMetricTooltip(\n  timeseries: Timeseries,\n  metric: BareMetric & CandidateValue,\n  asPercentage = false,\n) {\n  const labelEntries = Object.entries(timeseries.labels);\n  return (\n    <table>\n      <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n      <thead>\n        <tr>\n          <th>{timeseries.name || \"value\"}</th>\n          <th>\n            {asPercentage\n              ? `${metric.value.toLocaleString(\"en-US\", {\n                  maximumFractionDigits: 2,\n                  minimumFractionDigits: 2,\n                  useGrouping: false,\n                })}%`\n              : metric.value}\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        {labelEntries.map(([key, value]) => (\n          <tr key={key}>\n            <TimeseriesTableTd>{key}: </TimeseriesTableTd>\n            <TimeseriesTableTd>{value}</TimeseriesTableTd>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Bar } from \"@visx/shape\";\nimport { LinearGradient } from \"@visx/gradient\";\nimport { memo, ReactNode, useContext, useMemo } from \"react\";\n\nimport { calculateBandwidth } from \"./utils\";\nimport {\n  ChartSizeContext,\n  FocusedTimeseriesStateContext,\n} from \"../../../context\";\nimport {\n  dataToPercentages,\n  dateKey,\n  getTimestamp,\n  toDataItems,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport type { TimeScale, ValueScale } from \"../../../MetricsChart/scales\";\nimport type { Timeseries } from \"../../../types\";\nimport { useTooltips } from \"./hooks\";\n\ntype Props = {\n  timeseriesData: Array<Timeseries>;\n  xScale: TimeScale;\n  yScale: ValueScale;\n  asPercentage?: boolean;\n  colors: Array<string>;\n};\n\nexport const BarsStacked = memo(function BarsStacked(props: Props) {\n  const {\n    timeseriesData,\n    xScale,\n    yScale,\n    asPercentage = false,\n    colors,\n  } = props;\n\n  const { xMax, yMax } = useContext(ChartSizeContext);\n\n  const dataItems = useMemo(() => {\n    const dataItems = toDataItems(timeseriesData);\n    return asPercentage ? dataToPercentages(dataItems) : dataItems;\n  }, [timeseriesData, asPercentage]);\n\n  const { onMouseMove, onMouseLeave } = useTooltips({\n    dataItems,\n    timeseriesData,\n    xScale,\n    yScale,\n    asPercentage,\n    colors,\n  });\n\n  const bandwidth = calculateBandwidth(xMax, dataItems.length);\n  const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n  return (\n    <>\n      {dataItems.map((item) => {\n        let offsetY = 0;\n        const timestamp = item[dateKey];\n        const x = xScale(getTimestamp(item)) ?? 0;\n\n        const bars: Array<ReactNode> = [];\n        for (const [timeseries, value] of item.data.entries()) {\n          const realIndex = timeseriesData.indexOf(timeseries);\n\n          const yValue = value;\n          const originalY = yValue === undefined ? 0 : yScale(yValue);\n          const height = yMax - originalY;\n          const translatedY = originalY - offsetY;\n          offsetY += height;\n\n          const color = getChartColor(realIndex, colors);\n\n          bars.push(\n            <LinearGradient\n              id={`fill-${timestamp}-line-${realIndex}`}\n              key={`fill-${timestamp}-line-${realIndex}-gradient`}\n              from={color}\n              to={color}\n              fromOpacity={0.15}\n              toOpacity={0.03}\n            />,\n            <Bar\n              key={`stack-${timestamp}-${realIndex}`}\n              id={`stack-${timestamp}-${realIndex}`}\n              x={x}\n              y={translatedY}\n              height={height}\n              width={bandwidth}\n              stroke={color}\n              fill={`url(#fill-${timestamp}-line-${realIndex})`}\n              opacity={\n                focusedTimeseries === null || focusedTimeseries === timeseries\n                  ? 1\n                  : 0.2\n              }\n            />,\n          );\n        }\n\n        return bars;\n      })}\n      <Bar\n        width={xMax}\n        height={yMax}\n        fill=\"transparent\"\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n      />\n    </>\n  );\n});\n","import { DefaultTheme } from \"styled-components\";\nimport type { ScaleBand } from \"d3-scale\";\n\nimport {\n  compact,\n  formatTimeseries,\n  getBoundary,\n  insideRange,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport type { GraphTooltip } from \"../../../context\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, Timeseries } from \"../../../types\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\nimport { ValueScale } from \"../../../MetricsChart/scales\";\n\n/**\n * Returns the relative value inside a band.\n *\n * Use case: get the X value as it is inside a specific band (useful when you\n * have scales inside scales)\n */\nexport function getValueInsideScale<T extends { toString(): string }>(\n  value: number,\n  scale: ScaleBand<T>,\n): number {\n  // Calculate the max width\n  const maxScale = scale.step() * scale.domain().length;\n\n  // clamp the value to this range\n  const clamped = clamp(\n    value - scale.paddingOuter() * scale.step(),\n    0,\n    maxScale,\n  );\n\n  // Get the value for inside the groupScale\n  return clamped % scale.step();\n}\n\nexport function clamp(min: number, value: number, max: number): number {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Convenient object to store information about a possible candidate\n */\nexport type Candidate = {\n  timeseriesIndex: number;\n  timeseries: Timeseries;\n  metric: Metric;\n};\n\ntype GetCandidatesArgs = {\n  x: number;\n  xScale: ScaleBand<string>;\n  y: number;\n  yScale: ValueScale;\n  timeseriesData: Array<Timeseries>;\n  activeTimestamp: string;\n};\n\nexport function getCandidate({\n  x,\n  xScale,\n  y,\n  yScale,\n  timeseriesData,\n  activeTimestamp,\n}: GetCandidatesArgs): Candidate | null {\n  const possibleTimeseries = timeseriesData.filter((series) => series.visible);\n\n  const yRange = getBoundary({\n    value: y,\n    EPS: 80,\n    scale: yScale,\n  });\n\n  const candidates: Array<Candidate> = compact(\n    possibleTimeseries.map((timeseries) => {\n      // Find the index for looking up the metric in the results\n      const timeseriesIndex = xScale\n        .domain()\n        .indexOf(formatTimeseries(timeseries));\n      const series = timeseriesData[timeseriesIndex];\n      const metric = series?.metrics.find(\n        (item) => item.time === activeTimestamp,\n      );\n\n      // Check if there's no metric or it's outside of the range.\n      if (!metric || !insideRange(metric.value, yRange)) {\n        return null;\n      }\n\n      return {\n        timeseries,\n        timeseriesIndex,\n        metric,\n      };\n    }),\n  );\n\n  let minLen = Number.MAX_SAFE_INTEGER;\n  let closest: Candidate | null = null;\n\n  for (const candidate of candidates) {\n    const candidateX = xScale(\n      formatTimeseries(candidate.timeseries),\n    )?.valueOf();\n    if (candidateX === undefined) {\n      continue;\n    }\n\n    const xLen = Math.pow(x - candidateX, 2);\n    const yLen = Math.pow(y - yScale(candidate.metric.value).valueOf(), 2);\n    const len = xLen + yLen;\n\n    if (len < minLen) {\n      minLen = len;\n      closest = candidate;\n    }\n  }\n\n  return closest;\n}\n\n/**\n * BandScales don't have an invert function\n *\n * This function re-implements the logic and takes paddingOuter/inner into\n * consideration so we can do more than just set a single padding value\n */\nexport function invert<T extends { toString(): string }>(\n  scale: ScaleBand<T>,\n  value: number,\n): T | undefined {\n  const [lower, upper] = scale.range();\n  const start = Math.min(lower, upper);\n  const end = Math.max(lower, upper);\n  const domain = scale.domain();\n\n  const paddingOuter = scale.paddingOuter();\n  const paddingInner = scale.paddingInner();\n\n  /**\n   * The range isn't divided into equal sections, padding outer offsets\n   * the pattern as well as the paddingInner is used n(items) - 1 times\n   */\n  const calculatedItems = domain.length + 2 * paddingOuter - paddingInner;\n  const itemWidth = (end - start) / calculatedItems;\n\n  const beginOffset = (0.5 * paddingInner - paddingOuter) * itemWidth;\n  const offsetX = value + beginOffset;\n  const closestIndex = Math.floor(offsetX / itemWidth);\n  return domain[clamp(0, closestIndex, domain.length - 1)];\n}\n\n/**\n * Retrieve a range of possible values in the domain\n */\nexport function invertRange<T extends { toString(): string }>(\n  scale: ScaleBand<T>,\n  range: { low: number; high: number },\n): Array<T> {\n  const lowValue = invert(scale, range.low);\n  const highValue = invert(scale, range.high);\n  if (lowValue === undefined || highValue === undefined) {\n    return [];\n  }\n\n  if (lowValue === highValue) {\n    return [lowValue];\n  }\n\n  const domain = scale.domain();\n  const lowIndex = domain.indexOf(lowValue);\n  const highIndex = domain.indexOf(highValue);\n\n  return domain.slice(lowIndex, highIndex);\n}\n\ntype GetTooltipArgs = {\n  candidate: Candidate;\n  groupScale: ScaleBand<string>;\n  xScale: ScaleBand<number>;\n  yScale: ValueScale;\n  element: SVGSVGElement;\n  colors: Array<string>;\n};\n\nexport function getTooltipData({\n  candidate,\n  groupScale,\n  xScale,\n  yScale,\n  element,\n  colors,\n}: GetTooltipArgs): GraphTooltip | null {\n  const { metric, timeseries, timeseriesIndex } = candidate;\n  const activeTimestamp = metric.time;\n  const bandwidth = groupScale.bandwidth();\n\n  // Calculate proper positions\n  const left =\n    (groupScale(formatTimeseries(timeseries)) ?? 0) +\n    (xScale(new Date(activeTimestamp).getTime())?.valueOf() ?? 0) +\n    MARGINS.left +\n    0.5 * bandwidth;\n  const top = yScale(metric.value).valueOf() + MARGINS.top;\n\n  const color = getChartColor(timeseriesIndex, colors);\n  return {\n    top,\n    left,\n    color,\n    element,\n    metric: formatTimeseriesTooltip(timeseries, metric, activeTimestamp),\n  };\n}\n\nfunction formatTimeseriesTooltip(\n  timeseries: Timeseries,\n  metric: Metric,\n  activeTimestamp: string,\n) {\n  const labelEntries = Object.entries(timeseries.labels);\n  return (\n    <table>\n      <TimeseriesTableCaption>{activeTimestamp}</TimeseriesTableCaption>\n      <thead>\n        <tr>\n          <th>{timeseries.name || \"value\"}</th>\n          <th>{metric.value}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {labelEntries.map(([key, value]) => (\n          <tr key={key}>\n            <TimeseriesTableTd>{key}:</TimeseriesTableTd>{\" \"}\n            <TimeseriesTableTd>{value}</TimeseriesTableTd>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { localPoint } from \"@visx/event\";\nimport type { ScaleBand } from \"d3-scale\";\nimport { useContext } from \"react\";\n\nimport {\n  getCandidate,\n  getTooltipData,\n  getValueInsideScale,\n  invert,\n} from \"./utils\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Timeseries } from \"../../../types\";\nimport { TooltipContext } from \"../../../context\";\nimport { useHandler } from \"../../../hooks\";\nimport { ValueScale } from \"../../../MetricsChart/scales\";\n\ntype Params = {\n  groupScale: ScaleBand<string>;\n  timeseriesData: Array<Timeseries>;\n  xScale: ScaleBand<number>;\n  yScale: ValueScale;\n  colors: Array<string>;\n};\n\ntype Handlers = {\n  onMouseMove: React.MouseEventHandler;\n  onMouseLeave: React.MouseEventHandler;\n};\n\n/**\n * Hook managing tooltips/mouseevents for BarStacked component\n */\nexport function useTooltips(params: Params): Handlers {\n  const { groupScale, timeseriesData, xScale, yScale, colors } = params;\n\n  const { showTooltip, hideTooltip } = useContext(TooltipContext);\n\n  const onMouseMove = useHandler((event: React.MouseEvent<SVGRectElement>) => {\n    const { x: x0, y: y0 } = localPoint(event) || { x: 0, y: 0 };\n\n    const x = x0 - MARGINS.left;\n    const y = y0 - MARGINS.top;\n\n    // Find the relevant timestamp\n    const activeTimestamp = invert(xScale, x);\n    if (activeTimestamp === undefined) {\n      hideTooltip();\n      return;\n    }\n\n    // Convert x to value as it would be inside the step of the scale\n    // You can consider it to be x % xScale.step()\n    // but with some additional math due considering padding + clamp logic\n    // to avoid issues at the boundary of the graph\n    const xInTimescale = getValueInsideScale(x, xScale);\n\n    const candidate = getCandidate({\n      x: xInTimescale, // xInTimescale is now the \"x\"\n      xScale: groupScale, // Groupscale is now the main X scale\n      timeseriesData,\n      activeTimestamp: new Date(activeTimestamp).toISOString(),\n      y,\n      yScale,\n    });\n\n    if (!candidate) {\n      hideTooltip();\n      return;\n    }\n\n    const svg = event.currentTarget.ownerSVGElement;\n    const tooltipData =\n      svg &&\n      getTooltipData({\n        candidate,\n        xScale,\n        yScale,\n        element: svg,\n        groupScale,\n        colors,\n      });\n\n    if (!tooltipData) {\n      hideTooltip();\n      return;\n    }\n\n    showTooltip(tooltipData);\n  });\n\n  return {\n    onMouseMove,\n    onMouseLeave: hideTooltip,\n  };\n}\n","import { Bar } from \"@visx/shape\";\nimport { memo, useContext, useMemo } from \"react\";\nimport { Group } from \"@visx/group\";\n\nimport {\n  ChartSizeContext,\n  FocusedTimeseriesStateContext,\n} from \"../../../context\";\nimport { dateKey, formatTimeseries, toDataItems } from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { GroupedScales, ValueScale } from \"../../../MetricsChart/scales\";\nimport type { Timeseries } from \"../../../types\";\nimport { useTooltips } from \"./hooks\";\n\ntype Props = {\n  timeseriesData: Array<Timeseries>;\n  yScale: ValueScale;\n  colors: Array<string>;\n} & GroupedScales;\n\nexport const DefaultBars = memo(function DefaultBars(\n  props: Props,\n): JSX.Element {\n  const { groupScale, timeseriesData, xScale, yScale, colors } = props;\n  const { onMouseMove, onMouseLeave } = useTooltips({\n    groupScale,\n    timeseriesData,\n    xScale,\n    yScale,\n    colors,\n  });\n\n  const dataItems = useMemo(\n    () => toDataItems(timeseriesData),\n    [timeseriesData],\n  );\n  const { xMax, yMax } = useContext(ChartSizeContext);\n\n  const bandwidth = groupScale.bandwidth();\n  const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n  const seriesData = useMemo(() => {\n    return timeseriesData.map((timeseries, index) => {\n      const color = getChartColor(index, colors);\n      return {\n        timeseries,\n        index,\n        x: groupScale(formatTimeseries(timeseries)),\n        color,\n      };\n    });\n  }, [timeseriesData, groupScale]);\n\n  return (\n    <>\n      {dataItems.map((dataItem, index) => (\n        <Group\n          key={dataItem[dateKey]}\n          transform={`translate(${xScale(\n            new Date(dataItem[dateKey]).getTime(),\n          )}, 0)`}\n        >\n          {seriesData.map(({ timeseries, x, color }, keyIndex) => {\n            const value = dataItem.data.get(timeseries);\n            if (value === undefined) {\n              return null;\n            }\n\n            return (\n              <Bar\n                key={formatTimeseries(timeseries, {\n                  sortLabels: false,\n                })}\n                id={`stack-${index}-${keyIndex}`}\n                x={x}\n                y={yScale(value)}\n                height={yMax - yScale(value)}\n                width={bandwidth}\n                stroke={color}\n                fill={color}\n                fillOpacity={0.1}\n                opacity={\n                  focusedTimeseries === null || focusedTimeseries === timeseries\n                    ? 1\n                    : 0.2\n                }\n              />\n            );\n          })}\n        </Group>\n      ))}\n      <Bar\n        width={xMax}\n        height={yMax}\n        fill=\"transparent\"\n        onMouseMove={onMouseMove}\n        onMouseLeave={onMouseLeave}\n      />\n    </>\n  );\n});\n","import { AxisScale } from \"@visx/axis\";\nimport { Area } from \"@visx/shape\";\nimport { Threshold } from \"@visx/threshold\";\nimport { memo } from \"react\";\n\nimport type { Metric } from \"../../../types\";\nimport { x, y, ValueScale } from \"../../../MetricsChart/scales\";\n\ntype Props = {\n  id: string;\n  metrics: Metric[];\n  xScale: AxisScale<number>;\n  yScale: ValueScale;\n  yMax: number;\n  fillColor: string;\n  strokeColor: string;\n  highlight?: boolean;\n};\n\nexport const Series = memo(function Series({\n  metrics,\n  xScale,\n  yScale,\n  yMax,\n  strokeColor,\n  fillColor,\n  id,\n  highlight = false,\n}: Props) {\n  return (\n    <>\n      <Threshold<Metric>\n        id={id}\n        data={metrics}\n        x={(d) => xScale(x(d)) ?? 0}\n        y0={(d) => yScale(y(d)) ?? 0}\n        y1={yScale(0)}\n        clipAboveTo={0}\n        clipBelowTo={yMax}\n        aboveAreaProps={{ fill: fillColor }}\n        // Keep this one around to spot any incorrect threshold computations.\n        belowAreaProps={{ fill: \"violet\" }}\n      />\n      <Area\n        data={metrics}\n        x={(d) => xScale(x(d)) ?? 0}\n        y={(d) => yScale(y(d)) ?? 0}\n        stroke={strokeColor}\n        strokeWidth={highlight ? 1.5 : 1}\n        fill={fillColor}\n      />\n    </>\n  );\n});\n","import { LinearGradient } from \"@visx/gradient\";\nimport { memo, useId } from \"react\";\n\nimport type { Metric } from \"../../../types\";\nimport { Series } from \"./Series\";\nimport { TimeScale, ValueScale } from \"../../../MetricsChart/scales\";\n\ntype Props = {\n  xScale: TimeScale;\n  yScale: ValueScale;\n  metrics: Array<Metric>;\n  yMax: number;\n  highlight?: boolean;\n  color: string;\n};\n\nexport const Line = memo(function Line({\n  xScale,\n  yScale,\n  metrics,\n  yMax,\n  highlight = false,\n  color,\n}: Props): JSX.Element {\n  const id = useId();\n  return (\n    <>\n      <LinearGradient\n        id={`line-${id}`}\n        from={color}\n        to={color}\n        fromOpacity={0.15}\n        toOpacity={0.03}\n        toOffset=\"23%\"\n      />\n      <Series\n        id={id}\n        metrics={metrics}\n        xScale={xScale}\n        yScale={yScale}\n        yMax={yMax}\n        // Do naive color selection for now.\n        // Later make colors fixed per time series.\n        strokeColor={color}\n        highlight={highlight}\n        fillColor={`url(#line-${id})`}\n      />\n    </>\n  );\n});\n","import { Bar } from \"@visx/shape\";\nimport { Group } from \"@visx/group\";\nimport { memo, useContext } from \"react\";\n\nimport {\n  ChartSizeContext,\n  FocusedTimeseriesStateContext,\n  TooltipContext,\n} from \"../../../context\";\nimport {\n  ClosestPointArgs,\n  formatTimeseries,\n  insideRange,\n  toClosestPointArgs,\n} from \"../../../utils\";\nimport { getChartColor } from \"../../../colors\";\nimport { Line } from \"./Line\";\nimport { MARGINS } from \"../../../constants\";\nimport type { Metric, Timeseries } from \"../../../types\";\nimport { TimeseriesTableCaption, TimeseriesTableTd } from \"../TimeseriesTable\";\nimport type { ValueScale, TimeScale } from \"../../../MetricsChart/scales\";\nimport { useHandler } from \"../../../hooks\";\n\nexport const x = (metric: Metric) => new Date(metric.time).getTime();\nexport const y = (metric: Metric) => metric.value;\n\ntype Props = {\n  timeseriesData: Array<Timeseries>;\n  xScale: TimeScale;\n  yScale: ValueScale;\n  colors: Array<string>;\n};\n\nexport const Lines = memo(function Lines({\n  timeseriesData,\n  xScale,\n  yScale,\n  colors,\n}: Props) {\n  const { xMax, yMax } = useContext(ChartSizeContext);\n  const { showTooltip, hideTooltip } = useContext(TooltipContext);\n\n  const handleTooltip = useHandler(\n    (event: React.MouseEvent<SVGRectElement>) => {\n      const displayed = timeseriesData.filter((series) => series.visible);\n      const args = toClosestPointArgs({ event, xScale, yScale });\n      const [metric, seriesIndex] = closestMetric({\n        timeseriesData: displayed,\n        ...args,\n      });\n\n      if (metric !== null && seriesIndex !== null) {\n        const left = xScale(x(metric)) + MARGINS.left;\n        const top = yScale(y(metric)) + MARGINS.top;\n        const timeseries = displayed[seriesIndex];\n\n        // metric should not be undefined, but if it is we shouldn't continue\n        if (timeseries === undefined) {\n          hideTooltip();\n          return;\n        }\n\n        // Find the absoluteIndex so the tooltip color still matches\n        // if an element is hidden\n        const absoluteIndex = timeseriesData.indexOf(timeseries);\n\n        const svg = event.currentTarget.ownerSVGElement;\n        if (svg) {\n          showTooltip({\n            color: getChartColor(absoluteIndex, colors),\n            metric: formatTimeseriesTooltip(timeseries, metric),\n            element: svg,\n            left,\n            top,\n          });\n        }\n      } else {\n        hideTooltip();\n      }\n    },\n  );\n\n  const { focusedTimeseries } = useContext(FocusedTimeseriesStateContext);\n\n  return (\n    <>\n      {timeseriesData.map(\n        (timeseries, index) =>\n          timeseries.visible && (\n            <Group\n              key={formatTimeseries(timeseries, {\n                sortLabels: false,\n              })}\n              opacity={\n                focusedTimeseries === null || focusedTimeseries === timeseries\n                  ? 1\n                  : 0.2\n              }\n            >\n              <Line\n                xScale={xScale}\n                yScale={yScale}\n                metrics={timeseries.metrics}\n                yMax={yMax}\n                highlight={focusedTimeseries === timeseries}\n                color={getChartColor(index, colors)}\n              />\n            </Group>\n          ),\n      )}\n      <Bar\n        width={xMax}\n        height={yMax}\n        fill=\"transparent\"\n        onMouseMove={handleTooltip}\n        onMouseLeave={hideTooltip}\n      />\n    </>\n  );\n});\n\nfunction closestMetric({\n  timeseriesData,\n  xRange,\n  yRange,\n}: {\n  timeseriesData: Array<Timeseries>;\n} & ClosestPointArgs): [Metric | null, number | null] {\n  let metric: Metric | null = null;\n  let seriesIndex: number | null = null;\n  let minLen = Number.MAX_SAFE_INTEGER;\n\n  for (const [i, series] of timeseriesData.entries()) {\n    const candidates = series.metrics.filter(\n      (p) => insideRange(x(p), xRange) && insideRange(y(p), yRange),\n    );\n\n    // In order to get a length that is to scale calculate a factor\n    // based on the range of the x and y values.\n    // This is to offset the fact that the x and y ranges can be on very different scales.\n    const xFactor = xRange.high - xRange.low;\n    const yFactor = yRange.high - yRange.low;\n\n    for (const p of candidates) {\n      const xLen = Math.pow((x(p) - xRange.value) / xFactor, 2);\n      const yLen = Math.pow((y(p) - yRange.value) / yFactor, 2);\n      const len = xLen + yLen;\n      if (len < minLen) {\n        minLen = len;\n        seriesIndex = i;\n        metric = p;\n      }\n    }\n  }\n\n  return [metric, seriesIndex];\n}\n\nfunction formatTimeseriesTooltip(timeseries: Timeseries, metric: Metric) {\n  return (\n    <table>\n      <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n      <thead>\n        <tr>\n          <th>{timeseries.name || \"value\"}</th>\n          <th>{metric.value}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(timeseries.labels).map(([key, value]) => (\n          <tr key={key}>\n            <TimeseriesTableTd>{key}:</TimeseriesTableTd>\n            <TimeseriesTableTd>{value}</TimeseriesTableTd>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n","import { Areas } from \"./Areas\";\nimport { BarsStacked } from \"./BarsStacked\";\nimport { DefaultBars } from \"./DefaultBars\";\nimport { Lines } from \"./Lines\";\nimport type { Timeseries } from \"../../types\";\nimport type { ValueScale } from \"../../MetricsChart/scales\";\nimport type { XScaleProps } from \"../../MetricsChart/types\";\n\ntype Props = {\n  timeseriesData: Array<Timeseries>;\n  xScaleProps: XScaleProps;\n  yScale: ValueScale;\n  colors: Array<string>;\n};\n\nexport function ChartContent({\n  timeseriesData,\n  xScaleProps,\n  yScale,\n  colors,\n}: Props): JSX.Element {\n  if (xScaleProps.graphType === \"line\" && xScaleProps.stackingType === \"none\") {\n    return (\n      <Lines\n        timeseriesData={timeseriesData}\n        xScale={xScaleProps.xScale}\n        yScale={yScale}\n        colors={colors}\n      />\n    );\n  }\n\n  if (xScaleProps.graphType === \"line\") {\n    return (\n      <Areas\n        timeseriesData={timeseriesData}\n        xScale={xScaleProps.xScale}\n        yScale={yScale}\n        asPercentage={xScaleProps.stackingType === \"percentage\"}\n        colors={colors}\n      />\n    );\n  }\n\n  if (xScaleProps.stackingType === \"none\") {\n    return (\n      <DefaultBars\n        groupScale={xScaleProps.groupScale}\n        timeseriesData={timeseriesData}\n        xScale={xScaleProps.xScale}\n        yScale={yScale}\n        colors={colors}\n      />\n    );\n  }\n\n  return (\n    <BarsStacked\n      timeseriesData={timeseriesData}\n      xScale={xScaleProps.xScale}\n      yScale={yScale}\n      asPercentage={xScaleProps.stackingType === \"percentage\"}\n      colors={colors}\n    />\n  );\n}\n","import { AxisBottom, TickFormatter } from \"@visx/axis\";\nimport type { NumberValue } from \"d3-scale\";\nimport { memo } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport { XScaleTypes } from \"../../MetricsChart/scales\";\n\ntype Props = {\n  xMax: number;\n  yMax: number;\n  xScale: XScaleTypes;\n  xScaleFormatter?: TickFormatter<Date | NumberValue>;\n  strokeDasharray?: string;\n};\n\nfunction Bottom({ yMax, xScale, xScaleFormatter, strokeDasharray }: Props) {\n  const {\n    colorBase300,\n    colorBase500,\n    fontAxisFontSize,\n    fontAxisFontFamily,\n    fontAxisFontStyle,\n    fontAxisFontWeight,\n    fontAxisLetterSpacing,\n    fontAxisLineHeight,\n  } = useTheme();\n\n  const axisBottomTickLabelProps = {\n    textAnchor: \"middle\" as const,\n    fontFamily: fontAxisFontFamily,\n    fontStyle: fontAxisFontStyle,\n    fontWeight: fontAxisFontWeight,\n    fontSize: fontAxisFontSize,\n    letterSpacing: fontAxisLetterSpacing,\n    lineHeight: fontAxisLineHeight,\n    fill: colorBase500,\n  };\n\n  return (\n    <AxisBottom\n      top={yMax}\n      scale={xScale}\n      stroke={colorBase300}\n      hideTicks={true}\n      tickFormat={xScaleFormatter}\n      tickLabelProps={() => axisBottomTickLabelProps}\n      strokeDasharray={strokeDasharray}\n    />\n  );\n}\n\nexport default memo(Bottom);\n","import { AxisLeft, TickFormatter, Orientation } from \"@visx/axis\";\nimport { GridRows, GridColumns } from \"@visx/grid\";\nimport type { NumberValue } from \"d3-scale\";\nimport { animate, Tween, useMotionValue } from \"framer-motion\";\nimport { memo, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport Bottom from \"./Bottom\";\nimport { ValueScale, XScaleTypes } from \"../../MetricsChart/scales\";\n\ntype Props = {\n  xMax: number;\n  yMax: number;\n  xScale: XScaleTypes;\n  yScale: ValueScale;\n  xScaleFormatter?: TickFormatter<Date | NumberValue>;\n  gridColumnsShown?: boolean;\n  gridRowsShown?: boolean;\n  gridBordersShown?: boolean;\n  gridDashArray?: string;\n  gridStrokeColor?: string;\n};\n\nexport const GridWithAxes = memo(function GridWithAxes({\n  xMax,\n  yMax,\n  xScale,\n  yScale,\n  xScaleFormatter,\n  gridColumnsShown = true,\n  gridRowsShown = true,\n  gridBordersShown = true,\n  gridDashArray,\n  gridStrokeColor,\n}: Props) {\n  const [targetLower = 0, targetUpper = 0] = yScale.domain();\n\n  const { colorBase300 } = useTheme();\n  const strokeColor = gridStrokeColor || colorBase300;\n\n  const lower = useCustomSpring(targetLower);\n  const upper = useCustomSpring(targetUpper);\n\n  const temporaryScale = yScale.copy().domain([lower, upper]);\n  const ticks = temporaryScale.ticks();\n  const {\n    colorBase500,\n    fontAxisFontSize,\n    fontAxisFontFamily,\n    fontAxisFontStyle,\n    fontAxisFontWeight,\n    fontAxisLetterSpacing,\n    fontAxisLineHeight,\n  } = useTheme();\n\n  const axisLeftTickLabelProps = {\n    dx: \"-0.25em\",\n    dy: \"0.25em\",\n    textAnchor: \"end\" as const,\n    fontFamily: fontAxisFontFamily,\n    fontStyle: fontAxisFontStyle,\n    fontWeight: fontAxisFontWeight,\n    fontSize: fontAxisFontSize,\n    letterSpacing: fontAxisLetterSpacing,\n    lineHeight: fontAxisLineHeight,\n    fill: colorBase500,\n  };\n\n  return (\n    <>\n      {gridRowsShown && (\n        <GridRows\n          scale={temporaryScale}\n          width={xMax}\n          height={yMax}\n          stroke={strokeColor}\n          strokeDasharray={gridDashArray}\n        />\n      )}\n      {gridBordersShown && (\n        <line\n          x1={xMax}\n          x2={xMax}\n          y1={0}\n          y2={yMax}\n          stroke={strokeColor}\n          strokeWidth={1}\n          strokeDasharray={gridDashArray}\n        />\n      )}\n      {gridColumnsShown && (\n        <GridColumns\n          scale={xScale}\n          width={xMax}\n          height={yMax}\n          stroke={strokeColor}\n          strokeDasharray={gridDashArray}\n        />\n      )}\n      <Bottom\n        xMax={xMax}\n        xScale={xScale}\n        yMax={yMax}\n        xScaleFormatter={xScaleFormatter}\n        strokeDasharray={gridDashArray}\n      />\n      <AxisLeft\n        scale={temporaryScale}\n        orientation={Orientation.left}\n        stroke={strokeColor}\n        strokeWidth={gridBordersShown ? 1 : 0}\n        strokeDasharray={gridDashArray}\n        hideTicks={true}\n        tickLabelProps={() => axisLeftTickLabelProps}\n        tickFormat={temporaryScale.tickFormat(10, \"~s\")}\n        tickValues={ticks.slice(1, -1)}\n      />\n    </>\n  );\n});\n\nconst spring: Tween = {\n  type: \"tween\",\n  duration: 1,\n  easings: [\"anticipate\"],\n};\n\nfunction useCustomSpring(value: number) {\n  const motionValue = useMotionValue(value);\n  const [current, setCurrent] = useState(value);\n\n  useLayoutEffect(() => {\n    return motionValue.onChange((value) => setCurrent(value));\n  }, [motionValue]);\n\n  useEffect(() => {\n    const controls = animate(motionValue, value, spring);\n    return controls.stop;\n  }, [motionValue, value]);\n\n  return current;\n}\n","import { Bar } from \"@visx/shape\";\nimport { useContext } from \"react\";\n\nimport { ChartSizeContext, InteractiveControlsStateContext } from \"../context\";\n\nexport function ZoomBar(): JSX.Element | null {\n  const { yMax } = useContext(ChartSizeContext);\n  const controlsState = useContext(InteractiveControlsStateContext);\n  if (controlsState.type !== \"zoom\") {\n    return null;\n  }\n\n  const { start, end } = controlsState;\n  if (end === undefined) {\n    return null;\n  }\n\n  const reverseZoom = end < start;\n\n  return (\n    <Bar\n      stroke=\"#4797ff\"\n      strokeWidth={1}\n      fill=\"#a3cbff\"\n      fillOpacity=\"10%\"\n      x={reverseZoom ? end : start}\n      y={0}\n      width={reverseZoom ? start - end : end - start}\n      height={yMax}\n    />\n  );\n}\n","import { Group } from \"@visx/group\";\nimport { Line } from \"@visx/shape\";\nimport styled from \"styled-components\";\nimport { useContext, useId, useMemo, useState } from \"react\";\n\nimport { ChartContent } from \"./ChartContent\";\nimport {\n  ChartSizeContext,\n  InteractiveControlsState,\n  InteractiveControlsStateContext,\n  TooltipContext,\n} from \"../context\";\nimport { Container } from \"../BaseComponents\";\nimport { getTimeFormatter } from \"../utils\";\nimport { GridWithAxes } from \"./GridWithAxes\";\nimport { useMouseControls, useScales, useTooltip } from \"../hooks\";\nimport { ZoomBar } from \"./ZoomBar\";\nimport type { CoreChartProps } from \"./types\";\n\nexport function CoreChart({\n  gridShown = true,\n  ...props\n}: CoreChartProps &\n  Required<Pick<CoreChartProps, \"colors\">> & {\n    gridShown?: boolean;\n  }): JSX.Element {\n  const { width, height, xMax, yMax, marginTop, marginLeft } =\n    useContext(ChartSizeContext);\n  const interactiveControlsState = useContext(InteractiveControlsStateContext);\n\n  const { xScaleProps, yScale } = useScales(props);\n\n  const { onMouseDown, onMouseUp, onMouseEnter, onMouseMove, graphContentRef } =\n    useMouseControls(props);\n\n  const [shiftKeyPressed, setShiftKeyPressed] = useState(false);\n\n  const onKeyHandler = (event: React.KeyboardEvent) => {\n    setShiftKeyPressed(event.shiftKey);\n  };\n\n  const onMouseMoveWithShiftDetection = (\n    event: React.MouseEvent<HTMLElement>,\n  ) => {\n    setShiftKeyPressed(event.shiftKey);\n    onMouseMove(event);\n  };\n\n  const { graphTooltip, showTooltip, hideTooltip } = useTooltip(\n    props.showTooltip,\n  );\n  const tooltipApiValue = useMemo(\n    () => ({ showTooltip, hideTooltip }),\n    [showTooltip, hideTooltip],\n  );\n\n  const clipPathId = useId();\n\n  // Use a custom formatter when `xScale` is a `ScaleBand<number>`. We want to\n  // display the time, not the timestamp (number).\n  const xScaleFormatter =\n    xScaleProps.graphType === \"bar\" && xScaleProps.stackingType === \"none\"\n      ? getTimeFormatter(xScaleProps.xScale)\n      : undefined;\n\n  return (\n    <TooltipContext.Provider value={tooltipApiValue}>\n      <StyledContainer\n        onKeyDown={onKeyHandler}\n        onKeyUp={onKeyHandler}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMoveWithShiftDetection}\n        onMouseUp={onMouseUp}\n        onMouseEnter={onMouseEnter}\n      >\n        <svg\n          width={width}\n          height={height}\n          style={{\n            cursor: getCursorFromState(\n              interactiveControlsState,\n              shiftKeyPressed,\n            ),\n          }}\n        >\n          <defs>\n            <clipPath id={clipPathId}>\n              <rect x={0} y={0} width={xMax} height={yMax} />\n            </clipPath>\n          </defs>\n          <Group left={marginLeft} top={marginTop}>\n            {gridShown && (\n              <GridWithAxes\n                xMax={xMax}\n                yMax={yMax}\n                xScale={xScaleProps.xScale}\n                yScale={yScale}\n                xScaleFormatter={xScaleFormatter}\n                gridColumnsShown={props.gridColumnsShown}\n                gridRowsShown={props.gridRowsShown}\n                gridBordersShown={props.gridBordersShown}\n                gridDashArray={props.gridDashArray}\n                gridStrokeColor={props.gridStrokeColor}\n              />\n            )}\n            <Group innerRef={graphContentRef} clipPath={`url(#${clipPathId})`}>\n              <ChartContent\n                timeseriesData={props.timeseriesData}\n                xScaleProps={xScaleProps}\n                yScale={yScale}\n                colors={props.colors}\n              />\n            </Group>\n            <ZoomBar />\n          </Group>\n          {graphTooltip && (\n            <g>\n              <Line\n                from={{ x: graphTooltip.left, y: 0 }}\n                to={{ x: graphTooltip.left, y: yMax }}\n                stroke={graphTooltip.color}\n                strokeWidth={1}\n                pointerEvents=\"none\"\n                strokeDasharray=\"1 1\"\n              />\n              <circle\n                cx={graphTooltip.left}\n                cy={graphTooltip.top}\n                r={4}\n                fill={graphTooltip.color}\n                pointerEvents=\"none\"\n              />\n            </g>\n          )}\n        </svg>\n      </StyledContainer>\n    </TooltipContext.Provider>\n  );\n}\n\nconst StyledContainer = styled(Container)`\n  margin-top: 2px;\n`;\n\nfunction getCursorFromState(\n  interactiveControlsState: InteractiveControlsState,\n  shiftKey: boolean,\n): string {\n  switch (interactiveControlsState.type) {\n    case \"none\":\n      return shiftKey ? \"grab\" : \"default\";\n    case \"drag\":\n      return interactiveControlsState.start === null ? \"grab\" : \"grabbing\";\n    case \"zoom\":\n      return \"zoom-in\";\n  }\n}\n","import { memo, useMemo } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\n\nimport { ChartControls } from \"./ChartControls\";\nimport { ChartSizeContainerProvider } from \"../ChartSizeContainerProvider\";\nimport {\n  CoreControlsContext,\n  InteractiveControlsContext,\n  InteractiveControlsStateContext,\n} from \"../context\";\nimport { FocusedTimeseriesContextProvider } from \"./FocusedTimeseriesContextProvider\";\nimport { Legend } from \"../ChartLegend\";\nimport { CoreChart } from \"../CoreChart\";\nimport type { CoreChartProps } from \"../CoreChart\";\nimport { useCoreControls, useInteractiveControls } from \"../hooks\";\nimport { HEIGHT, MARGINS } from \"../constants\";\n\nexport function MetricsChart(props: CoreChartProps) {\n  return props.readOnly ? (\n    <ReadOnlyMetricsChart {...props} />\n  ) : (\n    <InteractiveMetricsChart {...props} />\n  );\n}\n\nfunction InteractiveMetricsChart(props: CoreChartProps) {\n  const coreControls = useCoreControls(props);\n  const { interactiveControls, interactiveControlsState } =\n    useInteractiveControls();\n\n  return (\n    <CoreControlsContext.Provider value={coreControls}>\n      <InteractiveControlsContext.Provider value={interactiveControls}>\n        <InteractiveControlsStateContext.Provider\n          value={interactiveControlsState}\n        >\n          <StyledChartSizeContainerProvider\n            overrideHeight={HEIGHT}\n            marginTop={MARGINS.top}\n            marginRight={MARGINS.right}\n            marginBottom={MARGINS.bottom}\n            marginLeft={MARGINS.left}\n          >\n            <InnerMetricsChart {...props} />\n          </StyledChartSizeContainerProvider>\n        </InteractiveControlsStateContext.Provider>\n      </InteractiveControlsContext.Provider>\n    </CoreControlsContext.Provider>\n  );\n}\n\nfunction ReadOnlyMetricsChart(props: CoreChartProps) {\n  return (\n    <ChartSizeContainerProvider\n      overrideHeight={HEIGHT}\n      marginTop={MARGINS.top}\n      marginRight={MARGINS.right}\n      marginBottom={MARGINS.bottom}\n      marginLeft={MARGINS.left}\n    >\n      <InnerMetricsChart {...props} />\n    </ChartSizeContainerProvider>\n  );\n}\nconst InnerMetricsChart = memo(function InnerMetricsChart(\n  props: CoreChartProps,\n) {\n  const {\n    readOnly,\n    legendShown = true,\n    chartControlsShown = true,\n    stackingControlsShown = true,\n    colors,\n  } = props;\n\n  const theme = useTheme();\n\n  const chartColors = useMemo(() => {\n    return (\n      colors || [\n        theme[\"colorSupport1400\"],\n        theme[\"colorSupport2400\"],\n        theme[\"colorSupport3400\"],\n        theme[\"colorSupport4400\"],\n        theme[\"colorSupport5400\"],\n        theme[\"colorSupport6400\"],\n        theme[\"colorSupport7400\"],\n        theme[\"colorSupport8400\"],\n        theme[\"colorSupport9400\"],\n        theme[\"colorSupport10400\"],\n        theme[\"colorSupport11400\"],\n      ]\n    );\n  }, [theme, colors]);\n\n  return (\n    <FocusedTimeseriesContextProvider>\n      {!readOnly && chartControlsShown && (\n        <ChartControls\n          {...props}\n          stackingControlsShown={stackingControlsShown}\n        />\n      )}\n      <CoreChart {...props} colors={chartColors} />\n      {legendShown && <Legend {...props} colors={chartColors} />}\n    </FocusedTimeseriesContextProvider>\n  );\n});\n\nconst StyledChartSizeContainerProvider = styled(ChartSizeContainerProvider)`\n    display: flex;\n    gap: 12px;\n    flex-direction: column;\n`;\n","import styled, { useTheme } from \"styled-components\";\nimport { ChartSizeContainerProvider } from \"../ChartSizeContainerProvider\";\nimport { useMemo } from \"react\";\nimport { CoreChart, CoreChartProps } from \"../CoreChart\";\n\ntype Props = Pick<\n  CoreChartProps,\n  | \"colors\"\n  | \"graphType\"\n  | \"onChangeGraphType\"\n  | \"onChangeTimeRange\"\n  | \"stackingType\"\n  | \"timeRange\"\n  | \"timeseriesData\"\n>;\n\nexport function SparkChart(props: Props) {\n  const { colors, ...rest } = props;\n  const theme = useTheme();\n\n  const chartColors = useMemo((): Array<string> => {\n    return (\n      colors || [\n        theme[\"colorSupport1400\"],\n        theme[\"colorSupport2400\"],\n        theme[\"colorSupport3400\"],\n        theme[\"colorSupport4400\"],\n        theme[\"colorSupport5400\"],\n        theme[\"colorSupport6400\"],\n        theme[\"colorSupport7400\"],\n        theme[\"colorSupport8400\"],\n        theme[\"colorSupport9400\"],\n        theme[\"colorSupport10400\"],\n        theme[\"colorSupport11400\"],\n      ]\n    );\n  }, [theme, colors]);\n\n  return (\n    <StyledChartSizeContainerProvider>\n      <CoreChart {...rest} colors={chartColors} gridShown={false} />\n    </StyledChartSizeContainerProvider>\n  );\n}\n\nconst StyledChartSizeContainerProvider = styled(ChartSizeContainerProvider)`\n  width: 100%;\n  height: 100%;\n`;\n"],"names":["ButtonGroup","styled","span","theme","colorBase200","borderRadius500","Box","div","Container","ControlsContainer","ControlsGroup","ControlsSet","ControlsSetLabel","fontControlsShortHand","fontControlsLetterSpacing","colorBase500","_path","_extends","ICON_MAP","chart_bar","ChartBarIcon","chart_line","ChartLineIcon","check","CheckIcon","combined","CombinedIcon","percentage","PercentageIcon","stacked","StackedIcon","triangle_down","TriangleDownIcon","Icon","type","svgProps","Component","_jsx","buttonStyling","css","colorPrimary500","effectFocusOutline","useIconButtonTheme","normal","color","colorBase800","backgroundColor","hover","colorBase300","active","colorBackground","colorBase600","focus","disabled","StyledButton","button","buttonSize","padding","width","height","iconSize","IconButton","forwardRef","props","ref","className","style","children","otherProps","useTheme","iconButtonTheme","newStyle","elementProps","HEIGHT","MARGINS","top","bottom","left","right","toClosestPointArgs","args","event","xScale","yScale","EPS","x","x0","y","y0","localPoint","xRange","getBoundary","value","scale","yRange","low","invert","valueOf","high","Math","min","max","insideRange","range","compact","items","filter","Boolean","dateKey","Symbol","getTimestamp","d","Date","getTime","dataToPercentages","dataItems","map","item","total","data","values","Map","key","set","toDataItems","timeseriesData","timestampSet","Set","annotatedFilteredDataIn","series","visible","metric","metrics","time","add","sort","timestamp","record","findUniqueKeys","constantKeys","detectedValues","timeseries","keys","Object","labels","undefined","delete","allKeys","has","sortBy","array","getPriorityFn","reverse","a","b","priorityA","priorityB","formatTimeseries","sortLabels","name","entries","k","v","join","Emphasis","FormattedTimeseries","memo","emphasizedKeys","labelEntries","_jsxs","_Fragment","index","Fragment","includes","mergeRefs","refs","current","noop","preventDefault","getFormatter","unit","utcFormat","getTimeFormatter","ticks","getTicks","length","toString","first","second","timeScale","getTimeScale","formatter","time1","time2","delta","secondsToTimestamp","seconds","toISOString","timestampToSeconds","os","navigator","platform","match","toLowerCase","isMac","ChartControls","graphType","onChangeGraphType","onChangeStackingType","stackingControlsShown","stackingType","aria-label","onClick","ChartSizeContext","createContext","xMax","yMax","marginTop","marginRight","marginBottom","marginLeft","CoreControlsContext","zoom","move","FocusedTimeseriesApiContext","setFocusedTimeseries","FocusedTimeseriesStateContext","focusedTimeseries","InteractiveControlsContext","reset","startDrag","startZoom","updateEndValue","defaultControlsState","InteractiveControlsStateContext","TooltipContext","showTooltip","hideTooltip","noDeps","useHandler","handler","handlerRef","useRef","useCallback","MIN_DURATION","useCoreControls","timeRange","onChangeTimeRange","deltaRatio","currentFrom","from","currentTo","to","factor","focusRatio","duration","focusTimestamp","newDuration","useMemo","useExpandable","defaultHeight","showExpandButton","setShowExpandButton","useState","isExpanded","setIsExpanded","showGradient","setShowGradient","update","element","scrollTop","scrollHeight","clientHeight","asyncUpdate","setTimeout","useEffect","unsubscribeFromNode","setRef","node","subscribeToNode","onClickExpand","onScroll","currentTarget","expandButton","Expand","revert","gradient","GradientContainer","Gradient","listenerMap","WeakMap","observer","observerCallback","entry","listeners","get","target","listener","ResizeObserver","observe","size","unobserve","reducer","counter","useForceUpdate","forceUpdate","useReducer","controlsStateReducer","state","action","start","payload","end","useInteractiveControls","interactiveControlsState","dispatch","interactiveControls","noEntries","useIntersectionObserver","options","intersections","setIntersections","IntersectionObserver","disconnect","root","rootMargin","threshold","defaultDimensions","useMeasure","setElement","rect","setRect","window","contentRect","useLayoutEffect","zoomKeyPressed","metaKey","ctrlKey","useMouseControls","useContext","controlsState","graphContentRef","onMouseDown","buttons","point","shiftKey","onMouseMove","onMouseUp","positionToSeconds","positionToTimestamp","onWheel","graphContent","getClientRects","pageX","deltaY","onMouseEnter","addEventListener","removeEventListener","scaleUtc","domain","getGroupedScales","formattedVisibleTimeseries","timestamps","scaleBand","groupScale","bandwidth","getValueScale","getMinMax","scaleLinear","round","nice","getMinMaxDefault","getMinMaxStacked","yValues","result","flatMap","totals","useScales","xScaleProps","translateTimeRange","useTooltip","graphTooltip","setGraphTooltip","closeFnRef","tip","getBoundingClientRect","ctm","getScreenCTM","createSVGPoint","matrixTransform","DOMRect","contextElement","ChartSizeContainerProvider","overrideHeight","measureRef","measuredHeight","intersectionRef","setValue","updateValue","debounce","some","intersection","isIntersecting","Provider","ChartSkeleton","FocusedTimeseriesContextProvider","apiValue","getChartColor","i","colors","ChartLegendItem","onHover","onToggleTimeseriesVisibility","readOnly","setSize","uniqueKeys","toggleTimeseriesVisibility","toggleSingle","toggleOthers","onKeyDown","LegendItemContainer","onMouseOver","interactive","ColorBlock","selected","Text","borderRadius400","InteractiveItemStyling","colorPrimaryAlpha100","fontAxisShortHand","DEFAULT_HEIGHT","DEFAULT_SIZE","EXPANDED_HEIGHT","Legend","footerShown","maxHeight","numSeries","resultsText","listRef","sizeMap","heightRef","getSize","oldSize","resetAfterIndex","onMouseOut","render","ChartLegendContainer","ExpandableContainer","VariableSizeList","itemCount","itemData","itemSize","Footer","Results","fontLegendShortHand","fontLegendLetterSpacing","fontResultsSummaryShortHand","fontResultsSummaryLetterSpacing","colorBase400","TimeseriesTableCaption","caption","TimeseriesTableTd","td","getY0","getY1","Areas","asPercentage","timeseriesArray","handleTooltip","closestMetric","cumulativeValue","seriesIndex","indexOf","svg","ownerSVGElement","formatTimeseriesTooltip","focusedKey","AreaStack","y1","stacks","path","realIndex","findIndex","Group","opacity","LinearGradient","id","fromOpacity","toOpacity","toOffset","stroke","fill","Bar","onMouseLeave","minLen","Number","MAX_SAFE_INTEGER","candidates","push","xLen","pow","yLen","len","table","thead","tr","th","toLocaleString","maximumFractionDigits","minimumFractionDigits","useGrouping","tbody","FIXED_PADDING","MIN_BAR_WIDTH","calculateBandwidth","steps","useTooltips","params","formatMetricTooltip","BarsStacked","offsetY","bars","yValue","originalY","translatedY","getValueInsideScale","maxScale","step","clamped","clamp","paddingOuter","getCandidate","activeTimestamp","possibleTimeseries","timeseriesIndex","find","closest","candidate","candidateX","lower","upper","paddingInner","calculatedItems","itemWidth","beginOffset","offsetX","closestIndex","floor","getTooltipData","xInTimescale","tooltipData","DefaultBars","seriesData","dataItem","transform","keyIndex","fillOpacity","Series","strokeColor","fillColor","highlight","Threshold","clipAboveTo","clipBelowTo","aboveAreaProps","belowAreaProps","Area","strokeWidth","Line","useId","Lines","displayed","absoluteIndex","p","xFactor","yFactor","ChartContent","Bottom","xScaleFormatter","strokeDasharray","fontAxisFontSize","fontAxisFontFamily","fontAxisFontStyle","fontAxisFontWeight","fontAxisLetterSpacing","fontAxisLineHeight","axisBottomTickLabelProps","textAnchor","fontFamily","fontStyle","fontWeight","fontSize","letterSpacing","lineHeight","AxisBottom","hideTicks","tickFormat","tickLabelProps","GridWithAxes","gridColumnsShown","gridRowsShown","gridBordersShown","gridDashArray","gridStrokeColor","targetLower","targetUpper","useCustomSpring","temporaryScale","copy","axisLeftTickLabelProps","dx","dy","GridRows","line","x1","x2","y2","GridColumns","AxisLeft","orientation","Orientation","tickValues","slice","spring","easings","motionValue","useMotionValue","setCurrent","onChange","controls","animate","stop","ZoomBar","reverseZoom","CoreChart","gridShown","shiftKeyPressed","setShiftKeyPressed","onKeyHandler","onMouseMoveWithShiftDetection","tooltipApiValue","clipPathId","StyledContainer","onKeyUp","cursor","getCursorFromState","defs","clipPath","innerRef","g","pointerEvents","circle","cx","cy","r","MetricsChart","ReadOnlyMetricsChart","InteractiveMetricsChart","coreControls","StyledChartSizeContainerProvider","InnerMetricsChart","legendShown","chartControlsShown","chartColors","SparkChart","rest"],"mappings":"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"}