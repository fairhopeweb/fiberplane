{"version":3,"file":"index.js","sources":["../src/BaseComponents/ButtonGroup.tsx","../src/BaseComponents/Containers.tsx","../src/BaseComponents/Controls.tsx","../src/BaseComponents/Icon/icons/ChartBar.svg","../src/BaseComponents/Icon/icons/ChartLine.svg","../src/BaseComponents/Icon/icons/Check.svg","../src/BaseComponents/Icon/icons/Combined.svg","../src/BaseComponents/Icon/icons/Percentage.svg","../src/BaseComponents/Icon/icons/Stacked.svg","../src/BaseComponents/Icon/icons/TriangleDown.svg","../src/BaseComponents/Icon/IconMap.ts","../src/BaseComponents/Icon/Icon.tsx","../src/BaseComponents/IconButton.tsx","../src/utils/compact.ts","../src/utils/findUniqueKeys.ts","../src/utils/getShapeListColor.ts","../src/utils/identity.ts","../src/utils/mergeRefs.ts","../src/utils/noop.ts","../src/utils/preventDefault.ts","../src/utils/sortBy.ts","../src/utils/timestamps.ts","../src/utils/useragent.ts","../src/MetricsChart/ChartControls.tsx","../src/CoreChart/ChartSizeContext.ts","../src/hooks/useHandler.ts","../src/hooks/useExpandable.tsx","../src/hooks/useForceUpdate.ts","../src/hooks/useIntersectionObserver.ts","../src/hooks/useMeasure.ts","../src/CoreChart/ChartSizeContainerProvider.tsx","../src/CoreChart/ChartShape/AreaShape.tsx","../src/CoreChart/ChartShape/LineShape.tsx","../src/CoreChart/ChartShape/PointShape.tsx","../src/CoreChart/ChartShape/RectangleShape.tsx","../src/CoreChart/ChartShape/ChartShape.tsx","../src/CoreChart/ChartContent.tsx","../src/CoreChart/GridWithAxes/BottomAxis.tsx","../src/CoreChart/GridWithAxes/GridColumns.tsx","../src/CoreChart/GridWithAxes/GridRows.tsx","../src/CoreChart/GridWithAxes/LeftAxis.tsx","../src/CoreChart/GridWithAxes/GridWithAxes.tsx","../src/CoreChart/hooks/useInteractiveControls.ts","../src/CoreChart/constants.ts","../src/CoreChart/utils.ts","../src/CoreChart/hooks/useMouseControls.ts","../src/CoreChart/hooks/useScales.ts","../src/CoreChart/hooks/useTooltip.ts","../src/CoreChart/ZoomBar.tsx","../src/CoreChart/CoreChart.tsx","../src/Mondrian/generator/utils/getTimeFromTimestamp.ts","../src/Mondrian/generator/utils/attachSuggestionsToXAxis.ts","../src/Mondrian/generator/constants.ts","../src/Mondrian/generator/utils/calculateBarWidth.ts","../src/Mondrian/generator/utils/calculateBarX.ts","../src/Mondrian/generator/utils/extendMinMax.ts","../src/Mondrian/generator/utils/getInitialMinMax.ts","../src/Mondrian/generator/utils/getYAxisForConstantValue.ts","../src/Mondrian/generator/utils/calculateStackedYAxisRange.ts","../src/Mondrian/generator/utils/createMetricBuckets.ts","../src/Mondrian/generator/utils/getXAxisFromTimeRange.ts","../src/Mondrian/generator/utils/calculateBucketsAndAxesForStackedChart.ts","../src/Mondrian/generator/utils/calculateSmallestTimeInterval.ts","../src/Mondrian/generator/utils/calculateYAxisRange.ts","../src/Mondrian/generator/utils/extendAxisWithInterval.ts","../src/Mondrian/generator/utils/normalizeAlongLinearAxis.ts","../src/Mondrian/generator/utils/splitIntoContinuousLines.ts","../src/Mondrian/generator/generateBarChartFromTimeseries.ts","../src/Mondrian/generator/generateLineChartFromTimeseries.ts","../src/Mondrian/generator/generateStackedBarChartFromTimeseries.ts","../src/Mondrian/generator/generateStackedLineChartFromTimeseries.ts","../src/Mondrian/generator/index.ts","../src/TimeseriesLegend/TimeseriesLegendItem.tsx","../src/TimeseriesLegend/TimeseriesLegend.tsx","../src/MetricsChart/Tooltip.tsx","../src/MetricsChart/MetricsChart.tsx","../src/SparkChart/SparkChart.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const ButtonGroup = styled.span`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n  padding: 4px 8px;\n  background: ${({ theme }) => theme.colorBase200};\n  border-radius: ${({ theme }) => theme.borderRadius500};\n`;\n","import styled from \"styled-components\";\n\nexport const Box = styled.div`\n  box-sizing: border-box;\n  margin: 0;\n  min-width: 0;\n`;\n\nexport const Container = styled(Box)`\n  display: flex;\n`;\n","import styled from \"styled-components\";\n\nexport const ControlsContainer = styled.div`\n  display: flex;\n  margin: 0 0 12px;\n  gap: 24px;\n`;\n\nexport const ControlsGroup = styled.div`\n  display: flex;\n  gap: 8px;\n`;\n\nexport const ControlsSet = styled.div`\n  display: flex;\n  gap: 8px;\n  align-items: center;\n`;\n\nexport const ControlsSetLabel = styled.span`\n  font: ${({ theme }) => theme.fontControlsShortHand};\n  letter-spacing: ${({ theme }) => theme.fontControlsLetterSpacing};\n  color: ${({ theme }) => theme.colorBase500};\n`;\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.8125 15.625H17.1875V3.125C17.1875 2.95924 17.1217 2.80027 17.0044 2.68306C16.8872 2.56585 16.7283 2.5 16.5625 2.5H12.1875C12.0217 2.5 11.8628 2.56585 11.7456 2.68306C11.6283 2.80027 11.5625 2.95924 11.5625 3.125V6.25H7.8125C7.64674 6.25 7.48777 6.31585 7.37056 6.43306C7.25335 6.55027 7.1875 6.70924 7.1875 6.875V10H3.4375C3.27174 10 3.11277 10.0658 2.99556 10.1831C2.87835 10.3003 2.8125 10.4592 2.8125 10.625V15.625H2.1875C2.02174 15.625 1.86277 15.6908 1.74556 15.8081C1.62835 15.9253 1.5625 16.0842 1.5625 16.25C1.5625 16.4158 1.62835 16.5747 1.74556 16.6919C1.86277 16.8092 2.02174 16.875 2.1875 16.875H17.8125C17.9783 16.875 18.1372 16.8092 18.2544 16.6919C18.3717 16.5747 18.4375 16.4158 18.4375 16.25C18.4375 16.0842 18.3717 15.9253 18.2544 15.8081C18.1372 15.6908 17.9783 15.625 17.8125 15.625ZM8.4375 7.5H11.5625V15.625H8.4375V7.5ZM4.0625 11.25H7.1875V15.625H4.0625V11.25Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M17.5 15.625H3.125V12.7812L7.53125 8.92969L12.125 12.375C12.24 12.4614 12.3813 12.5055 12.5251 12.4998C12.6688 12.4941 12.8062 12.439 12.9141 12.3438L17.9141 7.96875C17.9756 7.91437 18.0259 7.84841 18.0619 7.77461C18.098 7.70082 18.1192 7.62065 18.1242 7.53867C18.1293 7.45669 18.1182 7.37452 18.0915 7.29684C18.0648 7.21916 18.0231 7.14749 17.9688 7.08594C17.9144 7.02438 17.8484 6.97414 17.7746 6.93807C17.7008 6.90201 17.6206 6.88084 17.5387 6.87576C17.4567 6.87068 17.3745 6.8818 17.2968 6.90848C17.2192 6.93516 17.1475 6.97687 17.0859 7.03125L12.4688 11.0703L7.875 7.625C7.75997 7.5386 7.61866 7.49453 7.47491 7.50022C7.33116 7.50591 7.19377 7.56102 7.08594 7.65625L3.125 11.125V3.75C3.125 3.58424 3.05915 3.42527 2.94194 3.30806C2.82473 3.19085 2.66576 3.125 2.5 3.125C2.33424 3.125 2.17527 3.19085 2.05806 3.30806C1.94085 3.42527 1.875 3.58424 1.875 3.75V16.25C1.875 16.4158 1.94085 16.5747 2.05806 16.6919C2.17527 16.8092 2.33424 16.875 2.5 16.875H17.5C17.6658 16.875 17.8247 16.8092 17.9419 16.6919C18.0592 16.5747 18.125 16.4158 18.125 16.25C18.125 16.0842 18.0592 15.9253 17.9419 15.8081C17.8247 15.6908 17.6658 15.625 17.5 15.625Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M8.1251 15C7.95944 14.9977 7.80061 14.9336 7.67979 14.8203L3.30479 10.4453C3.20512 10.3239 3.15419 10.1697 3.1619 10.0128C3.1696 9.85587 3.2354 9.70744 3.34648 9.59636C3.45756 9.48527 3.606 9.41948 3.7629 9.41177C3.91981 9.40407 4.07398 9.455 4.19541 9.55466L8.1251 13.4922L16.4298 5.17966C16.5512 5.08 16.7054 5.02907 16.8623 5.03677C17.0192 5.04448 17.1676 5.11027 17.2787 5.22136C17.3898 5.33244 17.4556 5.48087 17.4633 5.63778C17.471 5.79469 17.4201 5.94885 17.3204 6.07029L8.57041 14.8203C8.44958 14.9336 8.29075 14.9977 8.1251 15Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M12.157 3.79383C12.0751 3.61284 11.8938 3.49752 11.6952 3.50004C11.4966 3.50256 11.3183 3.62243 11.2409 3.80543L8.43641 10.4442L7.29719 8.11376C7.21401 7.9436 7.04184 7.83505 6.85245 7.83336C6.66307 7.83167 6.48898 7.93713 6.40278 8.10577L1.97276 16.7724C1.89353 16.9274 1.90062 17.1125 1.99148 17.261C2.08234 17.4095 2.24389 17.5 2.41797 17.5H11.0846C11.0858 17.5 11.087 17.5 11.0882 17.5H17.5856C17.7555 17.5 17.9137 17.4138 18.0058 17.271C18.0979 17.1283 18.1112 16.9486 18.0411 16.7938L12.157 3.79383ZM11.3968 16.5H16.8105L11.7173 5.24746L9.01875 11.6354L11.3968 16.5ZM8.50275 12.8569L10.2837 16.5H6.96373L8.50275 12.8569ZM7.92042 11.6656L5.87815 16.5H3.23508L6.83801 9.45142L7.92042 11.6656Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M15.3536 4.64645C15.5488 4.84171 15.5488 5.15829 15.3536 5.35355L5.35355 15.3536C5.15829 15.5488 4.84171 15.5488 4.64645 15.3536C4.45118 15.1583 4.45118 14.8417 4.64645 14.6464L14.6464 4.64645C14.8417 4.45118 15.1583 4.45118 15.3536 4.64645ZM6.5 5.5C5.94772 5.5 5.5 5.94772 5.5 6.5C5.5 7.05228 5.94772 7.5 6.5 7.5C7.05228 7.5 7.5 7.05228 7.5 6.5C7.5 5.94772 7.05228 5.5 6.5 5.5ZM4.5 6.5C4.5 5.39543 5.39543 4.5 6.5 4.5C7.60457 4.5 8.5 5.39543 8.5 6.5C8.5 7.60457 7.60457 8.5 6.5 8.5C5.39543 8.5 4.5 7.60457 4.5 6.5ZM12.5 13.5C12.5 12.9477 12.9477 12.5 13.5 12.5C14.0523 12.5 14.5 12.9477 14.5 13.5C14.5 14.0523 14.0523 14.5 13.5 14.5C12.9477 14.5 12.5 14.0523 12.5 13.5ZM13.5 11.5C12.3954 11.5 11.5 12.3954 11.5 13.5C11.5 14.6046 12.3954 15.5 13.5 15.5C14.6046 15.5 15.5 14.6046 15.5 13.5C15.5 12.3954 14.6046 11.5 13.5 11.5Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M11.6875 3.125C11.6875 2.84886 11.9114 2.625 12.1875 2.625H16.5625C16.8386 2.625 17.0625 2.84886 17.0625 3.125V16.25C17.0625 16.5261 16.8386 16.75 16.5625 16.75H14.4464C14.4458 16.75 14.4451 16.75 14.4444 16.75H7.88346C7.86028 16.7533 7.83659 16.755 7.8125 16.755C7.78841 16.755 7.76472 16.7533 7.74154 16.75H3.4375C3.16136 16.75 2.9375 16.5261 2.9375 16.25V12.4372V11.4997V6.81216C2.9375 6.53602 3.16136 6.31216 3.4375 6.31216H7.3125V5.875C7.3125 5.59886 7.53636 5.375 7.8125 5.375H11.6875V3.125ZM7.3125 7.31216H3.9375V10.9997H7.3125V7.31216ZM7.3125 11.9997H3.9375V12.4372V15.75H7.3125V11.9997ZM8.3125 15.75V11.4997V6.81216V6.375H11.6875V15.75H8.3125ZM12.6875 15.75V5.875V3.625H16.0625V15.75H12.6875Z\" fill=\"currentColor\"/>\n</svg>\n","<svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<path d=\"M10.1425 13L13.4871 7H6.79785L10.1425 13Z\" fill=\"currentColor\"/>\n</svg>\n","import ChartBarIcon from \"./icons/ChartBar.svg\";\nimport ChartLineIcon from \"./icons/ChartLine.svg\";\nimport CheckIcon from \"./icons/Check.svg\";\nimport CombinedIcon from \"./icons/Combined.svg\";\nimport PercentageIcon from \"./icons/Percentage.svg\";\nimport StackedIcon from \"./icons/Stacked.svg\";\nimport TriangleDownIcon from \"./icons/TriangleDown.svg\";\n\nexport const ICON_MAP = {\n  chart_bar: ChartBarIcon,\n  chart_line: ChartLineIcon,\n  check: CheckIcon,\n  combined: CombinedIcon,\n  percentage: PercentageIcon,\n  stacked: StackedIcon,\n  triangle_down: TriangleDownIcon,\n} as const;\n","import { ICON_MAP } from \"./IconMap\";\n\ntype IconType = keyof typeof ICON_MAP;\n\ntype Props = React.SVGProps<SVGSVGElement> & {\n  type: IconType;\n};\n\nexport function Icon({ type, ...svgProps }: Props): JSX.Element {\n  const Component = ICON_MAP[type];\n  return <Component {...svgProps} />;\n}\n","import { forwardRef } from \"react\";\nimport styled, { css, DefaultTheme, useTheme } from \"styled-components\";\n\nexport const buttonStyling = css`\n    --color: var(--button-normal-color);\n    --backgroundColor: var(--button-normal-backgroundColor);\n  \n    outline: none;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    transition-property: background-color, border-color;\n    transition-duration: 0.2s;\n    transition-timing-function: linear;\n    border-radius: ${({ theme }) => theme.borderRadius500};\n    box-sizing: border-box;\n    height: var(--icon-button-height, 20px);\n    width: var(--icon-button-width, 20px);\n    padding: var(--icon-button-padding, 2px);\n    color: var(--color);\n    background-color: var(--background);\n    border: 1px solid var(--background);\n  \n    :focus,\n    :hover,\n    :active,\n    .active {\n      cursor: pointer;\n    }\n  \n    :focus {\n      border-color: ${({ theme }) => theme.colorPrimary500};\n      outline: ${({ theme }) => theme.effectFocusOutline};\n  \n      --background: var(--button-focus-backgroundColor);\n      --color: var(--button-focus-color);\n    }\n  \n    &:disabled {\n      cursor: default;\n  \n      --color: var(--button-disabled-color);\n      --background: var(--button-disabled-backgroundColor);\n    }\n  \n    &.active,\n    &:active:not([data-dragging], [disabled]) {\n      --background: var(--button-active-backgroundColor);\n      --color: var(--button-active-color);\n    }\n  \n    :hover:not([data-disabled][data-dragging], [disabled]) {\n      --background: var(--button-hover-backgroundColor);\n      --color: var(--button-hover-color);\n      border: none;\n    }\n  \n    & svg {\n      flex: 0 0 var(--icon-button-icon-size);\n      width: var(--icon-button-icon-size);\n      height: var(--icon-button-icon-size);\n    }\n  `;\n\ntype IconButtonColorSet = {\n  color: string;\n  backgroundColor: string;\n};\n\ntype IconButtonTheme = {\n  normal: IconButtonColorSet;\n  hover: IconButtonColorSet;\n  active: IconButtonColorSet;\n  focus: IconButtonColorSet;\n  disabled: IconButtonColorSet;\n};\n\nfunction useIconButtonTheme(theme: DefaultTheme): IconButtonTheme {\n  return {\n    normal: {\n      color: theme.colorBase800,\n      backgroundColor: \"transparent\",\n    },\n    hover: {\n      color: theme.colorBase800,\n      backgroundColor: theme.colorBase300,\n    },\n    active: {\n      color: theme.colorBackground,\n      backgroundColor: theme.colorBase600,\n    },\n    focus: {\n      color: theme.colorBase600,\n      backgroundColor: theme.colorBackground,\n    },\n    disabled: {\n      color: theme.colorBase500,\n      backgroundColor: \"transparent\",\n    },\n  };\n}\n\nconst StyledButton = styled.button`\n  ${buttonStyling}\n`;\n\nconst buttonSize = {\n  padding: \"6px\",\n  width: \"32px\",\n  height: \"32px\",\n  iconSize: \"20px\",\n};\n\nexport type Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  active?: boolean;\n};\n\nexport const IconButton = forwardRef(function IconButton(\n  props: Props,\n  ref: React.ForwardedRef<HTMLButtonElement>,\n): JSX.Element {\n  const {\n    className = \"\",\n    style = {},\n    active = false,\n    children,\n    ...otherProps\n  } = props;\n\n  const theme = useTheme();\n  const iconButtonTheme = useIconButtonTheme(theme);\n\n  const newStyle = {\n    ...style,\n    \"--icon-button-padding\": buttonSize.padding,\n    \"--icon-button-width\": buttonSize.width,\n    \"--icon-button-height\": buttonSize.height,\n    \"--icon-button-icon-size\": buttonSize.iconSize,\n\n    \"--button-normal-color\": iconButtonTheme.normal.color,\n    \"--button-normal-backgroundColor\": iconButtonTheme.normal.backgroundColor,\n    \"--button-hover-color\": iconButtonTheme.hover.color,\n    \"--button-hover-backgroundColor\": iconButtonTheme.hover.backgroundColor,\n    \"--button-active-color\": iconButtonTheme.active.color,\n    \"--button-active-backgroundColor\": iconButtonTheme.active.backgroundColor,\n    \"--button-focus-color\": iconButtonTheme.focus.color,\n    \"--button-focus-backgroundColor\": iconButtonTheme.focus.backgroundColor,\n    \"--button-disabled-color\": iconButtonTheme.disabled.color,\n    \"--button-disabled-backgroundColor\":\n      iconButtonTheme.disabled.backgroundColor,\n  };\n\n  const elementProps = {\n    ...otherProps,\n    ref,\n    style: newStyle,\n    className: active ? `${className} active` : className,\n    \"aria-pressed\": active,\n  };\n\n  return <StyledButton {...elementProps}>{children}</StyledButton>;\n});\n","/**\n * Strips all falsy values from an array.\n */\nexport function compact<T>(\n  items: Array<T | false | undefined | null | 0 | \"\">,\n): Array<T> {\n  return items.filter(Boolean) as Array<T>;\n}\n","import type { Timeseries } from \"../providerTypes\";\n\n/**\n * Return a list of keys whose values vary across series (or don't exist\n * everywhere).\n */\nexport function findUniqueKeys(timeseriesData: Array<Timeseries>) {\n  let constantKeys: Set<string> | undefined;\n  let detectedValues: Record<string, string> = {};\n\n  for (const timeseries of timeseriesData) {\n    const keys = Object.keys(timeseries.labels);\n\n    if (constantKeys === undefined) {\n      constantKeys = new Set(keys);\n      detectedValues = { ...timeseries.labels };\n    } else {\n      for (const key of keys) {\n        if (detectedValues[key] !== timeseries.labels[key]) {\n          constantKeys.delete(key);\n        }\n\n        detectedValues[key] = timeseries.labels[key] || \"\";\n      }\n    }\n  }\n\n  const allKeys = Object.keys(detectedValues);\n  return allKeys.filter(\n    (key) => constantKeys === undefined || constantKeys.has(key) === false,\n  );\n}\n","export function getShapeListColor(colors: Array<string>, listIndex: number) {\n  return colors[listIndex % colors.length];\n}\n","/**\n * Returns the input value.\n *\n * A function that only returns its input is also known as the identity\n * function.\n */\nexport function identity<T>(input: T): T {\n  return input;\n}\n","/**\n * Taken from: https://github.com/gregberge/react-merge-refs\n *\n * Copyright (c) 2020 Greg Bergé\n *\n * @license MIT\n */\nexport function mergeRefs<T extends HTMLElement>(\n  refs: Array<React.MutableRefObject<T> | React.LegacyRef<T>>,\n): React.RefCallback<T> {\n  return (value) => {\n    for (const ref of refs) {\n      if (typeof ref === \"function\") {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    }\n  };\n}\n","export function noop() {}\n","export function preventDefault(event: Event | React.SyntheticEvent) {\n  event.preventDefault();\n}\n","/**\n * Sorts an array ascending by priority.\n *\n * *Warning:* As this function uses `Array#sort()` it also mutates the input\n * array.\n */\nexport function sortBy<T, U extends number | string>(\n  array: Array<T>,\n  getPriorityFn: (item: T) => U,\n  reverse = false,\n) {\n  return array.sort((a, b) => {\n    const priorityA = getPriorityFn(a);\n    const priorityB = getPriorityFn(b);\n    if (priorityA < priorityB) {\n      return reverse === true ? 1 : -1;\n    } else if (priorityA > priorityB) {\n      return reverse === true ? -1 : 1;\n    } else {\n      return 0;\n    }\n  });\n}\n","import type { Timestamp } from \"../providerTypes\";\n\nexport const dateToSeconds = (date: Date): number => date.getTime() / 1000;\n\nexport const secondsToTimestamp = (seconds: number): Timestamp =>\n  new Date(seconds * 1000).toISOString();\n\nexport const timestampToDate = (timestamp: Timestamp): Date =>\n  new Date(timestamp);\n\nexport const timestampToSeconds = (timestamp: Timestamp): number =>\n  new Date(timestamp).getTime() / 1000;\n\nexport const timestampToMs = (value: Timestamp) => {\n  const date = new Date(value);\n  return date.getTime();\n};\n","const os =\n  typeof navigator === \"undefined\"\n    ? \"\"\n    : navigator.platform.match(/mac|win|linux/i)?.[0]?.toLowerCase();\n\nexport const isMac = os === \"mac\";\n","import {\n  ButtonGroup,\n  ControlsContainer,\n  ControlsGroup,\n  ControlsSet,\n  ControlsSetLabel,\n  Icon,\n  IconButton,\n} from \"../BaseComponents\";\nimport type { GraphType, StackingType } from \"../providerTypes\";\nimport { preventDefault } from \"../utils\";\n\nexport type ChartControlsProps = {\n  graphType: GraphType;\n  onChangeGraphType?: (graphType: GraphType) => void;\n  onChangeStackingType?: (stackingType: StackingType) => void;\n  stackingControlsShown: boolean;\n  stackingType: StackingType;\n};\n\n/**\n * Control what kind fo chart you're viewing (and more)\n */\nexport function ChartControls({\n  graphType,\n  onChangeGraphType,\n  onChangeStackingType,\n  stackingControlsShown,\n  stackingType,\n}: ChartControlsProps): JSX.Element | null {\n  if (!onChangeGraphType && !onChangeStackingType) {\n    return null;\n  }\n\n  return (\n    <ControlsContainer>\n      <ControlsGroup key=\"core\">\n        {onChangeGraphType && (\n          <ControlsSet>\n            <ControlsSetLabel>Type</ControlsSetLabel>\n            <ButtonGroup>\n              <IconButton\n                active={graphType === \"line\"}\n                aria-label=\"Line chart\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeGraphType(\"line\");\n                }}\n              >\n                <Icon type=\"chart_line\" />\n              </IconButton>\n\n              <IconButton\n                active={graphType === \"bar\"}\n                aria-label=\"Bar chart\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeGraphType(\"bar\");\n                }}\n              >\n                <Icon type=\"chart_bar\" />\n              </IconButton>\n            </ButtonGroup>\n          </ControlsSet>\n        )}\n\n        {stackingControlsShown && onChangeStackingType && (\n          <ControlsSet>\n            <ControlsSetLabel>Stacking</ControlsSetLabel>\n            <ButtonGroup>\n              <IconButton\n                active={stackingType === \"none\"}\n                aria-label=\"Combined/default\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"none\");\n                }}\n              >\n                <Icon type=\"combined\" />\n              </IconButton>\n\n              <IconButton\n                active={stackingType === \"stacked\"}\n                aria-label=\"Stacked\"\n                className=\"iconButton\"\n                type=\"button\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"stacked\");\n                }}\n              >\n                <Icon type=\"stacked\" />\n              </IconButton>\n\n              <IconButton\n                active={stackingType === \"percentage\"}\n                aria-label=\"Stacked/percentage\"\n                className=\"iconButton\"\n                onClick={(event) => {\n                  preventDefault(event);\n                  onChangeStackingType(\"percentage\");\n                }}\n              >\n                <Icon type=\"percentage\" />\n              </IconButton>\n            </ButtonGroup>\n          </ControlsSet>\n        )}\n      </ControlsGroup>\n      <ControlsGroup key=\"meta\" />\n    </ControlsContainer>\n  );\n}\n","import { createContext } from \"react\";\n\nexport type ChartSizeContextValue = {\n  width: number;\n  height: number;\n  xMax: number;\n  yMax: number;\n  marginTop: number;\n  marginRight: number;\n  marginBottom: number;\n  marginLeft: number;\n};\n\n/**\n * Context for tracking the size of the chart.\n */\nexport const ChartSizeContext = createContext<ChartSizeContextValue>({\n  width: 0,\n  height: 0,\n  xMax: 0,\n  yMax: 0,\n  marginTop: 0,\n  marginRight: 0,\n  marginBottom: 0,\n  marginLeft: 0,\n});\n","import { useCallback, useRef } from \"react\";\n\nconst noDeps: Array<void> = [];\n\nexport function useHandler<Handler extends Function>(\n  handler: Handler,\n): Handler {\n  const handlerRef = useRef(handler);\n  handlerRef.current = handler;\n\n  // @ts-ignore\n  // rome-ignore lint/nursery/useHookAtTopLevel: https://github.com/rome/tools/issues/4483\n  return useCallback((...args) => handlerRef.current(...args), noDeps);\n}\n","import styled from \"styled-components\";\nimport { useRef, useState, useEffect } from \"react\";\n\nimport { Icon } from \"../BaseComponents\";\nimport { useHandler } from \"./useHandler\";\n\ntype Options = {\n  /**\n   * Default height (assumed to be in pixels).\n   */\n  defaultHeight: number;\n};\n\ntype Result<T> = {\n  /**\n   * Component you should include in your output to allow the user to toggle\n   * the expanded state, if relevant.\n   */\n  expandButton?: JSX.Element;\n\n  /**\n   * Component you may need to include in your output to display the gradient\n   * to indicate the collapsed state, if relevant.\n   */\n  gradient?: JSX.Element;\n\n  /**\n   * Whether the expandable container is currently expanded.\n   */\n  isExpanded: boolean;\n\n  /**\n   * Scroll event listener to attach to the container.\n   */\n  onScroll: (event: React.UIEvent<T, UIEvent>) => void;\n\n  /**\n   * Ref to attach to the container.\n   */\n  ref: React.RefCallback<T>;\n};\n\n/**\n * Implements all the logic needed to create an expandable container.\n */\nexport function useExpandable<T extends HTMLElement = HTMLDivElement>({\n  defaultHeight,\n}: Options): Result<T> {\n  const ref = useRef<T | null>(null);\n\n  const [showExpandButton, setShowExpandButton] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [showGradient, setShowGradient] = useState(false);\n\n  const update = useHandler((element: Element) => {\n    const { scrollTop, scrollHeight, clientHeight } = element;\n\n    if (scrollHeight <= defaultHeight) {\n      setShowExpandButton(false);\n      setShowGradient(false);\n    } else {\n      setShowExpandButton(true);\n      setShowGradient(scrollHeight - scrollTop >= clientHeight);\n    }\n  });\n\n  // This calls update function with a tiny delay. This fixes\n  // errors with the ResizeObserver loop taking too long\n  const asyncUpdate = useHandler((element: Element) => {\n    setTimeout(() => {\n      if (ref.current !== element) {\n        return;\n      }\n\n      update(element);\n    }, 0);\n  });\n\n  useEffect(() => {\n    return () => {\n      if (ref.current) {\n        unsubscribeFromNode(ref.current, asyncUpdate);\n        ref.current = null;\n      }\n    };\n  }, [asyncUpdate]);\n\n  const setRef = useHandler((node: T | null) => {\n    if (ref.current === node) {\n      return;\n    }\n\n    if (ref.current) {\n      unsubscribeFromNode(ref.current, asyncUpdate);\n    }\n\n    if (node) {\n      subscribeToNode(node, asyncUpdate);\n      update(node);\n    }\n\n    ref.current = node;\n  });\n\n  const onClickExpand = useHandler(() => {\n    setIsExpanded(!isExpanded);\n  });\n\n  const onScroll = useHandler((event: React.UIEvent<T, UIEvent>) => {\n    asyncUpdate(event.currentTarget);\n  });\n\n  return {\n    expandButton: showExpandButton ? (\n      <Expand onClick={onClickExpand} revert={isExpanded}>\n        <Icon type=\"triangle_down\" />\n      </Expand>\n    ) : undefined,\n    gradient: showGradient ? (\n      <GradientContainer>\n        <Gradient />\n      </GradientContainer>\n    ) : undefined,\n    isExpanded: isExpanded || !showExpandButton,\n    onScroll,\n    ref: setRef,\n  };\n}\n\ntype Listener = (node: Element) => void;\n\nconst listenerMap: WeakMap<Element, Set<Listener>> = new WeakMap();\n\nlet observer: ResizeObserver | undefined;\n\nfunction observerCallback(entries: ResizeObserverEntry[]) {\n  for (const entry of entries) {\n    const listeners = listenerMap.get(entry.target);\n    if (listeners) {\n      for (const listener of listeners) {\n        listener(entry.target);\n      }\n    }\n  }\n}\n\nfunction subscribeToNode(node: Element, listener: Listener) {\n  const listeners = listenerMap.get(node);\n  if (listeners) {\n    listeners.add(listener);\n  } else {\n    listenerMap.set(node, new Set([listener]));\n\n    if (!observer) {\n      observer = new ResizeObserver(observerCallback);\n    }\n\n    observer.observe(node);\n  }\n}\n\nfunction unsubscribeFromNode(node: Element, listener: Listener) {\n  const listeners = listenerMap.get(node);\n\n  if (listeners) {\n    listeners.delete(listener);\n\n    if (listeners.size === 0) {\n      listenerMap.delete(node);\n\n      observer?.unobserve(node);\n    }\n  }\n}\n\nconst Expand = styled.div<{ revert: boolean }>`\n  color: #4797ff;\n  width: 24px;\n  height: 24px;\n  border-radius: 6px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transform: ${({ revert }) => (revert ? \"rotate(180deg)\" : \"none\")};\n\n  &:hover {\n    cursor: pointer;\n    background: rgba(71, 151, 255, 30%);\n  }\n`;\n\nconst Gradient = styled.div`\n  width: 100%;\n  position: absolute;\n  bottom: 0;\n  height: 39px;\n  background-image: linear-gradient(\n    to bottom,\n    transparent,\n    rgb(255 255 255 / 75%) 50%\n  );\n  border-bottom-right-radius: 6px;\n  pointer-events: none;\n`;\n\n// The container is sticky, but zero height to prevent the gradient itself\n// from reserving any space.\nconst GradientContainer = styled.div`\n  bottom: 0;\n  height: 0;\n  position: sticky;\n  width: 100%;\n`;\n","import { useReducer } from \"react\";\n\nconst reducer = (counter: number): number => counter + 1;\n\nexport function useForceUpdate(): () => void {\n  const [, forceUpdate] = useReducer(reducer, 0);\n\n  return forceUpdate;\n}\n","import { useEffect, useState } from \"react\";\n\nconst noEntries: Array<IntersectionObserverEntry> = [];\n\nexport function useIntersectionObserver(\n  ref: React.RefObject<HTMLElement>,\n  options?: IntersectionObserverInit,\n) {\n  const [intersections, setIntersections] = useState(noEntries);\n\n  const element = ref.current;\n  useEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(setIntersections, options);\n    observer.observe(element);\n    return () => {\n      observer.disconnect();\n      setIntersections(noEntries);\n    };\n  }, [element, options]);\n\n  return intersections;\n}\n","import { useLayoutEffect, useMemo, useState } from \"react\";\n\ntype Dimensions = { width: number; height: number };\n\nconst defaultDimensions: Dimensions = {\n  width: 0,\n  height: 0,\n};\n\nexport function useMeasure<T extends HTMLElement>(): [\n  React.RefCallback<T>,\n  Dimensions,\n] {\n  const [element, setElement] = useState<T | null>(null);\n  const [rect, setRect] = useState(defaultDimensions);\n\n  const observer = useMemo(\n    () =>\n      new window.ResizeObserver((entries) => {\n        const entry = entries[0];\n        if (entry) {\n          const { width, height } = entry.contentRect;\n          setRect({ width, height });\n        }\n      }),\n    [],\n  );\n\n  useLayoutEffect(() => {\n    if (!element) {\n      return;\n    }\n\n    observer.observe(element);\n    return () => {\n      observer.disconnect();\n    };\n  }, [element, observer]);\n\n  return [setElement, rect];\n}\n","import { debounce } from \"throttle-debounce\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\n\nimport { ChartSizeContext, ChartSizeContextValue } from \"./ChartSizeContext\";\nimport { mergeRefs } from \"../utils\";\nimport { useIntersectionObserver, useMeasure } from \"../hooks\";\n\ntype Props = {\n  children: React.ReactNode;\n  className?: string;\n  // By default the measured height will be used unless this value is specified\n  // This is useful for charts that contain more than just the chart (but also a legend, for example)\n  overrideHeight?: number;\n  marginTop?: number;\n  marginLeft?: number;\n  marginRight?: number;\n  marginBottom?: number;\n};\n\nexport function ChartSizeContainerProvider({\n  children,\n  className,\n  overrideHeight,\n  marginTop = 0,\n  marginRight = 0,\n  marginBottom = 0,\n  marginLeft = 0,\n}: Props) {\n  const [measureRef, { width, height: measuredHeight }] =\n    useMeasure<HTMLDivElement>();\n  const intersectionRef = useRef<HTMLDivElement>(null);\n  const ref = mergeRefs([measureRef, intersectionRef]);\n\n  const intersections = useIntersectionObserver(\n    intersectionRef,\n    intersectionOptions,\n  );\n  const [value, setValue] = useState<ChartSizeContextValue>({\n    xMax: 0,\n    yMax: 0,\n    width: 0,\n    height: 0,\n    marginTop,\n    marginRight,\n    marginBottom,\n    marginLeft,\n  });\n\n  const height = overrideHeight ?? measuredHeight;\n  const updateValue = useMemo(\n    () =>\n      debounce(100, (width: number, height: number) =>\n        setValue({\n          xMax: width - marginLeft - marginRight,\n          yMax: height - marginTop - marginBottom,\n          width,\n          height,\n          marginTop,\n          marginRight,\n          marginBottom,\n          marginLeft,\n        }),\n      ),\n    [marginTop, marginRight, marginBottom, marginLeft],\n  );\n\n  useEffect(() => {\n    updateValue(width, height);\n  }, [width, height, updateValue]);\n\n  return (\n    <div ref={ref} className={className}>\n      {value.width > 0 &&\n      value.height > 0 &&\n      intersections.some((intersection) => intersection.isIntersecting) ? (\n        <ChartSizeContext.Provider value={value}>\n          {children}\n        </ChartSizeContext.Provider>\n      ) : (\n        <ChartSkeleton height={height} />\n      )}\n    </div>\n  );\n}\n\nfunction ChartSkeleton({ height }: { height: number }) {\n  return <div style={{ height }} />;\n}\n\nconst intersectionOptions = {\n  root: null,\n  rootMargin: \"0px\",\n  threshold: 0,\n};\n","import { Area as VisxArea } from \"@visx/shape\";\nimport { memo, useId } from \"react\";\nimport { Threshold } from \"@visx/threshold\";\n\nimport type { Area, AreaPoint } from \"../../Mondrian\";\nimport type { CommonShapeProps } from \"./types\";\n\ntype Props<P> = CommonShapeProps & {\n  area: Area<P>;\n};\n\nexport const AreaShape = memo(function AreaShape<P>({\n  anyFocused,\n  area,\n  color,\n  focused,\n  scales,\n}: Props<P>): JSX.Element {\n  const id = useId();\n  const gradientId = `line-${id}`;\n  const fillColor = `url(#${gradientId})`;\n\n  const getX = (point: { x: number }) => scales.xScale(point.x);\n  const getY0 = (point: { yMin: number }) => scales.yScale(point.yMin);\n  const getY1 = (point: { yMax: number }) => scales.yScale(point.yMax);\n\n  return (\n    <g opacity={focused || !anyFocused ? 1 : 0.2}>\n      <defs>\n        <linearGradient id={gradientId}>\n          <stop offset=\"0%\" stopColor={color} stopOpacity={0.15} />\n          <stop offset=\"80%\" stopColor={color} stopOpacity={0.03} />\n        </linearGradient>\n      </defs>\n      <Threshold<AreaPoint<P>>\n        id={id}\n        data={area.points}\n        x={getX}\n        y0={getY0}\n        y1={getY1}\n        clipAboveTo={0}\n        clipBelowTo={getY1}\n        aboveAreaProps={{ fill: fillColor }}\n        // Keep this one around to spot any incorrect threshold computations.\n        belowAreaProps={{ fill: \"violet\" }}\n      />\n      <VisxArea\n        data={area.points}\n        x={getX}\n        y0={getY0}\n        y1={getY1}\n        stroke={color}\n        strokeWidth={focused ? 1.5 : 1}\n        fill={fillColor}\n      />\n    </g>\n  );\n});\n","import { Area } from \"@visx/shape\";\nimport { memo, useId } from \"react\";\nimport { Threshold } from \"@visx/threshold\";\n\nimport type { CommonShapeProps } from \"./types\";\nimport type { Line, Point } from \"../../Mondrian\";\n\ntype Props<P> = CommonShapeProps & {\n  line: Line<P>;\n};\n\nexport const LineShape = memo(function LineShape<P>({\n  anyFocused,\n  color,\n  focused,\n  line,\n  scales,\n}: Props<P>): JSX.Element {\n  const id = useId();\n  const gradientId = `line-${id}`;\n  const fillColor = `url(#${gradientId})`;\n\n  const getX = (point: { x: number }) => scales.xScale(point.x);\n  const getY = (point: { y: number }) => scales.yScale(point.y);\n\n  return (\n    <g opacity={focused || !anyFocused ? 1 : 0.2}>\n      <defs>\n        <linearGradient id={gradientId}>\n          <stop offset=\"0%\" stopColor={color} stopOpacity={0.15} />\n          <stop offset=\"23%\" stopColor={color} stopOpacity={0.03} />\n        </linearGradient>\n      </defs>\n      <Threshold<Point<P>>\n        id={id}\n        data={line.points}\n        x={getX}\n        y0={getY}\n        y1={scales.yScale(0)}\n        clipAboveTo={0}\n        clipBelowTo={scales.yMax}\n        aboveAreaProps={{ fill: fillColor }}\n        // Keep this one around to spot any incorrect threshold computations.\n        belowAreaProps={{ fill: \"violet\" }}\n      />\n      <Area\n        data={line.points}\n        x={getX}\n        y={getY}\n        stroke={color}\n        strokeWidth={focused ? 1.5 : 1}\n        fill={fillColor}\n      />\n    </g>\n  );\n});\n","import { memo } from \"react\";\n\nimport type { CommonShapeProps } from \"./types\";\nimport type { Point } from \"../../Mondrian\";\n\ntype Props<P> = CommonShapeProps & {\n  point: Point<P>;\n};\n\nexport const PointShape = memo(function PointShape<P>({\n  color,\n  focused,\n  point,\n  scales,\n}: Props<P>): JSX.Element {\n  return (\n    <circle\n      cx={scales.xScale(point.x)}\n      cy={scales.yScale(point.y)}\n      r={focused ? 2 : 1}\n      stroke={color}\n      fill={color}\n    />\n  );\n});\n","import { memo } from \"react\";\n\nimport type { CommonShapeProps } from \"./types\";\nimport type { Rectangle } from \"../../Mondrian\";\n\ntype Props<P> = CommonShapeProps & {\n  rectangle: Rectangle<P>;\n};\n\nexport const RectangleShape = memo(function RectangleShape<P>({\n  anyFocused,\n  color,\n  focused,\n  rectangle,\n  scales: { xMax, yMax },\n}: Props<P>): JSX.Element {\n  const height = rectangle.height * yMax;\n\n  return (\n    <rect\n      x={rectangle.x * xMax}\n      y={yMax - rectangle.y * yMax - height}\n      width={rectangle.width * xMax}\n      height={height}\n      stroke={color}\n      fill={color}\n      fillOpacity={0.1}\n      opacity={focused || !anyFocused ? 1 : 0.2}\n    />\n  );\n});\n","import { AreaShape } from \"./AreaShape\";\nimport type { CommonShapeProps } from \"./types\";\nimport { LineShape } from \"./LineShape\";\nimport { PointShape } from \"./PointShape\";\nimport { RectangleShape } from \"./RectangleShape\";\nimport type { Shape } from \"../../Mondrian\";\n\ntype Props<P> = CommonShapeProps & { shape: Shape<P> };\n\nexport function ChartShape<P>({ shape, ...props }: Props<P>): JSX.Element {\n  switch (shape.type) {\n    case \"area\":\n      return <AreaShape area={shape} {...props} />;\n\n    case \"line\":\n      return <LineShape line={shape} {...props} />;\n\n    case \"point\":\n      return <PointShape point={shape} {...props} />;\n\n    case \"rectangle\":\n      return <RectangleShape rectangle={shape} {...props} />;\n  }\n}\n","import type { AbstractChart, ShapeList } from \"../Mondrian\";\nimport { ChartShape } from \"./ChartShape\";\nimport { getShapeListColor } from \"../utils\";\nimport type { Scales } from \"./types\";\n\ntype Props<S, P> = {\n  chart: AbstractChart<S, P>;\n  colors: Array<string>;\n  focusedShapeList: ShapeList<S, P> | null;\n  scales: Scales;\n};\n\nexport function ChartContent<S, P>({\n  chart,\n  colors,\n  focusedShapeList,\n  scales,\n}: Props<S, P>): JSX.Element {\n  return (\n    <>\n      {chart.shapeLists.flatMap((shapeList, listIndex) =>\n        shapeList.shapes.map((shape, shapeIndex) => (\n          <ChartShape\n            anyFocused={!!focusedShapeList}\n            color={getShapeListColor(colors, listIndex)}\n            focused={shapeList === focusedShapeList}\n            key={`${listIndex}-${shapeIndex}`}\n            scales={scales}\n            shape={shape}\n          />\n        )),\n      )}\n    </>\n  );\n}\n","import { useTheme } from \"styled-components\";\nimport { utcFormat } from \"d3-time-format\";\n\nimport type { Axis } from \"../../Mondrian\";\nimport type { Scales } from \"../types\";\n\nconst LABEL_OFFSET = 8;\n\ntype Props = {\n  scales: Scales;\n  strokeColor: string;\n  strokeDasharray?: string;\n  ticks: Array<number>;\n  xAxis: Axis;\n};\n\nexport function BottomAxis({\n  scales: { xMax, xScale, yMax },\n  strokeColor,\n  strokeDasharray,\n  ticks,\n  xAxis: { maxValue, minValue },\n}: Props) {\n  const {\n    colorBase500,\n    fontAxisFontSize,\n    fontAxisFontFamily,\n    fontAxisFontStyle,\n    fontAxisFontWeight,\n    fontAxisLetterSpacing,\n  } = useTheme();\n\n  const formatter = getTimeFormatter(ticks);\n\n  return (\n    <g transform={`translate(0, ${yMax})`}>\n      <line\n        x1={0}\n        y1={0}\n        x2={xMax}\n        y2={0}\n        stroke={strokeColor}\n        strokeDasharray={strokeDasharray}\n      />\n\n      {ticks.map((time, index) => (\n        <text\n          // rome-ignore lint/suspicious/noArrayIndexKey: no better key available\n          key={index}\n          x={xScale((time - minValue) / (maxValue - minValue))}\n          y={fontAxisFontSize}\n          dy={LABEL_OFFSET}\n          fill={colorBase500}\n          fontFamily={fontAxisFontFamily}\n          fontStyle={fontAxisFontStyle}\n          fontWeight={fontAxisFontWeight}\n          fontSize={fontAxisFontSize}\n          letterSpacing={fontAxisLetterSpacing}\n          textAnchor=\"middle\"\n        >\n          {formatter(time)}\n        </text>\n      ))}\n    </g>\n  );\n}\n\nfunction getTimeFormatter(ticks: Array<number>): (time: number) => string {\n  if (ticks.length < 2) {\n    // If there's only a single tick, just display the full timestamp.\n    return (time) => new Date(time).toISOString();\n  }\n\n  const timeScale = getTimeScale(ticks[0], ticks[1]);\n  const formatter = getFormatter(timeScale);\n\n  return (time) => formatter(new Date(time));\n}\n\ntype TimeScale = \"milliseconds\" | \"seconds\" | \"minutes\" | \"hours\" | \"days\";\n\nfunction getTimeScale(time1: number, time2: number): TimeScale {\n  const delta = time2 - time1;\n  if (delta < 1000) {\n    return \"milliseconds\";\n  } else if (delta < 60 * 1000) {\n    return \"seconds\";\n  } else if (delta < 60 * 60 * 1000) {\n    return \"minutes\";\n  } else if (delta < 24 * 60 * 60 * 1000) {\n    return \"hours\";\n  } else {\n    return \"days\";\n  }\n}\n\nfunction getFormatter(unit: TimeScale): ReturnType<typeof utcFormat> {\n  switch (unit) {\n    case \"milliseconds\":\n      return utcFormat(\".%L\");\n    case \"seconds\":\n      return utcFormat(\"%M:%S\");\n    case \"minutes\":\n      return utcFormat(\"%I:%M\");\n    case \"hours\":\n      return utcFormat(\"%I %p\");\n    case \"days\":\n      return utcFormat(\"%a %d\");\n  }\n}\n","import type { Axis } from \"../../Mondrian\";\nimport type { Scales } from \"../types\";\n\ntype Props = {\n  scales: Scales;\n  stroke: string;\n  strokeDasharray?: string;\n  xAxis: Axis;\n  xTicks: Array<number>;\n};\n\nexport function GridColumns({\n  scales: { xScale, yMax },\n  xAxis: { maxValue, minValue },\n  xTicks,\n  ...lineProps\n}: Props): JSX.Element {\n  return (\n    <g>\n      {xTicks.map((time, index) => {\n        const x = xScale((time - minValue) / (maxValue - minValue));\n        return (\n          <line\n            // rome-ignore lint/suspicious/noArrayIndexKey: no better key available\n            key={index}\n            x1={x}\n            y1={0}\n            x2={x}\n            y2={yMax}\n            strokeWidth={1}\n            {...lineProps}\n          />\n        );\n      })}\n    </g>\n  );\n}\n","import type { Scale } from \"../types\";\n\ntype Props = {\n  stroke: string;\n  strokeDasharray?: string;\n  xMax: number;\n  yScale: Scale;\n  yTicks: Array<number>;\n};\n\nexport function GridRows({\n  xMax,\n  yScale,\n  yTicks,\n  ...lineProps\n}: Props): JSX.Element {\n  return (\n    <g>\n      {yTicks.map((value, index) => {\n        const y = yScale(value);\n        return (\n          <line\n            // rome-ignore lint/suspicious/noArrayIndexKey: no better key available\n            key={index}\n            x1={0}\n            y1={y}\n            x2={xMax}\n            y2={y}\n            strokeWidth={1}\n            {...lineProps}\n          />\n        );\n      })}\n    </g>\n  );\n}\n","import { useTheme } from \"styled-components\";\n\nimport type { Scales } from \"../types\";\n\ntype Props = {\n  scales: Scales;\n  strokeColor: string;\n  strokeDasharray?: string;\n  strokeWidth: number;\n  ticks: Array<number>;\n};\n\nexport function LeftAxis({\n  scales: { yMax, yScale },\n  strokeColor,\n  strokeDasharray,\n  strokeWidth,\n  ticks,\n}: Props) {\n  const {\n    colorBase500,\n    fontAxisFontSize,\n    fontAxisFontFamily,\n    fontAxisFontStyle,\n    fontAxisFontWeight,\n    fontAxisLetterSpacing,\n  } = useTheme();\n\n  const tickLabelProps = {\n    dx: \"-0.45em\",\n    dy: \"0.25em\",\n    textAnchor: \"end\" as const,\n    fontFamily: fontAxisFontFamily,\n    fontStyle: fontAxisFontStyle,\n    fontWeight: fontAxisFontWeight,\n    fontSize: fontAxisFontSize,\n    letterSpacing: fontAxisLetterSpacing,\n    fill: colorBase500,\n  };\n\n  const numTicks = ticks.length - 1;\n  const formatter = yScale.tickFormat(numTicks, \"~s\");\n\n  return (\n    <g>\n      <line\n        x1={0}\n        y1={0}\n        x2={0}\n        y2={yMax}\n        stroke={strokeColor}\n        strokeDasharray={strokeDasharray}\n        strokeWidth={strokeWidth}\n      />\n\n      {ticks.map((value, index) =>\n        (index > 0 || index < numTicks - 1) && value.valueOf() !== 0 ? (\n          // rome-ignore lint/suspicious/noArrayIndexKey: no better key available\n          <text key={index} x={0} y={yScale(value)} {...tickLabelProps}>\n            {formatter(value)}\n          </text>\n        ) : null,\n      )}\n    </g>\n  );\n}\n","import { animate, Tween, useMotionValue } from \"framer-motion\";\nimport { memo, useEffect, useLayoutEffect, useMemo, useState } from \"react\";\nimport { useTheme } from \"styled-components\";\n\nimport type { AbstractChart, Axis } from \"../../Mondrian\";\nimport { BottomAxis } from \"./BottomAxis\";\nimport { GridColumns } from \"./GridColumns\";\nimport { GridRows } from \"./GridRows\";\nimport { LeftAxis } from \"./LeftAxis\";\nimport type { Scale, Scales } from \"../types\";\n\ntype Props = {\n  chart: AbstractChart<unknown, unknown>;\n  gridColumnsShown?: boolean;\n  gridRowsShown?: boolean;\n  gridBordersShown?: boolean;\n  gridDashArray?: string;\n  gridStrokeColor?: string;\n  scales: Scales;\n};\n\nexport const GridWithAxes = memo(function GridWithAxes({\n  chart,\n  gridColumnsShown = true,\n  gridRowsShown = true,\n  gridBordersShown = true,\n  gridDashArray,\n  gridStrokeColor,\n  scales,\n}: Props) {\n  const { xMax, xScale, yMax, yScale } = scales;\n\n  const { colorBase300 } = useTheme();\n  const strokeColor = gridStrokeColor || colorBase300;\n\n  const { xAxis, yAxis } = chart;\n  const minValue = useCustomSpring(yAxis.minValue);\n  const maxValue = useCustomSpring(yAxis.maxValue);\n\n  const animatedScale = yScale.copy().domain([minValue, maxValue]);\n\n  const xTicks = useMemo(\n    () => getTicks(xAxis, xMax, xScale, 12),\n    [xAxis, xMax, xScale],\n  );\n  const yTicks = useMemo(\n    () => getTicks(yAxis, yMax, animatedScale, 8),\n    [yAxis, yMax, animatedScale],\n  );\n\n  return (\n    <>\n      {gridRowsShown && (\n        <GridRows\n          stroke={strokeColor}\n          strokeDasharray={gridDashArray}\n          xMax={xMax}\n          yScale={animatedScale}\n          yTicks={yTicks}\n        />\n      )}\n      {gridBordersShown && (\n        <line\n          x1={xMax}\n          x2={xMax}\n          y1={0}\n          y2={yMax}\n          stroke={strokeColor}\n          strokeWidth={1}\n          strokeDasharray={gridDashArray}\n        />\n      )}\n      {gridColumnsShown && (\n        <GridColumns\n          scales={scales}\n          stroke={strokeColor}\n          strokeDasharray={gridDashArray}\n          xAxis={xAxis}\n          xTicks={xTicks}\n        />\n      )}\n      <BottomAxis\n        scales={scales}\n        strokeColor={strokeColor}\n        strokeDasharray={gridDashArray}\n        ticks={xTicks}\n        xAxis={xAxis}\n      />\n      <LeftAxis\n        scales={{ ...scales, yScale: animatedScale }}\n        strokeColor={strokeColor}\n        strokeDasharray={gridDashArray}\n        strokeWidth={gridBordersShown ? 1 : 0}\n        ticks={yTicks}\n      />\n    </>\n  );\n});\n\nfunction getTicks(\n  axis: Axis,\n  max: number,\n  scale: Scale,\n  numTicks: number,\n): Array<number> {\n  const suggestions = axis.tickSuggestions;\n  const ticks = suggestions\n    ? getTicksFromSuggestions(axis, suggestions, numTicks)\n    : getTicksFromRange(axis.minValue, axis.maxValue, numTicks);\n\n  extendTicksToFitAxis(ticks, axis, max, scale, 2 * numTicks);\n\n  return ticks;\n}\n\nfunction getTicksFromRange(\n  minValue: number,\n  maxValue: number,\n  numTicks: number,\n): Array<number> {\n  const interval = (maxValue - minValue) / numTicks;\n\n  const ticks = [minValue];\n  let tick = minValue + interval;\n  while (tick < maxValue) {\n    ticks.push(tick);\n    tick += interval;\n  }\n\n  return ticks;\n}\n\nfunction getTicksFromSuggestions(\n  axis: Axis,\n  suggestions: Array<number>,\n  numTicks: number,\n): Array<number> {\n  const len = suggestions.length;\n  if (len < 2) {\n    return suggestions;\n  }\n\n  const suggestionInterval = suggestions[1] - suggestions[0];\n  const axisRange = axis.maxValue - axis.minValue;\n  const ticksPerRange = axisRange / suggestionInterval;\n  if (ticksPerRange < numTicks) {\n    return suggestions;\n  }\n\n  const ticks = [];\n  const divisionFactor = Math.ceil(ticksPerRange / numTicks);\n  for (let i = 0; i < len; i++) {\n    if (i % divisionFactor === 0) {\n      ticks.push(suggestions[i]);\n    }\n  }\n\n  return ticks;\n}\n\n/**\n * Extends the ticks to cover the full range of the axis.\n *\n * Due to animations/translations it is possible the ticks don't yet cover the\n * full range of the axis. This function extends the ticks as necessary, and\n * also includes a slight margin to prevent a \"pop-in\" effect of suddenly\n * appearing tick labels from the right edge.\n *\n * @note This function mutates the input ticks.\n */\nfunction extendTicksToFitAxis(\n  ticks: Array<number>,\n  axis: Axis,\n  max: number,\n  scale: Scale,\n  maxTicks: number,\n) {\n  if (ticks.length < 2) {\n    return;\n  }\n\n  const interval = ticks[1] - ticks[0];\n  const scaleToAxis = (value: number) =>\n    scale((value - axis.minValue) / (axis.maxValue - axis.minValue));\n\n  // Trim ticks from the start if the user has dragged them beyond the Y axis.\n  while (ticks.length && scaleToAxis(ticks[0]) < 0) {\n    ticks.shift();\n  }\n\n  let preTick = ticks[0] - interval;\n  while (ticks.length < maxTicks && scaleToAxis(preTick) >= 0) {\n    ticks.unshift(preTick);\n    preTick -= interval;\n  }\n\n  let postTick = ticks[ticks.length - 1] + interval;\n  while (ticks.length < maxTicks && scaleToAxis(postTick) < 1.1 * max) {\n    ticks.push(postTick);\n    postTick += interval;\n  }\n}\n\nconst spring: Tween = {\n  type: \"tween\",\n  duration: 1,\n  easings: [\"anticipate\"],\n};\n\nfunction useCustomSpring(value: number) {\n  const motionValue = useMotionValue(value);\n  const [current, setCurrent] = useState(value);\n\n  useLayoutEffect(() => {\n    return motionValue.on(\"change\", (value) => setCurrent(value));\n  }, [motionValue]);\n\n  useEffect(() => {\n    const controls = animate(motionValue, value, spring);\n    return controls.stop;\n  }, [motionValue, value]);\n\n  return current;\n}\n","import { useMemo, useReducer } from \"react\";\n\nimport { identity, isMac } from \"../../utils\";\n\ntype PressedKeyEvent = KeyboardEvent | React.MouseEvent;\n\nexport type InteractiveControls = {\n  resetMouseInteraction(): void;\n  startDrag(start: number): void;\n  startZoom(start: number): void;\n  updateEndValue(end: number): void;\n  updatePressedKeys(event: PressedKeyEvent): void;\n};\n\nexport type InteractiveControlsState = {\n  mouseInteraction: MouseInteractionState;\n  dragKeyPressed: boolean;\n  zoomKeyPressed: boolean;\n};\n\nexport type MouseInteractionState =\n  | { type: \"none\" }\n  | { type: \"drag\"; start: number; end?: number }\n  | { type: \"zoom\"; start: number; end?: number };\n\nconst defaultState: InteractiveControlsState = {\n  mouseInteraction: { type: \"none\" },\n  dragKeyPressed: false,\n  zoomKeyPressed: false,\n};\n\n/**\n * Returns zoom/drag handlers and state.\n */\nexport function useInteractiveControls(\n  readOnly: boolean,\n): InteractiveControls & InteractiveControlsState {\n  const [state, dispatch] = useReducer(\n    readOnly ? identity : controlsStateReducer,\n    defaultState,\n  );\n\n  const controls = useMemo(() => createControls(dispatch), []);\n\n  return { ...controls, ...state };\n}\n\ntype ActionDragStart = {\n  type: \"DRAG_START\";\n  payload: { start: number };\n};\n\ntype ActionReset = {\n  type: \"RESET_MOUSE_INTERACTION\";\n};\n\ntype ActionUpdateEndValue = {\n  type: \"UPDATE_END_VALUE\";\n  payload: { end: number };\n};\n\ntype ActionUpdatePressedKeys = {\n  type: \"UPDATE_PRESSED_KEYS\";\n  payload: {\n    dragKeyPressed?: boolean;\n    zoomKeyPressed?: boolean;\n  };\n};\n\ntype ActionZoomStart = {\n  type: \"ZOOM_START\";\n  payload: { start: number };\n};\n\ntype Actions =\n  | ActionDragStart\n  | ActionReset\n  | ActionUpdateEndValue\n  | ActionUpdatePressedKeys\n  | ActionZoomStart;\n\nfunction createControls(\n  dispatch: React.Dispatch<Actions>,\n): InteractiveControls {\n  return {\n    resetMouseInteraction() {\n      dispatch({ type: \"RESET_MOUSE_INTERACTION\" });\n    },\n\n    startDrag(start: number) {\n      dispatch({ type: \"DRAG_START\", payload: { start } });\n    },\n\n    startZoom(start: number) {\n      dispatch({ type: \"ZOOM_START\", payload: { start } });\n    },\n\n    updateEndValue(end: number) {\n      dispatch({ type: \"UPDATE_END_VALUE\", payload: { end } });\n    },\n\n    updatePressedKeys(event: PressedKeyEvent) {\n      dispatch({\n        type: \"UPDATE_PRESSED_KEYS\",\n        payload: {\n          dragKeyPressed: dragKeyPressed(event),\n          zoomKeyPressed: zoomKeyPressed(event),\n        },\n      });\n    },\n  };\n}\n\nfunction controlsStateReducer(\n  state: InteractiveControlsState,\n  action: Actions,\n): InteractiveControlsState {\n  switch (action.type) {\n    case \"DRAG_START\":\n      return {\n        ...state,\n        mouseInteraction: { type: \"drag\", start: action.payload.start },\n      };\n\n    case \"RESET_MOUSE_INTERACTION\":\n      return { ...state, mouseInteraction: defaultState.mouseInteraction };\n\n    case \"UPDATE_END_VALUE\":\n      if (state.mouseInteraction.type === \"none\") {\n        return state;\n      }\n\n      return {\n        ...state,\n        mouseInteraction: {\n          ...state.mouseInteraction,\n          end: action.payload.end,\n        },\n      };\n\n    case \"UPDATE_PRESSED_KEYS\":\n      return { ...state, ...action.payload };\n\n    case \"ZOOM_START\":\n      return {\n        ...state,\n        mouseInteraction: { type: \"zoom\", start: action.payload.start },\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction dragKeyPressed(event: PressedKeyEvent) {\n  return event.shiftKey;\n}\n\nfunction zoomKeyPressed(event: PressedKeyEvent) {\n  return isMac ? event.metaKey : event.ctrlKey;\n}\n","// Dimensions.\nexport const HEIGHT = 275;\nexport const MARGINS = { top: 0, bottom: 20, left: 38, right: 0 };\n","import type { ChartCoordinates, Dimensions } from \"./types\";\nimport { MARGINS } from \"./constants\";\n\nexport function getCoordinatesForEvent(\n  event: React.MouseEvent<SVGElement> | WheelEvent,\n  { xMax, yMax }: Dimensions,\n): ChartCoordinates | null {\n  const svg = getTarget(event);\n  if (!svg) {\n    return null;\n  }\n\n  const rect = svg.getBoundingClientRect();\n\n  const x = event.clientX - rect.left - MARGINS.left;\n  const y = event.clientY - rect.top - MARGINS.top;\n  if (x < 0 || x > xMax || y < 0 || y > yMax) {\n    return null;\n  }\n\n  return { x: x / xMax, y: 1 - y / yMax };\n}\n\n/**\n * Finds the root `<svg>` element we use as target. Most event listeners are\n * directly attached to it, but some may be attached elsewhere and we need to\n * travel from the `event.target` to find it.\n */\nfunction getTarget(\n  event: React.MouseEvent<SVGElement> | WheelEvent,\n): SVGSVGElement | null {\n  if (event.currentTarget instanceof SVGSVGElement) {\n    return event.currentTarget;\n  }\n\n  let target = event.target as HTMLElement | SVGElement | null;\n  while (target) {\n    if (target instanceof SVGSVGElement) {\n      return target;\n    }\n\n    target = target.parentElement;\n  }\n\n  return null;\n}\n","import type { Dimensions } from \"../types\";\nimport { getCoordinatesForEvent } from \"../utils\";\nimport type {\n  InteractiveControls,\n  InteractiveControlsState,\n} from \"./useInteractiveControls\";\nimport {\n  preventDefault,\n  secondsToTimestamp,\n  timestampToSeconds,\n} from \"../../utils\";\nimport type { TimeRange, Timestamp } from \"../../providerTypes\";\n\nconst MIN_DURATION = 60; // in seconds\n\ntype MouseControls = {\n  onMouseDown: React.MouseEventHandler<SVGElement>;\n  onMouseMove: React.MouseEventHandler<SVGElement>;\n  onMouseUp: React.MouseEventHandler<SVGElement>;\n  onWheel: (event: WheelEvent) => void;\n};\n\ntype Props = {\n  interactiveControls: InteractiveControls & InteractiveControlsState;\n  timeRange: TimeRange;\n  onChangeTimeRange?: (timeRange: TimeRange) => void;\n  dimensions: Dimensions;\n};\n\n/**\n * Hook for setting up mouse handlers to control dragging & zoom\n */\nexport function useMouseControls({\n  interactiveControls: {\n    dragKeyPressed,\n    zoomKeyPressed,\n    mouseInteraction,\n    resetMouseInteraction,\n    startDrag,\n    startZoom,\n    updateEndValue,\n  },\n  timeRange,\n  onChangeTimeRange,\n  dimensions,\n}: Props): MouseControls {\n  function onMouseDown(event: React.MouseEvent<SVGElement>) {\n    if (event.buttons !== 1 || !onChangeTimeRange) {\n      return;\n    }\n\n    preventDefault(event);\n\n    const coords = getCoordinatesForEvent(event, dimensions);\n    if (!coords) {\n      return;\n    }\n\n    if (dragKeyPressed) {\n      startDrag(coords.x);\n    } else if (zoomKeyPressed) {\n      startZoom(coords.x);\n    }\n  }\n\n  function onMouseMove(event: React.MouseEvent<SVGElement>) {\n    preventDefault(event);\n\n    if (mouseInteraction.type === \"none\") {\n      return;\n    }\n\n    if (\n      (mouseInteraction.type === \"drag\" && !dragKeyPressed) ||\n      (mouseInteraction.type === \"zoom\" && !zoomKeyPressed)\n    ) {\n      resetMouseInteraction();\n      return;\n    }\n\n    const coords = getCoordinatesForEvent(event, dimensions);\n    if (coords) {\n      updateEndValue(coords.x);\n    }\n  }\n\n  function onMouseUp(event: React.MouseEvent) {\n    if (event.button !== 0) {\n      return;\n    }\n\n    preventDefault(event);\n\n    if (mouseInteraction.type === \"zoom\") {\n      const { start, end } = mouseInteraction;\n      if (end !== undefined && start !== end) {\n        onChangeTimeRange?.({\n          from: coordinateToTimestamp(timeRange, Math.min(start, end)),\n          to: coordinateToTimestamp(timeRange, Math.max(start, end)),\n        });\n      }\n\n      resetMouseInteraction();\n    } else if (mouseInteraction.type === \"drag\") {\n      const { start, end } = mouseInteraction;\n      if (end !== undefined && start !== end) {\n        move(start - end);\n      }\n\n      resetMouseInteraction();\n    }\n  }\n\n  function onWheel(event: WheelEvent) {\n    if (mouseInteraction.type !== \"none\" || !zoomKeyPressed) {\n      return;\n    }\n\n    const coords = getCoordinatesForEvent(event, dimensions);\n    if (!coords) {\n      return;\n    }\n\n    preventDefault(event);\n\n    const factor = event.deltaY < 0 ? 0.5 : 2;\n    zoom(factor, coords.x);\n  }\n\n  /**\n   * Moves the time scale.\n   *\n   * @param deltaRatio The delta to move as a ratio of the current time scale\n   *                   window. -1 moves a full window to the left, and 1 moves\n   *                   a full window to the right.\n   */\n  function move(deltaRatio: number) {\n    const currentFrom = timestampToSeconds(timeRange.from);\n    const currentTo = timestampToSeconds(timeRange.to);\n    const delta = deltaRatio * (currentTo - currentFrom);\n    const from = secondsToTimestamp(currentFrom + delta);\n    const to = secondsToTimestamp(currentTo + delta);\n\n    onChangeTimeRange?.({ from, to });\n  }\n\n  /**\n   * Zooms into or out from the graph.\n   *\n   * @param factor The zoom factor. Anything below 1 makes the time scale\n   *               smaller (zooming in), and anything above 1 makes the time\n   *               scale larger (zooming out).\n   * @param focusRatio The horizontal point on which to focus the zoom,\n   *                   expressed as a ratio from 0 (left-hand side of the graph)\n   *                   to 1 (right-hand side of the graph).\n   */\n  function zoom(factor: number, focusRatio = 0.5) {\n    const currentFrom = timestampToSeconds(timeRange.from);\n    const currentTo = timestampToSeconds(timeRange.to);\n    const duration = currentTo - currentFrom;\n    const focusTimestamp = currentFrom + focusRatio * duration;\n    const newDuration = Math.max(duration * factor, MIN_DURATION);\n    const from = secondsToTimestamp(focusTimestamp - newDuration * focusRatio);\n    const to = secondsToTimestamp(\n      focusTimestamp + newDuration * (1 - focusRatio),\n    );\n\n    onChangeTimeRange?.({ from, to });\n  }\n\n  return { onMouseDown, onMouseMove, onMouseUp, onWheel };\n}\n\nfunction coordinateToTimestamp(timeRange: TimeRange, x: number): Timestamp {\n  const from = timestampToSeconds(timeRange.from);\n  const to = timestampToSeconds(timeRange.to);\n\n  return secondsToTimestamp(from + x * (to - from));\n}\n","import { scaleLinear } from \"@visx/scale\";\nimport { useMemo } from \"react\";\n\nimport type { Dimensions, Scales } from \"../types\";\nimport type { MouseInteractionState } from \"./useInteractiveControls\";\n\n/**\n * Returns the scales to use for rendering VisX components.\n *\n * Fortunately for us, our abstract charts are normalized along both axes to\n * values from 0.0 to 1.0, meaning we can suffice with trivial linear scales.\n *\n * If the chart is being dragged with the mouse, translation along the X axis\n * is applied.\n */\nexport function useScales(\n  { xMax, yMax }: Dimensions,\n  mouseInteraction: MouseInteractionState,\n): Scales {\n  // rome-ignore lint/nursery/useHookAtTopLevel: https://github.com/rome/tools/issues/4483\n  return useMemo(() => {\n    const xScale = scaleLinear({\n      range: translatedRange(xMax, mouseInteraction),\n      round: false,\n      nice: false,\n      domain: [0, 1],\n    });\n\n    const yScale = scaleLinear({\n      range: [yMax, 0],\n      round: false,\n      nice: false,\n      domain: [0, 1],\n    });\n\n    return { xMax, xScale, yMax, yScale };\n  }, [mouseInteraction, xMax, yMax]);\n}\n\nfunction translatedRange(\n  xMax: number,\n  mouseInteraction: MouseInteractionState,\n): [min: number, max: number] {\n  if (mouseInteraction.type === \"drag\") {\n    const { start, end } = mouseInteraction;\n    if (end !== undefined && start !== end) {\n      const delta = (end - start) * xMax;\n      return [delta, xMax + delta];\n    }\n  }\n\n  return [0, xMax];\n}\n","import { useEffect, useRef, useState } from \"react\";\n\nimport {\n  AbstractChart,\n  Area,\n  AreaPoint,\n  Line,\n  Point,\n  Rectangle,\n  Shape,\n} from \"../../Mondrian\";\nimport type {\n  ChartCoordinates,\n  CloseTooltipFn,\n  Dimensions,\n  ShowTooltipFn,\n  VirtualElement,\n} from \"../types\";\nimport { getCoordinatesForEvent } from \"../utils\";\nimport { getShapeListColor, noop } from \"../../utils\";\nimport { MARGINS } from \"../constants\";\nimport { useHandler } from \"../../hooks\";\n\nexport type GraphTooltip<S, P> = {\n  top: number;\n  left: number;\n  element: SVGSVGElement;\n  color: string;\n  sourcePoint: [S, P];\n};\n\ntype Props<S, P> = {\n  chart: AbstractChart<S, P>;\n  colors: Array<string>;\n  dimensions: Dimensions;\n  showTooltip: ShowTooltipFn<S, P> | undefined;\n};\n\n/**\n * Handles the detection of where a tooltip should be shown.\n *\n * Should be passed a callback for showing the actual tooltip. If no callback\n * is passed, tooltips are disabled.\n */\nexport function useTooltip<S, P>(props: Props<S, P>) {\n  const [graphTooltip, setGraphTooltip] = useState<GraphTooltip<S, P> | null>(\n    null,\n  );\n\n  const closeFnRef = useRef<CloseTooltipFn | null>(null);\n\n  const showTooltipFn = props.showTooltip;\n  const showTooltip = showTooltipFn\n    ? (tip: GraphTooltip<S, P>) => {\n        setGraphTooltip(tip);\n\n        const element: VirtualElement = {\n          getBoundingClientRect: (): DOMRect => {\n            const ctm = tip.element.getScreenCTM();\n            const point = tip.element.createSVGPoint();\n            point.x = tip.left;\n            point.y = tip.top;\n\n            const { x, y } = ctm\n              ? point.matrixTransform(ctm)\n              : { x: tip.left, y: tip.top };\n\n            return new DOMRect(x - 4, y - 4, 8, 8);\n          },\n          contextElement: tip.element,\n        };\n\n        closeFnRef.current = showTooltipFn(element, tip.sourcePoint);\n      }\n    : noop;\n\n  const closeTooltip = useHandler(() => {\n    setGraphTooltip(null);\n\n    if (closeFnRef.current) {\n      closeFnRef.current();\n      closeFnRef.current = null;\n    }\n  });\n\n  useEffect(() => {\n    if (!showTooltipFn) {\n      closeTooltip();\n    }\n  }, [closeTooltip, showTooltipFn]);\n\n  return {\n    graphTooltip,\n\n    onMouseMove: (event: React.MouseEvent<SVGSVGElement>) => {\n      const closest = getClosestSeriesAndPointWithCoordinates(event, props);\n      if (!closest) {\n        return;\n      }\n\n      const [series, point, coords] = closest;\n\n      const { chart, colors, dimensions } = props;\n      const seriesIndex = chart.shapeLists.findIndex(\n        (shapeList) => shapeList.source === series,\n      );\n      const color = getShapeListColor(colors, seriesIndex);\n\n      showTooltip({\n        color,\n        element: event.currentTarget,\n        sourcePoint: [series, point],\n        top: (1 - coords.y) * dimensions.yMax + MARGINS.top,\n        left: coords.x * dimensions.xMax + MARGINS.left,\n      });\n    },\n\n    onMouseLeave: () => {\n      closeTooltip();\n    },\n  };\n}\n\n/**\n * Returns the closest coordinates where a tooltip should be displayed,\n * including the source series and point that were used to generate the shape\n * at those coordinates.\n */\nfunction getClosestSeriesAndPointWithCoordinates<S, P>(\n  event: React.MouseEvent<SVGElement>,\n  { chart, dimensions: scales }: Props<S, P>,\n): [S, P, ChartCoordinates] | null {\n  const coords = getCoordinatesForEvent(event, scales);\n  if (!coords) {\n    return null;\n  }\n\n  let closestSeriesAndPoint: [S, P, ChartCoordinates] | null = null;\n  let closestDistance: Distance = [Infinity, 0];\n  for (const shapeList of chart.shapeLists) {\n    for (const shape of shapeList.shapes) {\n      const closest = getClosestPointWithDistance(shape, coords);\n      if (!closest) {\n        continue;\n      }\n\n      const [point, closestCoords, distance] = closest;\n      if (isCloser(distance, closestDistance)) {\n        closestSeriesAndPoint = [shapeList.source, point, closestCoords];\n        closestDistance = distance;\n      }\n    }\n  }\n\n  return closestSeriesAndPoint;\n}\n\nfunction getClosestPointWithDistance<P>(\n  shape: Shape<P>,\n  coords: ChartCoordinates,\n): [P, ChartCoordinates, Distance] | null {\n  switch (shape.type) {\n    case \"area\":\n      return getClosestPointWithDistanceForArea(shape, coords);\n    case \"line\":\n      return getClosestPointWithDistanceForLine(shape, coords);\n    case \"point\":\n      return [shape.source, shape, getDistance(coords, shape)];\n    case \"rectangle\":\n      return getClosestPointWithDistanceForRectangle(shape, coords);\n  }\n}\n\nfunction getClosestPointWithDistanceForArea<P>(\n  area: Area<P>,\n  coords: ChartCoordinates,\n): [P, ChartCoordinates, Distance] | null {\n  const len = area.points.length;\n  if (len === 0) {\n    return null;\n  }\n\n  let closest: AreaPoint<P>;\n  let horizontalDistance: number;\n  if (coords.x < area.points[0].x) {\n    closest = area.points[0];\n    horizontalDistance = closest.x - coords.x;\n  } else if (coords.x > area.points[len - 1].x) {\n    closest = area.points[len - 1];\n    horizontalDistance = coords.x - closest.x;\n  } else {\n    closest = area.points[0];\n    horizontalDistance = coords.x - closest.x;\n    for (let i = 1; i < len; i++) {\n      const point = area.points[i];\n      const distance = Math.abs(point.x - coords.x);\n      if (distance < horizontalDistance) {\n        closest = point;\n        horizontalDistance = distance;\n      } else {\n        break;\n      }\n    }\n  }\n\n  let verticalDistance: number;\n  if (coords.y < closest.yMin) {\n    verticalDistance = closest.yMin - coords.y;\n  } else if (coords.y > closest.yMax) {\n    verticalDistance = coords.y - closest.yMax;\n  } else {\n    verticalDistance = 0;\n  }\n\n  return [\n    closest.source,\n    { x: closest.x, y: coords.y < closest.yMin ? closest.yMin : closest.yMax },\n    [horizontalDistance, verticalDistance],\n  ];\n}\n\nfunction getClosestPointWithDistanceForLine<P>(\n  line: Line<P>,\n  coords: ChartCoordinates,\n): [P, ChartCoordinates, Distance] | null {\n  let closestPoint: Point<P> | null = null;\n  let closestDistance: Distance = [Infinity, 0];\n  for (const point of line.points) {\n    const distance = getDistance(coords, point);\n    if (isCloser(distance, closestDistance)) {\n      closestPoint = point;\n      closestDistance = distance;\n    }\n  }\n\n  return closestPoint\n    ? [closestPoint.source, closestPoint, closestDistance]\n    : null;\n}\n\nfunction getClosestPointWithDistanceForRectangle<P>(\n  rectangle: Rectangle<P>,\n  coords: ChartCoordinates,\n): [P, ChartCoordinates, Distance] {\n  let horizontal: number;\n  if (coords.x < rectangle.x) {\n    horizontal = rectangle.x - coords.x;\n  } else if (coords.x > rectangle.x + rectangle.width) {\n    horizontal = coords.x - (rectangle.x + rectangle.width);\n  } else {\n    horizontal = 0;\n  }\n\n  let vertical: number;\n  if (coords.y < rectangle.y) {\n    vertical = rectangle.y - coords.y;\n  } else if (coords.y > rectangle.y + rectangle.height) {\n    vertical = coords.y - (rectangle.y + rectangle.height);\n  } else {\n    vertical = 0;\n  }\n\n  return [\n    rectangle.source,\n    {\n      x: rectangle.x + 0.5 * rectangle.width,\n      y: rectangle.y + rectangle.height,\n    },\n    [horizontal, vertical],\n  ];\n}\n\ntype Distance = [horizontal: number, vertical: number];\n\nfunction getDistance(p1: ChartCoordinates, p2: ChartCoordinates): Distance {\n  return [Math.abs(p1.x - p2.x), Math.abs(p1.y - p2.y)];\n}\n\n/**\n * Returns whether the given distance is closer than the given reference.\n *\n * Horizontal distance is prioritized over vertical distance.\n */\nfunction isCloser(distance: Distance, reference: Distance): boolean {\n  return (\n    distance[0] < reference[0] ||\n    (distance[0] === reference[0] && distance[1] < reference[1])\n  );\n}\n","import type { Dimensions } from \"./types\";\nimport type { MouseInteractionState } from \"./hooks\";\n\ntype Props = {\n  dimensions: Dimensions;\n  mouseInteraction: MouseInteractionState;\n};\n\nexport function ZoomBar({\n  dimensions: { xMax, yMax },\n  mouseInteraction,\n}: Props): JSX.Element | null {\n  if (mouseInteraction.type !== \"zoom\") {\n    return null;\n  }\n\n  const { start, end } = mouseInteraction;\n  if (end === undefined) {\n    return null;\n  }\n\n  const reverseZoom = end < start;\n\n  return (\n    <rect\n      stroke=\"#4797ff\"\n      strokeWidth={1}\n      fill=\"#a3cbff\"\n      fillOpacity=\"10%\"\n      x={(reverseZoom ? end : start) * xMax}\n      y={0}\n      width={(reverseZoom ? start - end : end - start) * xMax}\n      height={yMax}\n    />\n  );\n}\n","import { useContext, useEffect, useId } from \"react\";\n\nimport { ChartContent } from \"./ChartContent\";\nimport { ChartSizeContext } from \"./ChartSizeContext\";\nimport type { CoreChartProps } from \"./types\";\nimport { GridWithAxes } from \"./GridWithAxes\";\nimport {\n  InteractiveControlsState,\n  useInteractiveControls,\n  useMouseControls,\n  useScales,\n  useTooltip,\n} from \"./hooks\";\nimport { ZoomBar } from \"./ZoomBar\";\n\ntype Props<S, P> = CoreChartProps<S, P> &\n  Required<Pick<CoreChartProps<S, P>, \"colors\">> & {\n    gridShown?: boolean;\n  };\n\nexport function CoreChart<S, P>({\n  chart,\n  colors,\n  gridShown = true,\n  onChangeTimeRange,\n  readOnly = false,\n  showTooltip,\n  timeRange,\n  ...props\n}: Props<S, P>): JSX.Element {\n  const interactiveControls = useInteractiveControls(readOnly);\n  const { mouseInteraction, updatePressedKeys } = interactiveControls;\n\n  const { width, height, xMax, yMax, marginTop, marginLeft } =\n    useContext(ChartSizeContext);\n  const dimensions = { xMax, yMax };\n\n  const {\n    onMouseDown,\n    onMouseUp,\n    onWheel,\n    onMouseMove: onMouseMoveControls,\n  } = useMouseControls({\n    dimensions,\n    interactiveControls,\n    onChangeTimeRange,\n    timeRange,\n  });\n\n  const {\n    graphTooltip,\n    onMouseMove: onMouseMoveTooltip,\n    onMouseLeave,\n  } = useTooltip({\n    chart,\n    colors,\n    dimensions,\n    showTooltip: modifierPressed(interactiveControls) ? undefined : showTooltip,\n  });\n\n  const onMouseMove = (event: React.MouseEvent<SVGSVGElement>) => {\n    updatePressedKeys(event);\n    onMouseMoveControls(event);\n    onMouseMoveTooltip(event);\n  };\n\n  const clipPathId = useId();\n\n  const cursor = getCursorFromState(interactiveControls);\n\n  const scales = useScales(dimensions, mouseInteraction);\n\n  useEffect(() => {\n    const wheelListenerOptions: AddEventListenerOptions = { passive: false };\n    window.addEventListener(\"keydown\", updatePressedKeys);\n    window.addEventListener(\"keyup\", updatePressedKeys);\n    window.addEventListener(\"wheel\", onWheel, wheelListenerOptions);\n    return () => {\n      window.removeEventListener(\"keydown\", updatePressedKeys);\n      window.removeEventListener(\"keyup\", updatePressedKeys);\n      window.removeEventListener(\"wheel\", onWheel, wheelListenerOptions);\n    };\n  }, [onWheel, updatePressedKeys]);\n\n  return (\n    // rome-ignore lint/a11y/noSvgWithoutTitle: title would interfere with tooltip\n    <svg\n      width={width}\n      height={height}\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseUp={onMouseUp}\n      onMouseLeave={onMouseLeave}\n      style={{ cursor, marginTop: 2 }}\n    >\n      <defs>\n        <clipPath id={clipPathId}>\n          <rect x={0} y={0} width={xMax} height={yMax} />\n        </clipPath>\n      </defs>\n      <g transform={`translate(${marginLeft}, ${marginTop})`}>\n        {gridShown && <GridWithAxes {...props} chart={chart} scales={scales} />}\n        <g clipPath={`url(#${clipPathId})`}>\n          <ChartContent\n            {...props}\n            chart={chart}\n            colors={colors}\n            scales={scales}\n          />\n        </g>\n        <ZoomBar dimensions={dimensions} mouseInteraction={mouseInteraction} />\n      </g>\n      {graphTooltip && (\n        <g>\n          <line\n            x1={graphTooltip.left}\n            y1={0}\n            x2={graphTooltip.left}\n            y2={yMax}\n            stroke={graphTooltip.color}\n            strokeWidth={1}\n            pointerEvents=\"none\"\n            strokeDasharray=\"1 1\"\n          />\n          <circle\n            cx={graphTooltip.left}\n            cy={graphTooltip.top}\n            r={4}\n            fill={graphTooltip.color}\n            pointerEvents=\"none\"\n          />\n        </g>\n      )}\n    </svg>\n  );\n}\n\nfunction modifierPressed(state: InteractiveControlsState): boolean {\n  return state.dragKeyPressed || state.zoomKeyPressed;\n}\n\nfunction getCursorFromState(state: InteractiveControlsState): string {\n  switch (state.mouseInteraction.type) {\n    case \"none\":\n      if (state.dragKeyPressed) {\n        return \"grab\";\n      }\n\n      if (state.zoomKeyPressed) {\n        return \"zoom-in\";\n      }\n\n      return \"default\";\n    case \"drag\":\n      return \"grabbing\";\n    case \"zoom\":\n      return \"zoom-in\";\n  }\n}\n","/**\n * Converts an RFC 3339-formatted timestamp to a time expressed in milliseconds.\n */\nexport function getTimeFromTimestamp(timestamp: string): number {\n  const time = new Date(timestamp).getTime();\n  if (Number.isNaN(time)) {\n    throw new TypeError(`Invalid timestamp: ${timestamp}`);\n  }\n\n  return time;\n}\n","import { getTimeFromTimestamp } from \"./getTimeFromTimestamp\";\nimport type { Axis } from \"../../types\";\nimport type { Buckets } from \"../types\";\n\n/**\n * Adds suggestions to the axis based on the position of the first bucket and\n * the interval between buckets.\n *\n * @note This function mutates its input axis.\n */\nexport function attachSuggestionsToXAxis(\n  xAxis: Axis,\n  buckets: Buckets<unknown>,\n  interval: number,\n) {\n  if (interval <= 0) {\n    return;\n  }\n\n  const firstBucketTime = getFirstBucketTime(buckets);\n  if (!firstBucketTime) {\n    return;\n  }\n\n  const suggestions = [];\n\n  let suggestion = firstBucketTime;\n  while (suggestion < xAxis.maxValue) {\n    if (suggestion >= xAxis.minValue) {\n      suggestions.push(suggestion);\n    }\n\n    suggestion += interval;\n  }\n\n  xAxis.tickSuggestions = suggestions;\n}\n\nfunction getFirstBucketTime(buckets: Buckets<unknown>): number | undefined {\n  let firstBucketTimestamp: string | undefined;\n  for (const timestamp of buckets.keys()) {\n    if (!firstBucketTimestamp || timestamp < firstBucketTimestamp) {\n      firstBucketTimestamp = timestamp;\n    }\n  }\n\n  return firstBucketTimestamp\n    ? getTimeFromTimestamp(firstBucketTimestamp)\n    : undefined;\n}\n","export const BAR_PADDING = 0.2;\nexport const BAR_PLUS_PADDING = 1 + BAR_PADDING;\n","import type { Axis } from \"../../types\";\nimport { BAR_PLUS_PADDING } from \"../constants\";\n\n/**\n * Calculates the width of bars in bar charts.\n */\nexport function calculateBarWidth(\n  xAxis: Axis,\n  interval: number,\n  numBarsPerGroup: number,\n): number {\n  const numGroups =\n    interval === 0\n      ? 1\n      : Math.round((xAxis.maxValue - xAxis.minValue) / interval) + 1;\n  const numBars = numGroups * numBarsPerGroup;\n  return 1 / (numBars * BAR_PLUS_PADDING);\n}\n","import { BAR_PADDING, BAR_PLUS_PADDING } from \"../constants\";\n\nconst HALF_PADDING = 0.5 * BAR_PADDING;\n\n/**\n * Calculates the (left) X coordinate for a bar in a bar chart.\n *\n * `groupX` is the center coordinate for the bar group that contains all the\n * bars for a given bucket. `barWidth` is the width of an individual bar.\n *\n * `barIndex` and `numShapeLists` define the index of the bar within the group,\n * and how many bars may exist in the group in total, respectively.\n */\nexport function calculateBarX(\n  groupX: number,\n  barWidth: number,\n  barIndex: number,\n  numShapeLists: number,\n): number {\n  return (\n    groupX +\n    (barIndex - 0.5 * numShapeLists) * (barWidth * BAR_PLUS_PADDING) -\n    barWidth * HALF_PADDING\n  );\n}\n","import type { MinMax } from \"../types\";\n\n/**\n * Extends the given min-max, if necessary, with the given value.\n *\n * @note This function mutates its input min-max.\n */\nexport function extendMinMax(minMax: MinMax, value: number): MinMax {\n  if (value < minMax[0]) {\n    minMax[0] = value;\n  } else if (value > minMax[1]) {\n    minMax[1] = value;\n  }\n\n  return minMax;\n}\n","import type { MinMax } from \"../types\";\n\n/**\n * Returns the initial min-max based on a single value.\n */\nexport function getInitialMinMax(value: number): MinMax {\n  return [value, value];\n}\n","import type { Axis } from \"../../types\";\n\n/**\n * Returns the Y axis to display results if all results have the same value.\n *\n * For values larger than 1 or smaller than -1, the results will be centered\n * along the Y axis. For values closer to zero, the zero value is kept at the\n * bottom (for zero and positive values) or top (for negative values) of the\n * axis.\n */\nexport function getYAxisForConstantValue(value: number): Axis {\n  if (value > 1 || value < -1) {\n    return { minValue: value - 1, maxValue: value + 1 };\n  } else if (value >= 0) {\n    return { minValue: 0, maxValue: value + 1 };\n  } else {\n    return { minValue: value - 1, maxValue: 0 };\n  }\n}\n","import type { Axis } from \"../../types\";\nimport type { Buckets } from \"../types\";\nimport { extendMinMax } from \"./extendMinMax\";\nimport { getInitialMinMax } from \"./getInitialMinMax\";\nimport { getYAxisForConstantValue } from \"./getYAxisForConstantValue\";\n\n/**\n * Detects the range to display along the Y axis by looking at all the totals\n * inside the buckets.\n *\n * This function is used for stacked charts. When rendering a normal chart, use\n * `calculateYAxisRange()` instead.\n */\nexport function calculateStackedYAxisRange<T>(\n  buckets: Buckets<T>,\n  getTotalValue: (bucket: T) => number,\n): Axis {\n  if (buckets.size === 0) {\n    return getYAxisForConstantValue(0);\n  }\n\n  const minMax = getInitialMinMax(0);\n  for (const value of buckets.values()) {\n    extendMinMax(minMax, getTotalValue(value));\n  }\n\n  const [minValue, maxValue] = minMax;\n  if (minValue === maxValue) {\n    return getYAxisForConstantValue(minValue);\n  }\n\n  return { minValue, maxValue };\n}\n","import type { Buckets } from \"../types\";\nimport type { Timeseries } from \"../../../providerTypes\";\n\n/**\n * Creates buckets from timeseries, and reduces the metrics to calculated\n * values per bucket.\n *\n * For each unique timestamp encountered among the metrics, we create a new\n * bucket, while the value inside each bucket represents the reduced value for\n * all metrics matching that timestamp.\n */\nexport function createMetricBuckets<T>(\n  timeseriesData: Array<Timeseries>,\n  reducer: (current: T | undefined, metricValue: number) => T,\n  initialValue: void,\n): Buckets<T>;\nexport function createMetricBuckets<T>(\n  timeseriesData: Array<Timeseries>,\n  reducer: (current: T, metricValue: number) => T,\n  initialValue: T,\n): Buckets<T>;\nexport function createMetricBuckets<T>(\n  timeseriesData: Array<Timeseries>,\n  reducer: (current: T, metricValue: number) => T,\n  initialValue: T,\n): Buckets<T> {\n  const buckets = new Map<string, T>();\n\n  for (const timeseries of timeseriesData) {\n    if (!timeseries.visible) {\n      continue;\n    }\n\n    for (const { time, value } of timeseries.metrics) {\n      if (!Number.isNaN(value)) {\n        buckets.set(time, reducer(buckets.get(time) ?? initialValue, value));\n      }\n    }\n  }\n\n  return buckets;\n}\n","import type { Axis, TimeRange } from \"../../types\";\nimport { getTimeFromTimestamp } from \"./getTimeFromTimestamp\";\n\n/**\n * Returns the X axis to display results for the given time range.\n */\nexport function getXAxisFromTimeRange(timeRange: TimeRange): Axis {\n  return {\n    minValue: getTimeFromTimestamp(timeRange.from),\n    maxValue: getTimeFromTimestamp(timeRange.to),\n  };\n}\n","import type { StackedChartBucketValue } from \"../types\";\nimport type { TimeseriesSourceData } from \"../../types\";\nimport { calculateStackedYAxisRange } from \"./calculateStackedYAxisRange\";\nimport { createMetricBuckets } from \"./createMetricBuckets\";\nimport { getXAxisFromTimeRange } from \"./getXAxisFromTimeRange\";\n\n/**\n * Wrapper around `createMetricBuckets()` and axes creation specialized for\n * usage with stacked charts.\n */\nexport function calculateBucketsAndAxesForStackedChart(\n  input: TimeseriesSourceData,\n) {\n  const buckets = createMetricBuckets(\n    input.timeseriesData,\n    ({ currentY, total }, value) => ({ currentY, total: total + value }),\n    { currentY: 0, total: 0 } as StackedChartBucketValue,\n  );\n\n  const isPercentage = input.stackingType === \"percentage\";\n\n  const xAxis = getXAxisFromTimeRange(input.timeRange);\n  const yAxis = isPercentage\n    ? { minValue: 0, maxValue: 1 }\n    : calculateStackedYAxisRange(buckets, ({ total }) => total);\n\n  return { buckets, isPercentage, xAxis, yAxis };\n}\n","import type { Buckets } from \"../types\";\nimport { getTimeFromTimestamp } from \"./getTimeFromTimestamp\";\n\n/**\n * Calculates the smallest interval between any two timestamps present in the\n * given buckets.\n *\n * Returns `null` if there are insufficient timestamps to calculate an interval.\n */\nexport function calculateSmallestTimeInterval(\n  buckets: Buckets<unknown>,\n): number | null {\n  const timestamps = Array.from(buckets.keys(), getTimeFromTimestamp);\n  if (timestamps.length < 2) {\n    return null;\n  }\n\n  timestamps.sort();\n\n  let smallestInterval = Infinity;\n  for (let i = 1; i < timestamps.length; i++) {\n    const interval = timestamps[i] - timestamps[i - 1];\n    if (interval < smallestInterval) {\n      smallestInterval = interval;\n    }\n  }\n\n  return smallestInterval;\n}\n","import type { Axis } from \"../../types\";\nimport type { Buckets, MinMax } from \"../types\";\nimport { getYAxisForConstantValue } from \"./getYAxisForConstantValue\";\n\n/**\n * Detects the range to display along the Y axis by looking at all the min-max\n * values inside the buckets.\n *\n * When rendering a stacked chart, use `calculateStackedYAxisRange()` instead.\n */\nexport function calculateYAxisRange<T>(\n  buckets: Buckets<T>,\n  getMinMax: (bucket: T) => MinMax,\n): Axis {\n  const minMax = getBucketsMinMax(buckets, getMinMax);\n  if (!minMax) {\n    return getYAxisForConstantValue(0);\n  }\n\n  const [minValue, maxValue] = minMax;\n\n  if (minValue === maxValue) {\n    return getYAxisForConstantValue(minValue);\n  }\n\n  return { minValue, maxValue };\n}\n\nfunction getBucketsMinMax<T>(\n  buckets: Buckets<T>,\n  getMinMax: (bucketValue: T) => MinMax,\n): MinMax | undefined {\n  let minMax: MinMax | undefined;\n\n  for (const value of buckets.values()) {\n    const bucketMinMax = getMinMax(value);\n    if (!minMax) {\n      minMax = bucketMinMax;\n      continue;\n    }\n\n    if (bucketMinMax[0] < minMax[0]) {\n      minMax[0] = bucketMinMax[0];\n    }\n    if (bucketMinMax[1] > minMax[1]) {\n      minMax[1] = bucketMinMax[1];\n    }\n  }\n\n  return minMax;\n}\n","import type { Axis } from \"../../types\";\n\n/**\n * Extends the range of an axis with the given interval.\n *\n * The range of the interval is divided among ends of the axis. The purpose of\n * this is to extend the axis with enough space to display the bars for the\n * first and last buckets displayed on the bar chart.\n *\n * @note This function mutates its input axis.\n */\nexport function extendAxisWithInterval(axis: Axis, interval: number): Axis {\n  const halfInterval = 0.5 * interval;\n  axis.minValue -= halfInterval;\n  axis.maxValue += halfInterval;\n\n  return axis;\n}\n","import type { Axis } from \"../../types\";\n\n/**\n * Takes an absolute value and normalizes it to a value between 0.0 and 1.0 for\n * the given axis.\n */\nexport function normalizeAlongLinearAxis(value: number, axis: Axis): number {\n  return (value - axis.minValue) / (axis.maxValue - axis.minValue);\n}\n","import type { Metric } from \"../../../providerTypes\";\nimport { getTimeFromTimestamp } from \"./getTimeFromTimestamp\";\n\n/**\n * Takes an array of metrics and divides it into a lines of metrics without\n * gaps.\n *\n * Any metric that has a `NaN` value, or that follows more than `1.5 * interval`\n * after the previous metric is considered to introduce a gap in the metrics.\n */\nexport function splitIntoContinuousLines(\n  metrics: Array<Metric>,\n  interval?: number,\n): Array<Array<Metric>> {\n  const lines: Array<Array<Metric>> = [];\n  let currentLine: Array<Metric> = [];\n  let previousTime: number | null = null;\n\n  for (const metric of metrics) {\n    if (Number.isNaN(metric.value)) {\n      if (currentLine.length > 0) {\n        lines.push(currentLine);\n        currentLine = [];\n      }\n\n      continue;\n    }\n\n    const newTime = getTimeFromTimestamp(metric.time);\n    if (previousTime && interval && newTime - previousTime > 1.5 * interval) {\n      if (currentLine.length > 0) {\n        lines.push(currentLine);\n        currentLine = [metric];\n      }\n    } else {\n      currentLine.push(metric);\n    }\n\n    previousTime = newTime;\n  }\n\n  if (currentLine.length > 0) {\n    lines.push(currentLine);\n  }\n\n  return lines;\n}\n","import type {\n  AbstractChart,\n  Axis,\n  Shape,\n  ShapeList,\n  TimeseriesSourceData,\n} from \"../types\";\nimport {\n  attachSuggestionsToXAxis,\n  calculateBarWidth,\n  calculateBarX,\n  calculateSmallestTimeInterval,\n  calculateYAxisRange,\n  createMetricBuckets,\n  extendAxisWithInterval,\n  extendMinMax,\n  getInitialMinMax,\n  getTimeFromTimestamp,\n  getXAxisFromTimeRange,\n  normalizeAlongLinearAxis,\n} from \"./utils\";\nimport { compact, identity } from \"../../utils\";\nimport type { Metric, Timeseries } from \"../../providerTypes\";\nimport type { MinMax } from \"./types\";\n\nexport function generateBarChartFromTimeseries(\n  input: TimeseriesSourceData,\n): AbstractChart<Timeseries, Metric> {\n  const visibleTimeseriesData = input.timeseriesData.filter(\n    (timeseries) => timeseries.visible,\n  );\n\n  const buckets = createMetricBuckets(\n    visibleTimeseriesData,\n    (maybeMinMax: MinMax | undefined, value) =>\n      maybeMinMax ? extendMinMax(maybeMinMax, value) : getInitialMinMax(value),\n  );\n\n  const xAxis = getXAxisFromTimeRange(input.timeRange);\n  const yAxis = calculateYAxisRange(buckets, identity);\n\n  const numShapeLists = visibleTimeseriesData.length;\n\n  const interval = calculateSmallestTimeInterval(buckets);\n  if (interval) {\n    extendAxisWithInterval(xAxis, interval);\n    attachSuggestionsToXAxis(xAxis, buckets, interval);\n  }\n\n  const barWidth = calculateBarWidth(xAxis, interval ?? 0, numShapeLists);\n  const barArgs: BarArgs = { barWidth, numShapeLists, xAxis, yAxis };\n\n  const shapeLists: Array<ShapeList<Timeseries, Metric>> =\n    input.timeseriesData.map((timeseries) => ({\n      shapes: timeseries.visible\n        ? compact(\n            timeseries.metrics.map((metric) =>\n              getBarShape(\n                metric,\n                visibleTimeseriesData.indexOf(timeseries),\n                barArgs,\n              ),\n            ),\n          )\n        : [],\n      source: timeseries,\n    }));\n\n  return { shapeLists, xAxis, yAxis };\n}\n\ntype BarArgs = {\n  barWidth: number;\n  numShapeLists: number;\n  xAxis: Axis;\n  yAxis: Axis;\n};\n\nfunction getBarShape(\n  metric: Metric,\n  barIndex: number,\n  { xAxis, yAxis, barWidth, numShapeLists: numVisibleTimeseries }: BarArgs,\n): Shape<Metric> | null {\n  if (Number.isNaN(metric.value)) {\n    return null;\n  }\n\n  const groupX = normalizeAlongLinearAxis(\n    getTimeFromTimestamp(metric.time),\n    xAxis,\n  );\n  return {\n    type: \"rectangle\",\n    x: calculateBarX(groupX, barWidth, barIndex, numVisibleTimeseries),\n    width: barWidth,\n    y: 0,\n    height: normalizeAlongLinearAxis(metric.value, yAxis),\n    source: metric,\n  };\n}\n","import type {\n  AbstractChart,\n  Axis,\n  Point,\n  Shape,\n  ShapeList,\n  TimeseriesSourceData,\n} from \"../types\";\nimport {\n  attachSuggestionsToXAxis,\n  calculateSmallestTimeInterval,\n  calculateYAxisRange,\n  createMetricBuckets,\n  extendMinMax,\n  getInitialMinMax,\n  getTimeFromTimestamp,\n  getXAxisFromTimeRange,\n  normalizeAlongLinearAxis,\n  splitIntoContinuousLines,\n} from \"./utils\";\nimport { identity } from \"../../utils\";\nimport type { Metric, Timeseries } from \"../../providerTypes\";\nimport type { MinMax } from \"./types\";\n\nexport function generateLineChartFromTimeseries(\n  input: TimeseriesSourceData,\n): AbstractChart<Timeseries, Metric> {\n  const buckets = createMetricBuckets(\n    input.timeseriesData,\n    (maybeMinMax: MinMax | undefined, value) =>\n      maybeMinMax ? extendMinMax(maybeMinMax, value) : getInitialMinMax(value),\n  );\n\n  const xAxis = getXAxisFromTimeRange(input.timeRange);\n  const yAxis = calculateYAxisRange(buckets, identity);\n\n  const interval = calculateSmallestTimeInterval(buckets);\n  if (interval) {\n    attachSuggestionsToXAxis(xAxis, buckets, interval);\n  }\n\n  const shapeLists: Array<ShapeList<Timeseries, Metric>> =\n    input.timeseriesData.map((timeseries) => ({\n      shapes: timeseries.visible\n        ? getShapes(timeseries.metrics, xAxis, yAxis, interval)\n        : [],\n      source: timeseries,\n    }));\n\n  return { shapeLists, xAxis, yAxis };\n}\n\nfunction getShapes(\n  metrics: Array<Metric>,\n  xAxis: Axis,\n  yAxis: Axis,\n  interval: number | null,\n): Array<Shape<Metric>> {\n  switch (metrics.length) {\n    case 0:\n      return [];\n    case 1: {\n      const metric = metrics[0];\n      return Number.isNaN(metric.value)\n        ? []\n        : [\n            {\n              type: \"point\",\n              ...getPointForMetric(metric, xAxis, yAxis),\n            },\n          ];\n    }\n    default: {\n      const lines = splitIntoContinuousLines(metrics, interval ?? undefined);\n      return lines.map((line) =>\n        // If the line only containes one metric value, render it as a point\n        // Otherwise, render a line\n        line.length === 1\n          ? {\n              type: \"point\",\n              ...getPointForMetric(line[0], xAxis, yAxis),\n            }\n          : {\n              type: \"line\",\n              points: line.map((metric) =>\n                getPointForMetric(metric, xAxis, yAxis),\n              ),\n            },\n      );\n    }\n  }\n}\n\nfunction getPointForMetric(\n  metric: Metric,\n  xAxis: Axis,\n  yAxis: Axis,\n): Point<Metric> {\n  const time = getTimeFromTimestamp(metric.time);\n\n  return {\n    x: normalizeAlongLinearAxis(time, xAxis),\n    y: normalizeAlongLinearAxis(metric.value, yAxis),\n    source: metric,\n  };\n}\n","import type {\n  AbstractChart,\n  Axis,\n  TimeseriesSourceData,\n  Shape,\n  ShapeList,\n} from \"../types\";\nimport {\n  calculateBucketsAndAxesForStackedChart,\n  calculateBarWidth,\n  calculateSmallestTimeInterval,\n  extendAxisWithInterval,\n  getTimeFromTimestamp,\n  normalizeAlongLinearAxis,\n  attachSuggestionsToXAxis,\n} from \"./utils\";\nimport { compact } from \"../../utils\";\nimport type { Metric, Timeseries } from \"../../providerTypes\";\nimport type { StackedChartBuckets } from \"./types\";\n\nexport function generateStackedBarChartFromTimeseries(\n  input: TimeseriesSourceData,\n): AbstractChart<Timeseries, Metric> {\n  const { buckets, isPercentage, xAxis, yAxis } =\n    calculateBucketsAndAxesForStackedChart(input);\n\n  const interval = calculateSmallestTimeInterval(buckets);\n  if (interval) {\n    extendAxisWithInterval(xAxis, interval);\n    attachSuggestionsToXAxis(xAxis, buckets, interval);\n  }\n\n  const barWidth = calculateBarWidth(xAxis, interval ?? 0, 1);\n  const barArgs: BarArgs = { barWidth, buckets, isPercentage, xAxis, yAxis };\n\n  const shapeLists: Array<ShapeList<Timeseries, Metric>> =\n    input.timeseriesData.map((timeseries) => ({\n      shapes: timeseries.visible\n        ? compact(\n            timeseries.metrics.map((metric) => getBarShape(metric, barArgs)),\n          )\n        : [],\n      source: timeseries,\n    }));\n\n  return { shapeLists, xAxis, yAxis };\n}\n\ntype BarArgs = {\n  barWidth: number;\n  buckets: StackedChartBuckets;\n  isPercentage: boolean;\n  xAxis: Axis;\n  yAxis: Axis;\n};\n\nfunction getBarShape(\n  metric: Metric,\n  { xAxis, yAxis, barWidth, isPercentage, buckets }: BarArgs,\n): Shape<Metric> | null {\n  const bucketValue = buckets.get(metric.time);\n  if (!bucketValue || Number.isNaN(metric.value)) {\n    return null;\n  }\n\n  const time = getTimeFromTimestamp(metric.time);\n  const value = isPercentage ? metric.value / bucketValue.total : metric.value;\n\n  const x = normalizeAlongLinearAxis(time, xAxis) - 0.5 * barWidth;\n  const y = bucketValue.currentY;\n\n  const height = normalizeAlongLinearAxis(value, yAxis);\n  bucketValue.currentY += height;\n\n  return { type: \"rectangle\", x, y, width: barWidth, height, source: metric };\n}\n","import type {\n  AbstractChart,\n  AreaPoint,\n  Shape,\n  ShapeList,\n  TimeseriesSourceData,\n} from \"../types\";\nimport {\n  attachSuggestionsToXAxis,\n  calculateBucketsAndAxesForStackedChart,\n  calculateSmallestTimeInterval,\n  getTimeFromTimestamp,\n  normalizeAlongLinearAxis,\n  splitIntoContinuousLines,\n} from \"./utils\";\nimport { compact } from \"../../utils\";\nimport type { Metric, Timeseries } from \"../../providerTypes\";\n\ntype AxesAndBuckets = ReturnType<typeof calculateBucketsAndAxesForStackedChart>;\n\nexport function generateStackedLineChartFromTimeseries(\n  input: TimeseriesSourceData,\n): AbstractChart<Timeseries, Metric> {\n  const axesAndBuckets = calculateBucketsAndAxesForStackedChart(input);\n  const { buckets, xAxis, yAxis } = axesAndBuckets;\n\n  const interval = calculateSmallestTimeInterval(buckets);\n  if (interval) {\n    attachSuggestionsToXAxis(xAxis, buckets, interval);\n  }\n\n  const shapeLists: Array<ShapeList<Timeseries, Metric>> =\n    input.timeseriesData.map((timeseries) => ({\n      shapes: timeseries.visible\n        ? getShapes(timeseries.metrics, axesAndBuckets, interval)\n        : [],\n      source: timeseries,\n    }));\n\n  return { shapeLists, xAxis, yAxis };\n}\n\nfunction getShapes(\n  metrics: Array<Metric>,\n  axesAndBuckets: AxesAndBuckets,\n  interval: number | null,\n): Array<Shape<Metric>> {\n  const lines = splitIntoContinuousLines(metrics, interval ?? undefined);\n  return lines.map((line) => ({\n    type: \"area\",\n    points: compact(\n      line.map((metric) => getPointForMetric(metric, axesAndBuckets)),\n    ),\n  }));\n}\n\nfunction getPointForMetric(\n  metric: Metric,\n  { buckets, isPercentage, xAxis, yAxis }: AxesAndBuckets,\n): AreaPoint<Metric> | null {\n  const bucketValue = buckets.get(metric.time);\n  if (!bucketValue) {\n    return null;\n  }\n\n  const time = getTimeFromTimestamp(metric.time);\n  const value = isPercentage ? metric.value / bucketValue.total : metric.value;\n\n  const yMin = bucketValue.currentY;\n  const yMax = yMin + normalizeAlongLinearAxis(value, yAxis);\n  bucketValue.currentY = yMax;\n\n  return {\n    x: normalizeAlongLinearAxis(time, xAxis),\n    yMin,\n    yMax,\n    source: metric,\n  };\n}\n","import type { AbstractChart, TimeseriesSourceData } from \"../types\";\nimport { generateBarChartFromTimeseries } from \"./generateBarChartFromTimeseries\";\nimport { generateLineChartFromTimeseries } from \"./generateLineChartFromTimeseries\";\nimport { generateStackedBarChartFromTimeseries } from \"./generateStackedBarChartFromTimeseries\";\nimport { generateStackedLineChartFromTimeseries } from \"./generateStackedLineChartFromTimeseries\";\nimport type { Timeseries, Metric } from \"../../providerTypes\";\n\n/**\n * Generates an abstract chart from the given timeseries data.\n */\nexport function generateFromTimeseries(\n  input: TimeseriesSourceData,\n): AbstractChart<Timeseries, Metric> {\n  if (input.graphType === \"line\") {\n    return input.stackingType === \"none\"\n      ? generateLineChartFromTimeseries(input)\n      : generateStackedLineChartFromTimeseries(input);\n  } else {\n    return input.stackingType === \"none\"\n      ? generateBarChartFromTimeseries(input)\n      : generateStackedBarChartFromTimeseries(input);\n  }\n}\n","import { Fragment, memo, useEffect } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nimport { Container, Icon } from \"../BaseComponents\";\nimport { isMac, noop, preventDefault, sortBy } from \"../utils\";\nimport type { Timeseries } from \"../providerTypes\";\nimport type { ToggleTimeseriesEvent } from \"./types\";\nimport { useMeasure } from \"../hooks\";\n\ntype Props = {\n  color: string;\n  index: number;\n  onHover: () => void;\n  onToggleTimeseriesVisibility?: (event: ToggleTimeseriesEvent) => void;\n  readOnly: boolean;\n  setSize: (index: number, value: number) => void;\n  timeseries: Timeseries;\n  uniqueKeys: Array<string>;\n};\n\nexport function TimeseriesLegendItem({\n  color,\n  onHover,\n  onToggleTimeseriesVisibility,\n  readOnly,\n  index,\n  setSize,\n  timeseries,\n  uniqueKeys,\n}: Props): JSX.Element {\n  const [ref, { height }] = useMeasure<HTMLDivElement>();\n\n  useEffect(() => {\n    if (height) {\n      setSize(index, height);\n    }\n  }, [height, setSize, index]);\n\n  const toggleTimeseriesVisibility =\n    onToggleTimeseriesVisibility && !readOnly\n      ? (event: React.MouseEvent | React.KeyboardEvent) => {\n          preventDefault(event);\n          const toggleSingle = isMac ? event.metaKey : event.ctrlKey;\n          onToggleTimeseriesVisibility({\n            timeseries,\n            toggleOthers: !toggleSingle,\n          });\n        }\n      : noop;\n\n  const onKeyDown = (event: React.KeyboardEvent) => {\n    if (event.key === \"Space\") {\n      toggleTimeseriesVisibility(event);\n    }\n  };\n\n  return (\n    <div ref={ref} onClick={toggleTimeseriesVisibility} onKeyDown={onKeyDown}>\n      <LegendItemContainer\n        onMouseOver={timeseries.visible ? onHover : noop}\n        interactive={!readOnly && onToggleTimeseriesVisibility !== undefined}\n      >\n        <ColorBlock color={color} selected={timeseries.visible}>\n          {timeseries.visible && <Icon type=\"check\" width=\"12\" height=\"12\" />}\n        </ColorBlock>\n        <FormattedTimeseries metric={timeseries} emphasizedKeys={uniqueKeys} />\n      </LegendItemContainer>\n    </div>\n  );\n}\n\nconst FormattedTimeseries = memo(function FormattedTimeseries({\n  metric,\n  emphasizedKeys = [],\n}: {\n  metric: Timeseries;\n  emphasizedKeys?: Array<string>;\n}): JSX.Element {\n  const { name, labels } = metric;\n\n  const labelEntries = sortBy(Object.entries(labels), ([key]) => key);\n\n  return (\n    <Text>\n      {name && `${name}: `}\n      {labelEntries.map(([key, value], index) => (\n        <Fragment key={key}>\n          {index > 0 && \", \"}\n          <span className={key in emphasizedKeys ? \"emphasize\" : \"\"}>\n            {key}\n            {value && [\n              \": \",\n              emphasizedKeys.includes(key) ? (\n                <Emphasis key={key}>{value}</Emphasis>\n              ) : (\n                value\n              ),\n            ]}\n          </span>\n        </Fragment>\n      ))}\n    </Text>\n  );\n});\n\nconst ColorBlock = styled.div<{ color: string; selected: boolean }>`\n    background: ${({ color, selected }) => (selected ? color : \"transparent\")};\n    border: 2px solid ${({ color }) => color};\n    width: 14px;\n    height: 14px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${({ theme }) => theme.colorBackground};\n    border-radius: ${({ theme }) => theme.borderRadius400};\n`;\n\nconst Emphasis = styled.span`\n  background-color: ${({ theme }) => theme.colorBase200};\n  /* TODO (Jacco): we should try and find out what to do with this styling */\n  /* stylelint-disable-next-line scale-unlimited/declaration-strict-value */\n  font-weight: 600;\n  border-radius: ${({ theme }) => theme.borderRadius500};\n  padding: 1px 4px;\n  display: inline-block;\n`;\n\nconst InteractiveItemStyling = css`\n    cursor: pointer;\n\n    &:hover {\n        background: ${({ theme }) => theme.colorPrimaryAlpha100};\n    }\n`;\n\nconst LegendItemContainer = styled(Container)<{ interactive: boolean }>`\n    border-radius: ${({ theme }) => theme.borderRadius500};\n    display: flex;\n    align-items: center;\n    font: ${({ theme }) => theme.fontAxisShortHand};\n    padding: 8px 8px 8px 14px;\n    gap: 10px;\n    word-wrap: anywhere;\n\n    ${({ interactive }) => interactive && InteractiveItemStyling}\n`;\n\nconst Text = styled.div`\n    flex: 1;\n`;\n","import { memo, useEffect, useMemo, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport { VariableSizeList } from \"react-window\";\n\nimport { TimeseriesLegendItem } from \"./TimeseriesLegendItem\";\nimport type { TimeseriesLegendProps } from \"./types\";\nimport { Container } from \"../BaseComponents\";\nimport { findUniqueKeys, getShapeListColor, noop } from \"../utils\";\nimport type { Timeseries } from \"../providerTypes\";\nimport { useExpandable, useForceUpdate, useHandler } from \"../hooks\";\n\nconst DEFAULT_HEIGHT = 293;\nconst DEFAULT_SIZE = 50;\nconst EXPANDED_HEIGHT = 592;\n\nexport const TimeseriesLegend = memo(function TimeseriesLegend({\n  chart,\n  colors,\n  footerShown = true,\n  onFocusedShapeListChange,\n  onToggleTimeseriesVisibility,\n  readOnly = false,\n}: TimeseriesLegendProps) {\n  const { expandButton, gradient, isExpanded, onScroll, ref } =\n    useExpandable<HTMLDivElement>({ defaultHeight: DEFAULT_HEIGHT });\n\n  const maxHeight = isExpanded ? EXPANDED_HEIGHT : DEFAULT_HEIGHT;\n\n  const timeseriesData = useMemo(\n    () => chart.shapeLists.map((shapeList) => shapeList.source),\n    [chart],\n  );\n  const numSeries = timeseriesData.length;\n  const resultsText = `${numSeries} result${numSeries === 1 ? \"\" : \"s\"}`;\n\n  const uniqueKeys = useMemo(\n    () => findUniqueKeys(timeseriesData),\n    [timeseriesData],\n  );\n  const listRef = useRef<VariableSizeList<Array<Timeseries>>>(null);\n  const sizeMap = useRef(new Map<number, number>());\n  const heightRef = useRef(timeseriesData.length * DEFAULT_SIZE);\n  const update = useForceUpdate();\n\n  useEffect(() => {\n    sizeMap.current = new Map();\n    heightRef.current = timeseriesData.length * DEFAULT_SIZE;\n    update();\n  }, [timeseriesData, update]);\n\n  const getSize = (index: number) => sizeMap.current.get(index) ?? DEFAULT_SIZE;\n\n  const setSize = useHandler((index: number, size: number) => {\n    const oldSize = getSize(index);\n    sizeMap.current.set(index, size);\n    listRef.current?.resetAfterIndex(index);\n    heightRef.current += size - oldSize;\n\n    if (heightRef.current < maxHeight) {\n      update();\n    }\n  });\n\n  const onMouseOut = () => onFocusedShapeListChange?.(null);\n\n  const setFocusedTimeseries = onFocusedShapeListChange\n    ? (timeseries: Timeseries) => {\n        const shapeList = chart.shapeLists.find(\n          (shapeList) => shapeList.source === timeseries,\n        );\n        if (shapeList) {\n          onFocusedShapeListChange(shapeList);\n        }\n      }\n    : noop;\n\n  const render = useHandler(\n    ({\n      data,\n      index,\n      style,\n    }: {\n      data: Array<Timeseries>;\n      index: number;\n      style: React.CSSProperties;\n    }) => {\n      const timeseries = data[index];\n      return (\n        <div style={style}>\n          {timeseries && (\n            <TimeseriesLegendItem\n              color={getShapeListColor(colors, index)}\n              onHover={() => setFocusedTimeseries(timeseries)}\n              onToggleTimeseriesVisibility={onToggleTimeseriesVisibility}\n              readOnly={readOnly}\n              timeseries={timeseries}\n              uniqueKeys={uniqueKeys}\n              index={index}\n              setSize={setSize}\n            />\n          )}\n        </div>\n      );\n    },\n  );\n\n  return (\n    <ChartLegendContainer onMouseOut={onMouseOut} ref={ref}>\n      <ExpandableContainer maxHeight={`${maxHeight}px`} onScroll={onScroll}>\n        <VariableSizeList\n          height={Math.min(heightRef.current, maxHeight)}\n          width=\"100%\"\n          ref={listRef}\n          itemCount={timeseriesData.length}\n          itemData={timeseriesData}\n          itemSize={getSize}\n        >\n          {render}\n        </VariableSizeList>\n        {gradient}\n      </ExpandableContainer>\n      {footerShown && (\n        <Footer>\n          <Results>{resultsText}</Results>\n          {expandButton}\n        </Footer>\n      )}\n    </ChartLegendContainer>\n  );\n});\n\nconst ExpandableContainer = styled.div<{\n  maxHeight: Exclude<React.CSSProperties[\"height\"], undefined>;\n}>`\n    max-height: ${({ maxHeight }) => maxHeight};\n    overflow: auto;\n`;\n\nconst Footer = styled.div`\n    width: 100%;\n    height: 50px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nconst ChartLegendContainer = styled(Container)`\n    flex-direction: column;\n    font: ${({ theme }) => theme.fontLegendShortHand};\n    letter-spacing: ${({ theme }) => theme.fontLegendLetterSpacing};\n    letter-spacing: 0.02em;\n    padding: 10px 0 0;\n    position: relative;\n    word-wrap: break-word;\n`;\n\nconst Results = styled.span`\n    font: ${({ theme }) => theme.fontResultsSummaryShortHand};\n    letter-spacing: ${({ theme }) => theme.fontResultsSummaryLetterSpacing};\n    color: ${({ theme }) => theme.colorBase400};\n`;\n","import styled from \"styled-components\";\n\nimport type { Metric, Timeseries } from \"../providerTypes\";\n\ntype Props = {\n  metric: Metric;\n  timeseries: Timeseries;\n};\n\nexport function Tooltip({ timeseries, metric }: Props): JSX.Element {\n  return (\n    <table>\n      <TimeseriesTableCaption>{metric.time}</TimeseriesTableCaption>\n      <thead>\n        <tr>\n          <th>{timeseries.name || \"value\"}</th>\n          <th>{metric.value}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {Object.entries(timeseries.labels).map(([key, value]) => (\n          <tr key={key}>\n            <TimeseriesTableTd>{key}:</TimeseriesTableTd>\n            <TimeseriesTableTd>{value}</TimeseriesTableTd>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nconst TimeseriesTableCaption = styled.caption`\n  font-weight: bold;\n  text-align: center;\n  padding: 0 0 6px;\n  color: ${({ theme }) => theme.colorBase400};\n`;\n\nconst TimeseriesTableTd = styled.td`\n  word-wrap: anywhere;\n`;\n","import { memo, useMemo, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\n\nimport { ChartControls } from \"./ChartControls\";\nimport { ChartSizeContainerProvider } from \"../CoreChart\";\nimport type { CloseTooltipFn, MetricsChartProps, TooltipAnchor } from \"./types\";\nimport { CoreChart } from \"../CoreChart\";\nimport { HEIGHT, MARGINS } from \"../CoreChart/constants\";\nimport type { Metric, Timeseries } from \"../providerTypes\";\nimport { noop } from \"../utils\";\nimport { ShapeList, generateFromTimeseries } from \"../Mondrian\";\nimport { TimeseriesLegend } from \"../TimeseriesLegend\";\nimport { Tooltip } from \"./Tooltip\";\nimport { useHandler } from \"../hooks\";\n\nexport function MetricsChart(props: MetricsChartProps) {\n  return (\n    <StyledChartSizeContainerProvider\n      overrideHeight={HEIGHT}\n      marginTop={MARGINS.top}\n      marginRight={MARGINS.right}\n      marginBottom={MARGINS.bottom}\n      marginLeft={MARGINS.left}\n    >\n      <InnerMetricsChart {...props} />\n    </StyledChartSizeContainerProvider>\n  );\n}\n\nconst InnerMetricsChart = memo(function InnerMetricsChart(\n  props: MetricsChartProps,\n) {\n  const {\n    chartControlsShown = true,\n    colors,\n    graphType,\n    legendShown = true,\n    readOnly,\n    stackingControlsShown = true,\n    stackingType,\n    timeRange,\n    timeseriesData,\n  } = props;\n\n  const chart = useMemo(\n    () =>\n      generateFromTimeseries({\n        graphType,\n        stackingType,\n        timeRange,\n        timeseriesData,\n      }),\n    [graphType, stackingType, timeRange, timeseriesData],\n  );\n\n  const [focusedShapeList, setFocusedShapeList] = useState<ShapeList<\n    Timeseries,\n    Metric\n  > | null>(null);\n\n  const theme = useTheme();\n\n  const chartColors = useMemo(\n    () =>\n      colors || [\n        theme[\"colorSupport1400\"],\n        theme[\"colorSupport2400\"],\n        theme[\"colorSupport3400\"],\n        theme[\"colorSupport4400\"],\n        theme[\"colorSupport5400\"],\n        theme[\"colorSupport6400\"],\n        theme[\"colorSupport7400\"],\n        theme[\"colorSupport8400\"],\n        theme[\"colorSupport9400\"],\n        theme[\"colorSupport10400\"],\n        theme[\"colorSupport11400\"],\n      ],\n    [theme, colors],\n  );\n\n  const showTooltip = useHandler(\n    (\n      anchor: TooltipAnchor,\n      [timeseries, metric]: [Timeseries, Metric],\n    ): CloseTooltipFn =>\n      props.showTooltip?.(\n        anchor,\n        <Tooltip timeseries={timeseries} metric={metric} />,\n      ) ?? noop,\n  );\n\n  return (\n    <>\n      {chartControlsShown && !readOnly && (\n        <ChartControls\n          {...props}\n          stackingControlsShown={stackingControlsShown}\n        />\n      )}\n      <CoreChart\n        {...props}\n        chart={chart}\n        colors={chartColors}\n        focusedShapeList={focusedShapeList}\n        onFocusedShapeListChange={setFocusedShapeList}\n        showTooltip={showTooltip}\n      />\n      {legendShown && (\n        <TimeseriesLegend\n          {...props}\n          chart={chart}\n          colors={chartColors}\n          onFocusedShapeListChange={setFocusedShapeList}\n        />\n      )}\n    </>\n  );\n});\n\nconst StyledChartSizeContainerProvider = styled(ChartSizeContainerProvider)`\n  display: flex;\n  gap: 12px;\n  flex-direction: column;\n`;\n","import styled, { useTheme } from \"styled-components\";\nimport { useMemo } from \"react\";\n\nimport {\n  ChartSizeContainerProvider,\n  CoreChart,\n  CoreChartProps,\n} from \"../CoreChart\";\nimport { Metric, Timeseries } from \"../providerTypes\";\nimport { TimeseriesSourceData, generateFromTimeseries } from \"../Mondrian\";\n\ntype Props = Pick<\n  CoreChartProps<Timeseries, Metric>,\n  \"colors\" | \"onChangeTimeRange\"\n> &\n  TimeseriesSourceData;\n\nexport function SparkChart({\n  colors,\n  graphType,\n  stackingType,\n  timeRange,\n  timeseriesData,\n  onChangeTimeRange,\n}: Props) {\n  const theme = useTheme();\n\n  const chart = useMemo(\n    () =>\n      generateFromTimeseries({\n        graphType,\n        stackingType,\n        timeRange,\n        timeseriesData,\n      }),\n    [graphType, stackingType, timeRange, timeseriesData],\n  );\n\n  const chartColors = useMemo(\n    (): Array<string> =>\n      colors || [\n        theme[\"colorSupport1400\"],\n        theme[\"colorSupport2400\"],\n        theme[\"colorSupport3400\"],\n        theme[\"colorSupport4400\"],\n        theme[\"colorSupport5400\"],\n        theme[\"colorSupport6400\"],\n        theme[\"colorSupport7400\"],\n        theme[\"colorSupport8400\"],\n        theme[\"colorSupport9400\"],\n        theme[\"colorSupport10400\"],\n        theme[\"colorSupport11400\"],\n      ],\n    [theme, colors],\n  );\n\n  return (\n    <StyledChartSizeContainerProvider>\n      <CoreChart\n        chart={chart}\n        colors={chartColors}\n        focusedShapeList={null}\n        gridShown={false}\n        onChangeTimeRange={onChangeTimeRange}\n        timeRange={timeRange}\n      />\n    </StyledChartSizeContainerProvider>\n  );\n}\n\nconst StyledChartSizeContainerProvider = styled(ChartSizeContainerProvider)`\n  width: 100%;\n  height: 100%;\n`;\n"],"names":["ButtonGroup","styled","span","theme","colorBase200","borderRadius500","Box","div","Container","ControlsContainer","ControlsGroup","ControlsSet","ControlsSetLabel","fontControlsShortHand","fontControlsLetterSpacing","colorBase500","_path","_extends","ICON_MAP","chart_bar","ChartBarIcon","chart_line","ChartLineIcon","check","CheckIcon","combined","CombinedIcon","percentage","PercentageIcon","stacked","StackedIcon","triangle_down","TriangleDownIcon","Icon","type","svgProps","Component","_jsx","buttonStyling","css","colorPrimary500","effectFocusOutline","useIconButtonTheme","normal","color","colorBase800","backgroundColor","hover","colorBase300","active","colorBackground","colorBase600","focus","disabled","StyledButton","button","buttonSize","padding","width","height","iconSize","IconButton","forwardRef","props","ref","className","style","children","otherProps","useTheme","iconButtonTheme","newStyle","elementProps","compact","items","filter","Boolean","findUniqueKeys","timeseriesData","constantKeys","detectedValues","timeseries","keys","Object","labels","undefined","Set","key","delete","allKeys","has","getShapeListColor","colors","listIndex","length","identity","input","mergeRefs","refs","value","current","noop","preventDefault","event","sortBy","array","getPriorityFn","reverse","sort","a","b","priorityA","priorityB","secondsToTimestamp","seconds","Date","toISOString","timestampToSeconds","timestamp","getTime","os","navigator","platform","match","toLowerCase","isMac","ChartControls","graphType","onChangeGraphType","onChangeStackingType","stackingControlsShown","stackingType","_jsxs","aria-label","onClick","ChartSizeContext","createContext","xMax","yMax","marginTop","marginRight","marginBottom","marginLeft","noDeps","useHandler","handler","handlerRef","useRef","useCallback","args","useExpandable","defaultHeight","showExpandButton","setShowExpandButton","useState","isExpanded","setIsExpanded","showGradient","setShowGradient","update","element","scrollTop","scrollHeight","clientHeight","asyncUpdate","setTimeout","useEffect","unsubscribeFromNode","setRef","node","subscribeToNode","onClickExpand","onScroll","currentTarget","expandButton","Expand","revert","gradient","GradientContainer","Gradient","listenerMap","WeakMap","observer","observerCallback","entries","entry","listeners","get","target","listener","add","set","ResizeObserver","observe","size","unobserve","reducer","counter","useForceUpdate","forceUpdate","useReducer","noEntries","useIntersectionObserver","options","intersections","setIntersections","IntersectionObserver","disconnect","defaultDimensions","useMeasure","setElement","rect","setRect","useMemo","window","contentRect","useLayoutEffect","ChartSizeContainerProvider","overrideHeight","measureRef","measuredHeight","intersectionRef","intersectionOptions","setValue","updateValue","debounce","some","intersection","isIntersecting","Provider","ChartSkeleton","root","rootMargin","threshold","AreaShape","memo","anyFocused","area","focused","scales","id","useId","gradientId","fillColor","getX","point","xScale","x","getY0","yScale","yMin","getY1","g","opacity","defs","linearGradient","stop","offset","stopColor","stopOpacity","Threshold","data","points","y0","y1","clipAboveTo","clipBelowTo","aboveAreaProps","fill","belowAreaProps","VisxArea","stroke","strokeWidth","LineShape","line","getY","y","Area","PointShape","circle","cx","cy","r","RectangleShape","rectangle","fillOpacity","ChartShape","shape","ChartContent","chart","focusedShapeList","_Fragment","shapeLists","flatMap","shapeList","shapes","map","shapeIndex","LABEL_OFFSET","BottomAxis","strokeColor","strokeDasharray","ticks","xAxis","maxValue","minValue","fontAxisFontSize","fontAxisFontFamily","fontAxisFontStyle","fontAxisFontWeight","fontAxisLetterSpacing","formatter","getTimeFormatter","transform","x1","x2","y2","time","index","text","dy","fontFamily","fontStyle","fontWeight","fontSize","letterSpacing","textAnchor","timeScale","getTimeScale","getFormatter","time1","time2","delta","unit","utcFormat","GridColumns","xTicks","lineProps","GridRows","yTicks","LeftAxis","tickLabelProps","dx","numTicks","tickFormat","valueOf","GridWithAxes","gridColumnsShown","gridRowsShown","gridBordersShown","gridDashArray","gridStrokeColor","yAxis","useCustomSpring","animatedScale","copy","domain","getTicks","axis","max","scale","suggestions","tickSuggestions","getTicksFromSuggestions","getTicksFromRange","extendTicksToFitAxis","interval","tick","push","len","suggestionInterval","axisRange","ticksPerRange","divisionFactor","Math","ceil","i","maxTicks","scaleToAxis","shift","preTick","unshift","postTick","spring","duration","easings","motionValue","useMotionValue","setCurrent","on","controls","animate","defaultState","mouseInteraction","dragKeyPressed","zoomKeyPressed","useInteractiveControls","readOnly","state","dispatch","controlsStateReducer","createControls","resetMouseInteraction","startDrag","start","payload","startZoom","updateEndValue","end","updatePressedKeys","action","shiftKey","metaKey","ctrlKey","HEIGHT","MARGINS","top","bottom","left","right","getCoordinatesForEvent","svg","getTarget","getBoundingClientRect","clientX","clientY","SVGSVGElement","parentElement","MIN_DURATION","useMouseControls","interactiveControls","timeRange","onChangeTimeRange","dimensions","onMouseDown","buttons","coords","onMouseMove","onMouseUp","from","coordinateToTimestamp","min","to","move","onWheel","factor","deltaY","zoom","deltaRatio","currentFrom","currentTo","focusRatio","focusTimestamp","newDuration","useScales","scaleLinear","range","translatedRange","round","nice","useTooltip","graphTooltip","setGraphTooltip","closeFnRef","showTooltipFn","showTooltip","tip","ctm","getScreenCTM","createSVGPoint","matrixTransform","DOMRect","contextElement","sourcePoint","closeTooltip","closest","getClosestSeriesAndPointWithCoordinates","series","seriesIndex","findIndex","source","onMouseLeave","closestSeriesAndPoint","closestDistance","Infinity","getClosestPointWithDistance","closestCoords","distance","isCloser","getClosestPointWithDistanceForArea","getClosestPointWithDistanceForLine","getDistance","getClosestPointWithDistanceForRectangle","horizontalDistance","abs","verticalDistance","closestPoint","horizontal","vertical","p1","p2","reference","ZoomBar","reverseZoom","CoreChart","gridShown","useContext","onMouseMoveControls","onMouseMoveTooltip","modifierPressed","clipPathId","cursor","getCursorFromState","wheelListenerOptions","passive","addEventListener","removeEventListener","clipPath","pointerEvents","getTimeFromTimestamp","Number","isNaN","TypeError","attachSuggestionsToXAxis","buckets","firstBucketTime","getFirstBucketTime","suggestion","firstBucketTimestamp","BAR_PADDING","BAR_PLUS_PADDING","calculateBarWidth","numBarsPerGroup","numGroups","numBars","HALF_PADDING","calculateBarX","groupX","barWidth","barIndex","numShapeLists","extendMinMax","minMax","getInitialMinMax","getYAxisForConstantValue","calculateStackedYAxisRange","getTotalValue","values","createMetricBuckets","initialValue","Map","visible","metrics","getXAxisFromTimeRange","calculateBucketsAndAxesForStackedChart","currentY","total","isPercentage","calculateSmallestTimeInterval","timestamps","Array","smallestInterval","calculateYAxisRange","getMinMax","getBucketsMinMax","bucketMinMax","extendAxisWithInterval","halfInterval","normalizeAlongLinearAxis","splitIntoContinuousLines","lines","currentLine","previousTime","metric","newTime","generateBarChartFromTimeseries","visibleTimeseriesData","maybeMinMax","barArgs","getBarShape","indexOf","numVisibleTimeseries","generateLineChartFromTimeseries","getShapes","getPointForMetric","generateStackedBarChartFromTimeseries","bucketValue","generateStackedLineChartFromTimeseries","axesAndBuckets","generateFromTimeseries","TimeseriesLegendItem","onHover","onToggleTimeseriesVisibility","setSize","uniqueKeys","toggleTimeseriesVisibility","toggleSingle","toggleOthers","onKeyDown","LegendItemContainer","onMouseOver","interactive","ColorBlock","selected","FormattedTimeseries","emphasizedKeys","name","labelEntries","Text","Fragment","includes","Emphasis","borderRadius400","InteractiveItemStyling","colorPrimaryAlpha100","fontAxisShortHand","DEFAULT_HEIGHT","DEFAULT_SIZE","EXPANDED_HEIGHT","TimeseriesLegend","footerShown","onFocusedShapeListChange","maxHeight","numSeries","resultsText","listRef","sizeMap","heightRef","getSize","oldSize","resetAfterIndex","onMouseOut","setFocusedTimeseries","find","render","ChartLegendContainer","ExpandableContainer","VariableSizeList","itemCount","itemData","itemSize","Footer","Results","fontLegendShortHand","fontLegendLetterSpacing","fontResultsSummaryShortHand","fontResultsSummaryLetterSpacing","colorBase400","Tooltip","table","TimeseriesTableCaption","thead","tr","th","tbody","TimeseriesTableTd","caption","td","MetricsChart","StyledChartSizeContainerProvider","InnerMetricsChart","chartControlsShown","legendShown","setFocusedShapeList","chartColors","anchor","SparkChart"],"mappings":"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"}