name: Build

on:
  push:
    branches: [ '*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - id: branch
      name: Export branch
      run: echo "::set-output name=branch::${GITHUB_HEAD_REF:-${GITHUB_REF##refs/heads/}}"

    - name: Cache Rust dependencies
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-cargo-

    - name: Install latest stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Setup Go (for Jsonnet tools)
      uses: actions/setup-go@v2
      with:
        go-version: '1.17'

    - name: Install Jsonnet tools
      run: |
        export GO111MODULE=on
        go install github.com/google/go-jsonnet/cmd/jsonnetfmt@latest
        go install github.com/google/go-jsonnet/cmd/jsonnet-lint@latest

    - name: Check format
      run: cargo fmt -- --check

    - name: Lint code
      uses: actions-rs/clippy-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        args: >
          --all-features
          -p fiberplane
          -p time_util
          -p base64uuid
          -p fiberplane-markdown

    - name: Run tests
      run: cargo test --verbose

    - name: Lint Jsonnet
      working-directory: templates
      run: jsonnet-lint fiberplane.libsonnet

    - name: Check Jsonnet format
      working-directory: templates
      run: |
        jsonnetfmt -i fiberplane.libsonnet
        if ! git diff --quiet fiberplane.libsonnet ; then
          echo "::error file=fiberplane.libsonnet::Bad Jsonnet format. Run jsonnetfmt -i fiberplane.libsonnet or use one of the editor extensions to format it automatically: https://jsonnet.org/learning/tools.html";
          git diff;
          exit 1;
        fi

    - name: Verify template docs
      working-directory: templates
      run: |
        docker run --rm -v $PWD:$PWD node:17 npx -y jsdoc-to-markdown -c $PWD/jsdoc.json $PWD/fiberplane.libsonnet > docs/template_api.md
        if ! git diff --quiet docs/template_api.md ; then
          echo "::error file=docs/template_api.md::Out of date documentation, did you forgot to regenerate it?";
          git diff;
          exit 1;
        fi
